import { race, Subject } from 'rxjs';
export class HotToastRef {
    constructor(toast) {
        this.toast = toast;
        /** Subject for notifying the user that the toast has been closed. */
        this._onClosed = new Subject();
    }
    get data() {
        return this.toast.data;
    }
    set dispose(value) {
        this._dispose = value;
    }
    getToast() {
        return this.toast;
    }
    /**Used for internal purpose
     * Attach ToastRef to container
     */
    appendTo(container) {
        const { dispose, updateMessage, updateToast, afterClosed } = container.addToast(this);
        this.dispose = dispose;
        this.updateMessage = updateMessage;
        this.updateToast = updateToast;
        this.afterClosed = race(this._onClosed.asObservable(), afterClosed);
        return this;
    }
    /**
     * Closes the toast
     *
     * @param [closeData={ dismissedByAction: false }] -
     * Make sure to pass { dismissedByAction: true } when closing from template
     * @memberof HotToastRef
     */
    close(closeData = { dismissedByAction: false }) {
        this._dispose();
        this._onClosed.next({ dismissedByAction: closeData.dismissedByAction, id: this.toast.id });
        this._onClosed.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90LXRvYXN0LXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9ob3QtdG9hc3Qvc3JjL2xpYi9ob3QtdG9hc3QtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBYyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTWpELE1BQU0sT0FBTyxXQUFXO0lBVXRCLFlBQW9CLEtBQXNCO1FBQXRCLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBSDFDLHFFQUFxRTtRQUM3RCxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQWlCLENBQUM7SUFFSixDQUFDO0lBRTlDLElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLEtBQWlCO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVEsQ0FBQyxTQUFxQztRQUM1QyxNQUFNLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0RixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxZQUE0QyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRTtRQUM1RSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMzRixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnQgfSBmcm9tICdAbmduZWF0L292ZXJ2aWV3JztcbmltcG9ydCB7IE9ic2VydmFibGUsIHJhY2UsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLy8gVGhpcyBzaG91bGQgYmUgYSBgdHlwZWAgaW1wb3J0IHNpbmNlIGl0IGNhdXNlcyBgbmctcGFja2FncmAgY29tcGlsYXRpb24gdG8gZmFpbCBiZWNhdXNlIG9mIGEgY3ljbGljIGRlcGVuZGVuY3kuXG5pbXBvcnQgdHlwZSB7IEhvdFRvYXN0Q29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2hvdC10b2FzdC1jb250YWluZXIvaG90LXRvYXN0LWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSG90VG9hc3RDbG9zZSwgVG9hc3QsIFVwZGF0ZVRvYXN0T3B0aW9ucywgSG90VG9hc3RSZWZQcm9wcywgRGVmYXVsdERhdGFUeXBlIH0gZnJvbSAnLi9ob3QtdG9hc3QubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgSG90VG9hc3RSZWY8RGF0YVR5cGUgPSBEZWZhdWx0RGF0YVR5cGU+IGltcGxlbWVudHMgSG90VG9hc3RSZWZQcm9wczxEYXRhVHlwZT4ge1xuICB1cGRhdGVNZXNzYWdlOiAobWVzc2FnZTogQ29udGVudCkgPT4gdm9pZDtcbiAgdXBkYXRlVG9hc3Q6IChvcHRpb25zOiBVcGRhdGVUb2FzdE9wdGlvbnM8RGF0YVR5cGU+KSA9PiB2b2lkO1xuICBhZnRlckNsb3NlZDogT2JzZXJ2YWJsZTxIb3RUb2FzdENsb3NlPjtcblxuICBwcml2YXRlIF9kaXNwb3NlOiAoKSA9PiB2b2lkO1xuXG4gIC8qKiBTdWJqZWN0IGZvciBub3RpZnlpbmcgdGhlIHVzZXIgdGhhdCB0aGUgdG9hc3QgaGFzIGJlZW4gY2xvc2VkLiAqL1xuICBwcml2YXRlIF9vbkNsb3NlZCA9IG5ldyBTdWJqZWN0PEhvdFRvYXN0Q2xvc2U+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0b2FzdDogVG9hc3Q8RGF0YVR5cGU+KSB7fVxuXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLnRvYXN0LmRhdGE7XG4gIH1cblxuICBzZXQgZGlzcG9zZSh2YWx1ZTogKCkgPT4gdm9pZCkge1xuICAgIHRoaXMuX2Rpc3Bvc2UgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldFRvYXN0KCkge1xuICAgIHJldHVybiB0aGlzLnRvYXN0O1xuICB9XG5cbiAgLyoqVXNlZCBmb3IgaW50ZXJuYWwgcHVycG9zZVxuICAgKiBBdHRhY2ggVG9hc3RSZWYgdG8gY29udGFpbmVyXG4gICAqL1xuICBhcHBlbmRUbyhjb250YWluZXI6IEhvdFRvYXN0Q29udGFpbmVyQ29tcG9uZW50KSB7XG4gICAgY29uc3QgeyBkaXNwb3NlLCB1cGRhdGVNZXNzYWdlLCB1cGRhdGVUb2FzdCwgYWZ0ZXJDbG9zZWQgfSA9IGNvbnRhaW5lci5hZGRUb2FzdCh0aGlzKTtcblxuICAgIHRoaXMuZGlzcG9zZSA9IGRpc3Bvc2U7XG4gICAgdGhpcy51cGRhdGVNZXNzYWdlID0gdXBkYXRlTWVzc2FnZTtcbiAgICB0aGlzLnVwZGF0ZVRvYXN0ID0gdXBkYXRlVG9hc3Q7XG4gICAgdGhpcy5hZnRlckNsb3NlZCA9IHJhY2UodGhpcy5fb25DbG9zZWQuYXNPYnNlcnZhYmxlKCksIGFmdGVyQ2xvc2VkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHRvYXN0XG4gICAqXG4gICAqIEBwYXJhbSBbY2xvc2VEYXRhPXsgZGlzbWlzc2VkQnlBY3Rpb246IGZhbHNlIH1dIC1cbiAgICogTWFrZSBzdXJlIHRvIHBhc3MgeyBkaXNtaXNzZWRCeUFjdGlvbjogdHJ1ZSB9IHdoZW4gY2xvc2luZyBmcm9tIHRlbXBsYXRlXG4gICAqIEBtZW1iZXJvZiBIb3RUb2FzdFJlZlxuICAgKi9cbiAgY2xvc2UoY2xvc2VEYXRhOiB7IGRpc21pc3NlZEJ5QWN0aW9uOiBib29sZWFuIH0gPSB7IGRpc21pc3NlZEJ5QWN0aW9uOiBmYWxzZSB9KSB7XG4gICAgdGhpcy5fZGlzcG9zZSgpO1xuICAgIHRoaXMuX29uQ2xvc2VkLm5leHQoeyBkaXNtaXNzZWRCeUFjdGlvbjogY2xvc2VEYXRhLmRpc21pc3NlZEJ5QWN0aW9uLCBpZDogdGhpcy50b2FzdC5pZCB9KTtcbiAgICB0aGlzLl9vbkNsb3NlZC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=