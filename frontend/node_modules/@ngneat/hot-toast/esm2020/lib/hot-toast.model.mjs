export class ToastConfig {
    constructor() {
        /**
         * Sets the reverse order for hot-toast stacking
         *
         * @default false
         */
        this.reverseOrder = false;
        this.ariaLive = 'polite';
        this.role = 'status';
        this.position = 'top-center';
        this.autoClose = true;
        this.theme = 'toast';
        this.attributes = {};
        // key in ToastType
        this.info = { content: '' };
        this.success = { content: '' };
        this.error = { content: '' };
        this.loading = { content: '' };
        this.blank = { content: '' };
        this.warning = { content: '' };
    }
}
const isFunction = (valOrFunction) => typeof valOrFunction === 'function';
export const resolveValueOrFunction = (valOrFunction, arg) => isFunction(valOrFunction) ? valOrFunction(arg) : valOrFunction;
export class ToastPersistConfig {
    constructor() {
        /**
         *In which storage id vs. counts should be stored
         *
         * @type {('local' | 'session')}
         * @memberof ToastPersistConfig
         * @default 'local'
         */
        this.storage = 'local';
        /**
         *The key pattern to store object in storage. `${id}` in pattern is replaced with actual toast id.
         *
         * @type {('local' | 'session')}
         * @memberof ToastPersistConfig
         * @default 'ngneat/hottoast-${id}'
         */
        this.key = 'ngneat/hototast-${id}';
        /**
         *The number of toasts allowed to show.
         *
         * @memberof ToastPersistConfig
         * @default 1
         */
        this.count = 1;
        this.enabled = false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90LXRvYXN0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L2hvdC10b2FzdC9zcmMvbGliL2hvdC10b2FzdC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLE9BQU8sV0FBVztJQUF4QjtRQUNFOzs7O1dBSUc7UUFDSCxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUVyQixhQUFRLEdBQWtCLFFBQVEsQ0FBQztRQUNuQyxTQUFJLEdBQWMsUUFBUSxDQUFDO1FBQzNCLGFBQVEsR0FBa0IsWUFBWSxDQUFDO1FBSXZDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFLakIsVUFBSyxHQUFlLE9BQU8sQ0FBQztRQUM1QixlQUFVLEdBQTJCLEVBQUUsQ0FBQztRQUV4QyxtQkFBbUI7UUFDbkIsU0FBSSxHQUFrRCxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUN0RSxZQUFPLEdBQWtELEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3pFLFVBQUssR0FBa0QsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDdkUsWUFBTyxHQUFrRCxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUN6RSxVQUFLLEdBQWtELEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3ZFLFlBQU8sR0FBa0QsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDM0UsQ0FBQztDQUFBO0FBZUQsTUFBTSxVQUFVLEdBQUcsQ0FDakIsYUFBNEMsRUFDRSxFQUFFLENBQUMsT0FBTyxhQUFhLEtBQUssVUFBVSxDQUFDO0FBRXZGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQWUsYUFBNEMsRUFBRSxHQUFTLEVBQVUsRUFBRSxDQUN0SCxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO0FBZ05qRSxNQUFNLE9BQU8sa0JBQWtCO0lBQS9CO1FBQ0U7Ozs7OztXQU1HO1FBQ0gsWUFBTyxHQUF5QixPQUFPLENBQUM7UUFFeEM7Ozs7OztXQU1HO1FBQ0gsUUFBRyxHQUFZLHVCQUF1QixDQUFDO1FBRXZDOzs7OztXQUtHO1FBQ0gsVUFBSyxHQUFJLENBQUMsQ0FBQztRQUVYLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFDbEIsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRlbnQgfSBmcm9tICdAbmduZWF0L292ZXJ2aWV3JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNsYXNzIFRvYXN0Q29uZmlnIGltcGxlbWVudHMgRGVmYXVsdFRvYXN0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSByZXZlcnNlIG9yZGVyIGZvciBob3QtdG9hc3Qgc3RhY2tpbmdcbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJldmVyc2VPcmRlciA9IGZhbHNlO1xuXG4gIGFyaWFMaXZlOiBUb2FzdEFyaWFMaXZlID0gJ3BvbGl0ZSc7XG4gIHJvbGU6IFRvYXN0Um9sZSA9ICdzdGF0dXMnO1xuICBwb3NpdGlvbjogVG9hc3RQb3NpdGlvbiA9ICd0b3AtY2VudGVyJztcbiAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gIGNsb3NlU3R5bGU6IGFueTtcbiAgZGlzbWlzc2libGU6IGJvb2xlYW47XG4gIGF1dG9DbG9zZSA9IHRydWU7XG4gIGR1cmF0aW9uOiBudW1iZXI7XG4gIGljb246IENvbnRlbnQ7XG4gIGljb25UaGVtZTogSWNvblRoZW1lO1xuICBzdHlsZTogYW55O1xuICB0aGVtZTogVG9hc3RUaGVtZSA9ICd0b2FzdCc7XG4gIGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuICAvLyBrZXkgaW4gVG9hc3RUeXBlXG4gIGluZm86IFRvYXN0T3B0aW9uczx1bmtub3duPiAmIHsgY29udGVudD86IENvbnRlbnQgfSA9IHsgY29udGVudDogJycgfTtcbiAgc3VjY2VzczogVG9hc3RPcHRpb25zPHVua25vd24+ICYgeyBjb250ZW50PzogQ29udGVudCB9ID0geyBjb250ZW50OiAnJyB9O1xuICBlcnJvcjogVG9hc3RPcHRpb25zPHVua25vd24+ICYgeyBjb250ZW50PzogQ29udGVudCB9ID0geyBjb250ZW50OiAnJyB9O1xuICBsb2FkaW5nOiBUb2FzdE9wdGlvbnM8dW5rbm93bj4gJiB7IGNvbnRlbnQ/OiBDb250ZW50IH0gPSB7IGNvbnRlbnQ6ICcnIH07XG4gIGJsYW5rOiBUb2FzdE9wdGlvbnM8dW5rbm93bj4gJiB7IGNvbnRlbnQ/OiBDb250ZW50IH0gPSB7IGNvbnRlbnQ6ICcnIH07XG4gIHdhcm5pbmc6IFRvYXN0T3B0aW9uczx1bmtub3duPiAmIHsgY29udGVudD86IENvbnRlbnQgfSA9IHsgY29udGVudDogJycgfTtcbn1cblxuZXhwb3J0IHR5cGUgVG9hc3RUeXBlID0gJ3N1Y2Nlc3MnIHwgJ2Vycm9yJyB8ICdsb2FkaW5nJyB8ICdibGFuaycgfCAnd2FybmluZycgfCAnaW5mbyc7XG5leHBvcnQgdHlwZSBUb2FzdFBvc2l0aW9uID0gJ3RvcC1sZWZ0JyB8ICd0b3AtY2VudGVyJyB8ICd0b3AtcmlnaHQnIHwgJ2JvdHRvbS1sZWZ0JyB8ICdib3R0b20tY2VudGVyJyB8ICdib3R0b20tcmlnaHQnO1xuXG5leHBvcnQgdHlwZSBJY29uVGhlbWUgPSB7XG4gIHByaW1hcnk6IHN0cmluZztcbiAgc2Vjb25kYXJ5Pzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVG9hc3RUaGVtZSA9ICd0b2FzdCcgfCAnc25hY2tiYXInO1xuXG5leHBvcnQgdHlwZSBWYWx1ZUZ1bmN0aW9uPFRWYWx1ZSwgVEFyZz4gPSAoYXJnOiBUQXJnKSA9PiBUVmFsdWU7XG5leHBvcnQgdHlwZSBWYWx1ZU9yRnVuY3Rpb248VFZhbHVlLCBUQXJnPiA9IFRWYWx1ZSB8IFZhbHVlRnVuY3Rpb248VFZhbHVlLCBUQXJnPjtcblxuY29uc3QgaXNGdW5jdGlvbiA9IDxUVmFsdWUsIFRBcmc+KFxuICB2YWxPckZ1bmN0aW9uOiBWYWx1ZU9yRnVuY3Rpb248VFZhbHVlLCBUQXJnPlxuKTogdmFsT3JGdW5jdGlvbiBpcyBWYWx1ZUZ1bmN0aW9uPFRWYWx1ZSwgVEFyZz4gPT4gdHlwZW9mIHZhbE9yRnVuY3Rpb24gPT09ICdmdW5jdGlvbic7XG5cbmV4cG9ydCBjb25zdCByZXNvbHZlVmFsdWVPckZ1bmN0aW9uID0gPFRWYWx1ZSwgVEFyZz4odmFsT3JGdW5jdGlvbjogVmFsdWVPckZ1bmN0aW9uPFRWYWx1ZSwgVEFyZz4sIGFyZzogVEFyZyk6IFRWYWx1ZSA9PlxuICBpc0Z1bmN0aW9uKHZhbE9yRnVuY3Rpb24pID8gdmFsT3JGdW5jdGlvbihhcmcpIDogdmFsT3JGdW5jdGlvbjtcblxuZXhwb3J0IHR5cGUgVG9hc3RSb2xlID0gJ3N0YXR1cycgfCAnYWxlcnQnO1xuXG5leHBvcnQgdHlwZSBUb2FzdEFyaWFMaXZlID0gJ2Fzc2VydGl2ZScgfCAnb2ZmJyB8ICdwb2xpdGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvYXN0PERhdGFUeXBlPiB7XG4gIHR5cGU6IFRvYXN0VHlwZTtcblxuICAvKipcbiAgICogVW5pcXVlIGlkIHRvIGFzc29jaWF0ZSB3aXRoIGhvdC10b2FzdC5cbiAgICogVGhlcmUgY2FuJ3QgYmUgbXVsdGlwbGUgaG90LXRvYXN0cyBvcGVuZWQgd2l0aCBzYW1lIGlkLlxuICAgKlxuICAgKiBAZGVmYXVsdCBEYXRlLm5vdygpLnRvU3RyaW5nKClcbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBtZXNzYWdlIHRvIHNob3cgaW4gdGhlIGhvdC10b2FzdC4gKi9cbiAgbWVzc2FnZTogQ29udGVudDtcblxuICAvKipcbiAgICogUm9sZSBvZiB0aGUgbGl2ZSByZWdpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IHN0YXR1c1xuICAgKi9cbiAgcm9sZTogVG9hc3RSb2xlO1xuXG4gIC8qKiBhcmlhLWxpdmUgdmFsdWUgZm9yIHRoZSBsaXZlIHJlZ2lvbi5cbiAgICpcbiAgICogQGRlZmF1bHQgcG9saXRlXG4gICAqL1xuICBhcmlhTGl2ZTogVG9hc3RBcmlhTGl2ZTtcblxuICAvKipJY29uIHRvIHNob3cgaW4gdGhlIGhvdC10b2FzdCAqL1xuICBpY29uPzogQ29udGVudDtcblxuICAvKipcbiAgICogRHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIGhvdC10b2FzdCB3aWxsIGJlIGF1dG8gY2xvc2VkLlxuICAgKiBDYW4gYmUgZGlzYWJsZWQgdmlhIGBhdXRvQ2xvc2U6IGZhbHNlYFxuICAgKlxuICAgKiBAZGVmYXVsdCAzMDAwIHwgZXJyb3IgPSA0MDAwIHwgbG9hZGluZyA9IDMwMDAwXG4gICAqL1xuICBkdXJhdGlvbj86IG51bWJlcjtcblxuICAvKipcbiAgICogU2hvdyBjbG9zZSBidXR0b24gaW4gaG90LXRvYXN0XG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNtaXNzaWJsZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEF1dG8gY2xvc2UgaG90LXRvYXN0IGFmdGVyIGR1cmF0aW9uXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGF1dG9DbG9zZT86IGJvb2xlYW47XG5cbiAgLyoqRXh0cmEgc3R5bGVzIHRvIGFwcGx5IGZvciBob3QtdG9hc3QgKi9cbiAgc3R5bGU/OiBhbnk7XG5cbiAgLyoqRXh0cmEgQ1NTIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGhvdCB0b2FzdCBjb250YWluZXIuICovXG4gIGNsYXNzTmFtZT86IHN0cmluZztcblxuICAvKipFeHRyYSBhdHRyaWJ1dGUgdG8gYmUgYWRkZWQgdG8gdGhlIGhvdCB0b2FzdCBjb250YWluZXIuICovXG4gIGF0dHJpYnV0ZXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIC8qKlVzZSB0aGlzIHRvIGNoYW5nZSBpY29uIGNvbG9yICovXG4gIGljb25UaGVtZT86IEljb25UaGVtZTtcblxuICAvKipcbiAgICogVmlzdWFsIGFwcGVhcmFuY2Ugb2YgaG90LXRvYXN0XG4gICAqXG4gICAqIEBkZWZhdWx0IHRvYXN0XG4gICAqL1xuICB0aGVtZT86IFRvYXN0VGhlbWU7XG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiB0byBwbGFjZSB0aGUgaG90LXRvYXN0LlxuICAgKlxuICAgKiAgQGRlZmF1bHQgdG9wLWNlbnRlclxuICAgKi9cbiAgcG9zaXRpb24/OiBUb2FzdFBvc2l0aW9uO1xuXG4gIC8qKkV4dHJhIHN0eWxlcyB0byBhcHBseSBmb3IgY2xvc2UgYnV0dG9uICovXG4gIGNsb3NlU3R5bGU/OiBhbnk7XG5cbiAgY3JlYXRlZEF0OiBudW1iZXI7XG4gIHZpc2libGU6IGJvb2xlYW47XG4gIGhlaWdodD86IG51bWJlcjtcblxuICBvYnNlcnZhYmxlTWVzc2FnZXM/OiBPYnNlcnZhYmxlTWVzc2FnZXM8dW5rbm93biwgRGF0YVR5cGU+O1xuXG4gIC8qKlxuICAgKiBVc2VmdWwgd2hlbiB5b3Ugd2FudCB0byBrZWVwIGEgcGVyc2lzdGFuY2UgZm9yIHRvYXN0IGJhc2VkIG9uIGlkcywgYWNyb3NzIHNlc3Npb25zLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBMZXRzIHNheSB5b3Ugd2FudCBzaG93IGhvdC10b2FzdCwgd2l0aCBhIHBhcnRpY3VsYXIgaWQsXG4gICAqIC8vIG1heCAzIHRpbWVzIHRvIGEgdXNlciBpcnJlc3BlY3RpdmUgb2YgYnJvd3NlciBzZXNzaW9uLlxuICAgKiAvLyBJbiB0aGlzIGNhc2UgeW91IHdpbGwgc2V0IHRoaXMgYXM6XG4gICAqIHsgZW5hYmxlZDogdHJ1ZSwgY291bnQ6IDMgfVxuICAgKlxuICAgKiBAdHlwZSB7VG9hc3RQZXJzaXN0Q29uZmlnfVxuICAgKi9cbiAgcGVyc2lzdD86IFRvYXN0UGVyc2lzdENvbmZpZztcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byBwYXNzIGluamVjdG9yIGZvciB5b3VyIGNvbXBvbmVudFxuICAgKlxuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQHR5cGUge0luamVjdG9yfVxuICAgKiBAbWVtYmVyb2YgVG9hc3RcbiAgICovXG4gIGluamVjdG9yPzogSW5qZWN0b3I7XG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcGFzcyBkYXRhIGZvciB5b3VyIGNvbXBvbmVudC90ZW1wbGF0ZVxuICAgKlxuICAgKiBAc2luY2UgMi4wLjBcbiAgICogQHR5cGUge0RhdGFUeXBlfVxuICAgKiBAbWVtYmVyb2YgVG9hc3RcbiAgICovXG4gIGRhdGE/OiBEYXRhVHlwZTtcbn1cblxuZXhwb3J0IHR5cGUgVG9hc3RPcHRpb25zPERhdGFUeXBlPiA9IFBhcnRpYWw8XG4gIFBpY2s8XG4gICAgVG9hc3Q8RGF0YVR5cGU+LFxuICAgIHwgJ2lkJ1xuICAgIHwgJ2ljb24nXG4gICAgfCAnZHVyYXRpb24nXG4gICAgfCAnZGlzbWlzc2libGUnXG4gICAgfCAnYXV0b0Nsb3NlJ1xuICAgIHwgJ3JvbGUnXG4gICAgfCAnYXJpYUxpdmUnXG4gICAgfCAnY2xhc3NOYW1lJ1xuICAgIHwgJ3N0eWxlJ1xuICAgIHwgJ2ljb25UaGVtZSdcbiAgICB8ICd0aGVtZSdcbiAgICB8ICdwb3NpdGlvbidcbiAgICB8ICdjbG9zZVN0eWxlJ1xuICAgIHwgJ3BlcnNpc3QnXG4gICAgfCAnaW5qZWN0b3InXG4gICAgfCAnZGF0YSdcbiAgICB8ICdhdHRyaWJ1dGVzJ1xuICA+XG4+O1xuXG5leHBvcnQgdHlwZSBEZWZhdWx0VG9hc3RPcHRpb25zID0gVG9hc3RPcHRpb25zPHVua25vd24+ICYge1xuICBba2V5IGluIFRvYXN0VHlwZV0/OiBUb2FzdE9wdGlvbnM8dW5rbm93bj4gJiB7IGNvbnRlbnQ/OiBDb250ZW50IH07XG59O1xuXG5leHBvcnQgdHlwZSBPYnNlcnZhYmxlTG9hZGluZzxEYXRhVHlwZT4gPSB7XG4gIGNvbnRlbnQ6IENvbnRlbnQ7XG59ICYgVG9hc3RPcHRpb25zPERhdGFUeXBlPjtcblxuZXhwb3J0IHR5cGUgT2JzZXJ2YWJsZVN1Y2Nlc3NPckVycm9yPFQsIERhdGFUeXBlPiA9IHtcbiAgY29udGVudDogVmFsdWVPckZ1bmN0aW9uPENvbnRlbnQsIFQ+O1xufSAmIFRvYXN0T3B0aW9uczxEYXRhVHlwZT47XG5cbmV4cG9ydCB0eXBlIE9ic2VydmFibGVNZXNzYWdlczxULCBEYXRhVHlwZT4gPSB7XG4gIGxvYWRpbmc/OiBDb250ZW50IHwgT2JzZXJ2YWJsZUxvYWRpbmc8RGF0YVR5cGU+O1xuICBzdWNjZXNzPzogVmFsdWVPckZ1bmN0aW9uPENvbnRlbnQsIFQ+IHwgT2JzZXJ2YWJsZVN1Y2Nlc3NPckVycm9yPFQsIERhdGFUeXBlPjtcbiAgZXJyb3I/OiBWYWx1ZU9yRnVuY3Rpb248Q29udGVudCwgYW55PiB8IE9ic2VydmFibGVTdWNjZXNzT3JFcnJvcjxhbnksIERhdGFUeXBlPjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSG90VG9hc3RTZXJ2aWNlTWV0aG9kcyB7XG4gIHNob3c8RGF0YVR5cGU+KG1lc3NhZ2U/OiBDb250ZW50LCBvcHRpb25zPzogVG9hc3RPcHRpb25zPERhdGFUeXBlPik6IENyZWF0ZUhvdFRvYXN0UmVmPERhdGFUeXBlIHwgdW5rbm93bj47XG4gIGVycm9yPERhdGFUeXBlPihtZXNzYWdlPzogQ29udGVudCwgb3B0aW9ucz86IFRvYXN0T3B0aW9uczxEYXRhVHlwZT4pOiBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZSB8IHVua25vd24+O1xuICBzdWNjZXNzPERhdGFUeXBlPihtZXNzYWdlPzogQ29udGVudCwgb3B0aW9ucz86IFRvYXN0T3B0aW9uczxEYXRhVHlwZT4pOiBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZSB8IHVua25vd24+O1xuICBsb2FkaW5nPERhdGFUeXBlPihtZXNzYWdlPzogQ29udGVudCwgb3B0aW9ucz86IFRvYXN0T3B0aW9uczxEYXRhVHlwZT4pOiBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZSB8IHVua25vd24+O1xuICB3YXJuaW5nPERhdGFUeXBlPihtZXNzYWdlPzogQ29udGVudCwgb3B0aW9ucz86IFRvYXN0T3B0aW9uczxEYXRhVHlwZT4pOiBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZSB8IHVua25vd24+O1xuICBvYnNlcnZlPFQsIERhdGFUeXBlPihtZXNzYWdlczogT2JzZXJ2YWJsZU1lc3NhZ2VzPFQsIERhdGFUeXBlPik6IChzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG4gIGNsb3NlKGlkPzogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgVXBkYXRlVG9hc3RPcHRpb25zPERhdGFUeXBlPiA9IFBhcnRpYWw8XG4gIFBpY2s8XG4gICAgVG9hc3Q8RGF0YVR5cGU+LFxuICAgICdpY29uJyB8ICdkdXJhdGlvbicgfCAnZGlzbWlzc2libGUnIHwgJ2NsYXNzTmFtZScgfCAnc3R5bGUnIHwgJ2ljb25UaGVtZScgfCAndHlwZScgfCAndGhlbWUnIHwgJ2Nsb3NlU3R5bGUnXG4gID5cbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgSG90VG9hc3RSZWZQcm9wczxEYXRhVHlwZT4ge1xuICAvKiogUmV0dXJucyBhbGwgdGhlIHRvYXN0IG9wdGlvbnMgKi9cbiAgZ2V0VG9hc3Q6ICgpID0+IFRvYXN0PERhdGFUeXBlPjtcbiAgZGlzcG9zZTogKCkgPT4gdm9pZDtcbiAgLyoqVXBkYXRlcyBvbmx5IG1lc3NhZ2UgKi9cbiAgdXBkYXRlTWVzc2FnZTogKG1lc3NhZ2U6IENvbnRlbnQpID0+IHZvaWQ7XG4gIC8qKlVwZGF0ZSB1cGRhdGFibGUgb3B0aW9ucyBvZiB0b2FzdCAqL1xuICB1cGRhdGVUb2FzdDogKG9wdGlvbnM6IFVwZGF0ZVRvYXN0T3B0aW9uczxEYXRhVHlwZT4pID0+IHZvaWQ7XG4gIC8qKiBPYnNlcnZhYmxlIGZvciBub3RpZnlpbmcgdGhlIHVzZXIgdGhhdCB0aGUgdG9hc3QgaGFzIGJlZW4gY2xvc2VkLiAqL1xuICBhZnRlckNsb3NlZDogT2JzZXJ2YWJsZTxIb3RUb2FzdENsb3NlPjtcbiAgLyoqQ2xvc2VzIHRoZSB0b2FzdCAqL1xuICBjbG9zZTogKGNsb3NlRGF0YT86IHsgZGlzbWlzc2VkQnlBY3Rpb246IGJvb2xlYW4gfSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEBzaW5jZSAyLjAuMFxuICAgKi9cbiAgcmVhZG9ubHkgZGF0YTogRGF0YVR5cGU7XG59XG5cbi8qKiBFdmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBhIHNuYWNrIGJhciBpcyBkaXNtaXNzZWQuICovXG5leHBvcnQgaW50ZXJmYWNlIEhvdFRvYXN0Q2xvc2Uge1xuICAvKiogV2hldGhlciB0aGUgc25hY2sgYmFyIHdhcyBkaXNtaXNzZWQgdXNpbmcgdGhlIGFjdGlvbiBidXR0b24uICovXG4gIGRpc21pc3NlZEJ5QWN0aW9uOiBib29sZWFuO1xuICBpZDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVG9hc3RQZXJzaXN0Q29uZmlnIHtcbiAgLyoqXG4gICAqSW4gd2hpY2ggc3RvcmFnZSBpZCB2cy4gY291bnRzIHNob3VsZCBiZSBzdG9yZWRcbiAgICpcbiAgICogQHR5cGUgeygnbG9jYWwnIHwgJ3Nlc3Npb24nKX1cbiAgICogQG1lbWJlcm9mIFRvYXN0UGVyc2lzdENvbmZpZ1xuICAgKiBAZGVmYXVsdCAnbG9jYWwnXG4gICAqL1xuICBzdG9yYWdlPzogJ2xvY2FsJyB8ICdzZXNzaW9uJyA9ICdsb2NhbCc7XG5cbiAgLyoqXG4gICAqVGhlIGtleSBwYXR0ZXJuIHRvIHN0b3JlIG9iamVjdCBpbiBzdG9yYWdlLiBgJHtpZH1gIGluIHBhdHRlcm4gaXMgcmVwbGFjZWQgd2l0aCBhY3R1YWwgdG9hc3QgaWQuXG4gICAqXG4gICAqIEB0eXBlIHsoJ2xvY2FsJyB8ICdzZXNzaW9uJyl9XG4gICAqIEBtZW1iZXJvZiBUb2FzdFBlcnNpc3RDb25maWdcbiAgICogQGRlZmF1bHQgJ25nbmVhdC9ob3R0b2FzdC0ke2lkfSdcbiAgICovXG4gIGtleT86IHN0cmluZyA9ICduZ25lYXQvaG90b3Rhc3QtJHtpZH0nO1xuXG4gIC8qKlxuICAgKlRoZSBudW1iZXIgb2YgdG9hc3RzIGFsbG93ZWQgdG8gc2hvdy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFRvYXN0UGVyc2lzdENvbmZpZ1xuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBjb3VudD8gPSAxO1xuXG4gIGVuYWJsZWQgPSBmYWxzZTtcbn1cblxuZXhwb3J0IHR5cGUgQWRkVG9hc3RSZWY8RGF0YVR5cGU+ID0gUGljazxcbiAgSG90VG9hc3RSZWZQcm9wczxEYXRhVHlwZT4sXG4gICdhZnRlckNsb3NlZCcgfCAnZGlzcG9zZScgfCAndXBkYXRlTWVzc2FnZScgfCAndXBkYXRlVG9hc3QnXG4+O1xuXG5leHBvcnQgdHlwZSBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZT4gPSBPbWl0PE9taXQ8SG90VG9hc3RSZWZQcm9wczxEYXRhVHlwZT4sICdhcHBlbmRUbyc+LCAnZGlzcG9zZSc+O1xuXG5leHBvcnQgdHlwZSBEZWZhdWx0RGF0YVR5cGUgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuIl19