import { ChangeDetectionStrategy, Component, EventEmitter, Injector, Input, Output, ViewChild, } from '@angular/core';
import { isComponent, isTemplateRef } from '@ngneat/overview';
import { ENTER_ANIMATION_DURATION, EXIT_ANIMATION_DURATION } from '../../constants';
import { HotToastRef } from '../../hot-toast-ref';
import { animate } from '../../utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@ngneat/overview";
import * as i3 from "../animated-icon/animated-icon.component";
import * as i4 from "../indicator/indicator.component";
export class HotToastComponent {
    constructor(injector, renderer, ngZone) {
        this.injector = injector;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.offset = 0;
        this.height = new EventEmitter();
        this.beforeClosed = new EventEmitter();
        this.afterClosed = new EventEmitter();
        this.isManualClose = false;
        this.unlisteners = [];
    }
    get containerPositionStyle() {
        const top = this.toast.position.includes('top');
        const verticalStyle = top ? { top: 0 } : { bottom: 0 };
        const horizontalStyle = this.toast.position.includes('left')
            ? {
                left: 0,
            }
            : this.toast.position.includes('right')
                ? {
                    right: 0,
                }
                : {
                    left: 0,
                    right: 0,
                    justifyContent: 'center',
                };
        return {
            transform: `translateY(${this.offset * (top ? 1 : -1)}px)`,
            ...verticalStyle,
            ...horizontalStyle,
        };
    }
    get toastBarBaseStyles() {
        const top = this.toast.position.includes('top');
        const enterAnimation = `hotToastEnterAnimation${top ? 'Negative' : 'Positive'} ${ENTER_ANIMATION_DURATION}ms cubic-bezier(0.21, 1.02, 0.73, 1) forwards`;
        const exitAnimation = `hotToastExitAnimation${top ? 'Negative' : 'Positive'} ${EXIT_ANIMATION_DURATION}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1) ${this.toast.duration}ms`;
        const animation = this.toast.autoClose ? `${enterAnimation}, ${exitAnimation}` : enterAnimation;
        return { ...this.toast.style, animation };
    }
    get isIconString() {
        return typeof this.toast.icon === 'string';
    }
    ngOnInit() {
        if (isTemplateRef(this.toast.message)) {
            this.context = { $implicit: this.toastRef };
        }
        if (isComponent(this.toast.message)) {
            this.toastComponentInjector = Injector.create({
                providers: [
                    {
                        provide: HotToastRef,
                        useValue: this.toastRef,
                    },
                ],
                parent: this.toast.injector || this.injector,
            });
        }
    }
    ngAfterViewInit() {
        const nativeElement = this.toastBarBase.nativeElement;
        // Caretaker note: accessing `offsetHeight` triggers the whole layout update.
        // Macro tasks (like `setTimeout`) might be executed within the current rendering frame and cause a frame drop.
        requestAnimationFrame(() => {
            this.height.emit(nativeElement.offsetHeight);
        });
        // Caretaker note: `animationstart` and `animationend` events are event tasks that trigger change detection.
        // We'd want to trigger the change detection only if it's an exit animation.
        this.ngZone.runOutsideAngular(() => {
            this.unlisteners.push(
            // Caretaker note: we have to remove these event listeners at the end (even if the element is removed from DOM).
            // zone.js stores its `ZoneTask`s within the `nativeElement[Zone.__symbol__('animationstart') + 'false']` property
            // with callback that capture `this`.
            this.renderer.listen(nativeElement, 'animationstart', (event) => {
                if (this.isExitAnimation(event)) {
                    this.ngZone.run(() => this.beforeClosed.emit());
                }
            }), this.renderer.listen(nativeElement, 'animationend', (event) => {
                if (this.isExitAnimation(event)) {
                    this.ngZone.run(() => this.afterClosed.emit({ dismissedByAction: this.isManualClose, id: this.toast.id }));
                }
            }));
        });
        this.setToastAttributes();
    }
    close() {
        this.isManualClose = true;
        const top = this.toast.position.includes('top');
        const exitAnimation = `hotToastExitAnimation${top ? 'Negative' : 'Positive'} ${EXIT_ANIMATION_DURATION}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1)`;
        const nativeElement = this.toastBarBase.nativeElement;
        animate(nativeElement, exitAnimation);
    }
    ngOnDestroy() {
        this.close();
        while (this.unlisteners.length) {
            this.unlisteners.pop()();
        }
    }
    isExitAnimation(ev) {
        return ev.animationName.includes('hotToastExitAnimation');
    }
    setToastAttributes() {
        const toastAttributes = this.toast.attributes;
        for (const [key, value] of Object.entries(toastAttributes)) {
            this.renderer.setAttribute(this.toastBarBase.nativeElement, key, value);
        }
    }
}
HotToastComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: HotToastComponent, deps: [{ token: i0.Injector }, { token: i0.Renderer2 }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
HotToastComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: HotToastComponent, selector: "hot-toast", inputs: { toast: "toast", offset: "offset", defaultConfig: "defaultConfig", toastRef: "toastRef" }, outputs: { height: "height", beforeClosed: "beforeClosed", afterClosed: "afterClosed" }, viewQueries: [{ propertyName: "toastBarBase", first: true, predicate: ["hotToastBarBase"], descendants: true }], ngImport: i0, template: "<div\n  class=\"hot-toast-bar-base-container\"\n  [ngStyle]=\"containerPositionStyle\"\n  [ngClass]=\"'hot-toast-theme-' + toast.theme\"\n>\n  <div\n    class=\"hot-toast-bar-base\"\n    #hotToastBarBase\n    [ngStyle]=\"toastBarBaseStyles\"\n    [ngClass]=\"toast.className\"\n    [style.--hot-toast-animation-state]=\"isManualClose ? 'running' : 'paused'\"\n    [attr.aria-live]=\"toast.ariaLive\"\n    [attr.role]=\"toast.role\"\n  >\n    <div class=\"hot-toast-icon\" aria-hidden=\"true\">\n      <ng-container *ngIf=\"toast.icon !== undefined; else indicator\">\n        <ng-container *ngIf=\"isIconString; else iconTemplateOrComponent\">\n          <hot-toast-animated-icon [iconTheme]=\"toast.iconTheme\">{{ toast.icon }}</hot-toast-animated-icon>\n        </ng-container>\n        <ng-template #iconTemplateOrComponent>\n          <div>\n            <ng-container [dynamicView]=\"toast.icon\"></ng-container>\n          </div>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #indicator>\n        <hot-toast-indicator [theme]=\"toast.iconTheme\" [type]=\"toast.type\"></hot-toast-indicator>\n      </ng-template>\n    </div>\n\n    <div class=\"hot-toast-message\">\n      <div>\n        <ng-container *dynamicView=\"toast.message; context: context; injector: toastComponentInjector\"></ng-container>\n      </div>\n    </div>\n\n    <button\n      *ngIf=\"toast.dismissible\"\n      (click)=\"close()\"\n      type=\"button\"\n      class=\"hot-toast-close-btn\"\n      aria-label=\"Close\"\n      [ngStyle]=\"toast.closeStyle\"\n    ></button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i2.DynamicViewDirective, selector: "[dynamicView]", inputs: ["dynamicView", "dynamicViewInjector", "dynamicViewContext"] }, { kind: "component", type: i3.AnimatedIconComponent, selector: "hot-toast-animated-icon", inputs: ["iconTheme"] }, { kind: "component", type: i4.IndicatorComponent, selector: "hot-toast-indicator", inputs: ["theme", "type"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: HotToastComponent, decorators: [{
            type: Component,
            args: [{ selector: 'hot-toast', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  class=\"hot-toast-bar-base-container\"\n  [ngStyle]=\"containerPositionStyle\"\n  [ngClass]=\"'hot-toast-theme-' + toast.theme\"\n>\n  <div\n    class=\"hot-toast-bar-base\"\n    #hotToastBarBase\n    [ngStyle]=\"toastBarBaseStyles\"\n    [ngClass]=\"toast.className\"\n    [style.--hot-toast-animation-state]=\"isManualClose ? 'running' : 'paused'\"\n    [attr.aria-live]=\"toast.ariaLive\"\n    [attr.role]=\"toast.role\"\n  >\n    <div class=\"hot-toast-icon\" aria-hidden=\"true\">\n      <ng-container *ngIf=\"toast.icon !== undefined; else indicator\">\n        <ng-container *ngIf=\"isIconString; else iconTemplateOrComponent\">\n          <hot-toast-animated-icon [iconTheme]=\"toast.iconTheme\">{{ toast.icon }}</hot-toast-animated-icon>\n        </ng-container>\n        <ng-template #iconTemplateOrComponent>\n          <div>\n            <ng-container [dynamicView]=\"toast.icon\"></ng-container>\n          </div>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #indicator>\n        <hot-toast-indicator [theme]=\"toast.iconTheme\" [type]=\"toast.type\"></hot-toast-indicator>\n      </ng-template>\n    </div>\n\n    <div class=\"hot-toast-message\">\n      <div>\n        <ng-container *dynamicView=\"toast.message; context: context; injector: toastComponentInjector\"></ng-container>\n      </div>\n    </div>\n\n    <button\n      *ngIf=\"toast.dismissible\"\n      (click)=\"close()\"\n      type=\"button\"\n      class=\"hot-toast-close-btn\"\n      aria-label=\"Close\"\n      [ngStyle]=\"toast.closeStyle\"\n    ></button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.Renderer2 }, { type: i0.NgZone }]; }, propDecorators: { toast: [{
                type: Input
            }], offset: [{
                type: Input
            }], defaultConfig: [{
                type: Input
            }], toastRef: [{
                type: Input
            }], height: [{
                type: Output
            }], beforeClosed: [{
                type: Output
            }], afterClosed: [{
                type: Output
            }], toastBarBase: [{
                type: ViewChild,
                args: ['hotToastBarBase']
            }] } });
//# sourceMappingURL=data:application/json;base64,