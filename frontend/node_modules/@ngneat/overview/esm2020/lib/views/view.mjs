import { Injectable, } from '@angular/core';
import { isComponent, isString, isTemplateRef } from './types';
import { TplRef } from './template-ref';
import { StringRef } from './string-ref';
import { CompRef } from './comp-ref';
import * as i0 from "@angular/core";
export class ViewService {
    constructor(resolver, injector, appRef) {
        this.resolver = resolver;
        this.injector = injector;
        this.appRef = appRef;
    }
    createComponent(component, options = {}) {
        return new CompRef({
            component,
            vcr: options.vcr,
            injector: options.injector || this.injector,
            appRef: this.appRef,
            resolver: this.resolver,
        });
    }
    createTemplate(tpl, options = {}) {
        return new TplRef({
            vcr: options.vcr,
            appRef: this.appRef,
            tpl,
            context: options.context,
        });
    }
    createView(content, viewOptions = {}) {
        if (isTemplateRef(content)) {
            return this.createTemplate(content, viewOptions);
        }
        else if (isComponent(content)) {
            return this.createComponent(content, viewOptions);
        }
        else if (isString(content)) {
            return new StringRef(content);
        }
        else {
            throw 'Type of content is not supported';
        }
    }
}
ViewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: ViewService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable });
ViewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: ViewService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: ViewService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3ZpZXdzL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLFVBQVUsR0FLWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQVcsV0FBVyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQVcsTUFBTSxTQUFTLENBQUM7QUFDakYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQzs7QUFpQnJDLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQW9CLFFBQWtDLEVBQVUsUUFBa0IsRUFBVSxNQUFzQjtRQUE5RixhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUFHLENBQUM7SUFFdEgsZUFBZSxDQUFJLFNBQWtCLEVBQUUsVUFBMkIsRUFBRTtRQUNsRSxPQUFPLElBQUksT0FBTyxDQUFJO1lBQ3BCLFNBQVM7WUFDVCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7WUFDaEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVE7WUFDM0MsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsY0FBYyxDQUFJLEdBQW1CLEVBQUUsVUFBK0IsRUFBRTtRQUN0RSxPQUFPLElBQUksTUFBTSxDQUFDO1lBQ2hCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsR0FBRztZQUNILE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQWdCLEVBQUUsY0FBb0UsRUFBRTtRQUNqRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ2xEO2FBQU0sSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztTQUNuRDthQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLE1BQU0sa0NBQWtDLENBQUM7U0FDMUM7SUFDSCxDQUFDOzt3R0FoQ1UsV0FBVzs0R0FBWCxXQUFXLGNBREUsTUFBTTsyRkFDbkIsV0FBVztrQkFEdkIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZixcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBJbmplY3RhYmxlLFxuICBJbmplY3RvcixcbiAgVGVtcGxhdGVSZWYsXG4gIFR5cGUsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGVudCwgaXNDb21wb25lbnQsIGlzU3RyaW5nLCBpc1RlbXBsYXRlUmVmLCBWaWV3UmVmIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBUcGxSZWYgfSBmcm9tICcuL3RlbXBsYXRlLXJlZic7XG5pbXBvcnQgeyBTdHJpbmdSZWYgfSBmcm9tICcuL3N0cmluZy1yZWYnO1xuaW1wb3J0IHsgQ29tcFJlZiB9IGZyb20gJy4vY29tcC1yZWYnO1xuXG5pbnRlcmZhY2UgX1ZpZXdPcHRpb25zIHtcbiAgdmNyPzogVmlld0NvbnRhaW5lclJlZiB8IHVuZGVmaW5lZDtcbn1cblxuaW50ZXJmYWNlIENvbXBWaWV3T3B0aW9ucyBleHRlbmRzIF9WaWV3T3B0aW9ucyB7XG4gIGluamVjdG9yPzogSW5qZWN0b3IgfCB1bmRlZmluZWQ7XG59XG5cbmludGVyZmFjZSBUZW1wbGF0ZVZpZXdPcHRpb25zIGV4dGVuZHMgX1ZpZXdPcHRpb25zIHtcbiAgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB0eXBlIFZpZXdPcHRpb25zID0gX1ZpZXdPcHRpb25zICYgQ29tcFZpZXdPcHRpb25zICYgVGVtcGxhdGVWaWV3T3B0aW9ucztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBWaWV3U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZikge31cblxuICBjcmVhdGVDb21wb25lbnQ8Qz4oY29tcG9uZW50OiBUeXBlPEM+LCBvcHRpb25zOiBDb21wVmlld09wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgQ29tcFJlZjxDPih7XG4gICAgICBjb21wb25lbnQsXG4gICAgICB2Y3I6IG9wdGlvbnMudmNyLFxuICAgICAgaW5qZWN0b3I6IG9wdGlvbnMuaW5qZWN0b3IgfHwgdGhpcy5pbmplY3RvcixcbiAgICAgIGFwcFJlZjogdGhpcy5hcHBSZWYsXG4gICAgICByZXNvbHZlcjogdGhpcy5yZXNvbHZlcixcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZVRlbXBsYXRlPEM+KHRwbDogVGVtcGxhdGVSZWY8Qz4sIG9wdGlvbnM6IFRlbXBsYXRlVmlld09wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgVHBsUmVmKHtcbiAgICAgIHZjcjogb3B0aW9ucy52Y3IsXG4gICAgICBhcHBSZWY6IHRoaXMuYXBwUmVmLFxuICAgICAgdHBsLFxuICAgICAgY29udGV4dDogb3B0aW9ucy5jb250ZXh0LFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlVmlldyhjb250ZW50OiBDb250ZW50LCB2aWV3T3B0aW9uczogX1ZpZXdPcHRpb25zICYgQ29tcFZpZXdPcHRpb25zICYgVGVtcGxhdGVWaWV3T3B0aW9ucyA9IHt9KTogVmlld1JlZiB7XG4gICAgaWYgKGlzVGVtcGxhdGVSZWYoY29udGVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRlbXBsYXRlKGNvbnRlbnQsIHZpZXdPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb21wb25lbnQoY29udGVudCwgdmlld09wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoY29udGVudCkpIHtcbiAgICAgIHJldHVybiBuZXcgU3RyaW5nUmVmKGNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAnVHlwZSBvZiBjb250ZW50IGlzIG5vdCBzdXBwb3J0ZWQnO1xuICAgIH1cbiAgfVxufVxuIl19