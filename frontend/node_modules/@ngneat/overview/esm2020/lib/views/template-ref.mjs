export class TplRef {
    constructor(args) {
        this.args = args;
        this.wrapper = null;
        if (this.args.vcr) {
            this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});
            this.viewRef.detectChanges();
        }
        else {
            this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});
            this.viewRef.detectChanges();
            this.args.appRef.attachView(this.viewRef);
        }
    }
    detectChanges() {
        this.viewRef.detectChanges();
    }
    getElement() {
        const rootNodes = this.viewRef.rootNodes;
        if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {
            this.element = rootNodes[0];
        }
        else {
            this.element = document.createElement('div');
            this.element.append(...rootNodes);
        }
        return this.element;
    }
    destroy() {
        if (this.viewRef.rootNodes[0] !== 1) {
            this.element?.parentNode.removeChild(this.element);
            this.element = null;
        }
        if (!this.args.vcr) {
            this.args.appRef.detachView(this.viewRef);
        }
        this.viewRef.destroy();
        this.viewRef = null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L292ZXJ2aWV3L3NyYy9saWIvdmlld3MvdGVtcGxhdGUtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCQSxNQUFNLE9BQU8sTUFBTTtJQUtqQixZQUFvQixJQUFhO1FBQWIsU0FBSSxHQUFKLElBQUksQ0FBUztRQUZ6QixZQUFPLEdBQW1CLElBQUksQ0FBQztRQUdyQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7WUFDeEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSyxFQUFRLENBQUMsQ0FBQztZQUNoRixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELFVBQVU7UUFDUixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN6QyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2hFLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztTQUNuQztRQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDckI7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXBwbGljYXRpb25SZWYsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgRW1iZWRkZWRWaWV3UmVmLFxuICBJbmplY3RvcixcbiAgVGVtcGxhdGVSZWYsXG4gIFR5cGUsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld1JlZiB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgQXJnczxDPiB7XG4gIHRwbDogVGVtcGxhdGVSZWY8Qz47XG4gIGNvbnRleHQ6IEM7XG4gIHZjcjogVmlld0NvbnRhaW5lclJlZiB8IHVuZGVmaW5lZDtcbiAgYXBwUmVmOiBBcHBsaWNhdGlvblJlZiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIFRwbFJlZjxDPiBpbXBsZW1lbnRzIFZpZXdSZWYge1xuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjx7fT47XG4gIHByaXZhdGUgZWxlbWVudDogRWxlbWVudDtcbiAgcHJpdmF0ZSB3cmFwcGVyOiBFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcmdzOiBBcmdzPEM+KSB7XG4gICAgaWYgKHRoaXMuYXJncy52Y3IpIHtcbiAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMuYXJncy52Y3IuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuYXJncy50cGwsIHRoaXMuYXJncy5jb250ZXh0IHx8IHt9KTtcbiAgICAgIHRoaXMudmlld1JlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMuYXJncy50cGwuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuYXJncy5jb250ZXh0IHx8ICh7fSBhcyBDKSk7XG4gICAgICB0aGlzLnZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgdGhpcy5hcmdzLmFwcFJlZi5hdHRhY2hWaWV3KHRoaXMudmlld1JlZik7XG4gICAgfVxuICB9XG5cbiAgZGV0ZWN0Q2hhbmdlcygpIHtcbiAgICB0aGlzLnZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgZ2V0RWxlbWVudCgpOiBFbGVtZW50IHtcbiAgICBjb25zdCByb290Tm9kZXMgPSB0aGlzLnZpZXdSZWYucm9vdE5vZGVzO1xuICAgIGlmIChyb290Tm9kZXMubGVuZ3RoID09PSAxICYmIHJvb3ROb2Rlc1swXSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IHJvb3ROb2Rlc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKC4uLnJvb3ROb2Rlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMudmlld1JlZi5yb290Tm9kZXNbMF0gIT09IDEpIHtcbiAgICAgIHRoaXMuZWxlbWVudD8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuYXJncy52Y3IpIHtcbiAgICAgIHRoaXMuYXJncy5hcHBSZWYuZGV0YWNoVmlldyh0aGlzLnZpZXdSZWYpO1xuICAgIH1cblxuICAgIHRoaXMudmlld1JlZi5kZXN0cm95KCk7XG4gICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgfVxufVxuIl19