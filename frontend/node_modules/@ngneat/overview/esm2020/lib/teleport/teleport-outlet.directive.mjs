import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./teleport.service";
export class TeleportOutletDirective {
    constructor(vcr, service) {
        this.vcr = vcr;
        this.service = service;
    }
    ngOnChanges(changes) {
        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used
        // as keys for the `ports` map.
        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {
            this.service.ports.set(this.teleportOutlet, this.vcr);
            this.service.newOutlet(this.teleportOutlet);
        }
    }
    ngOnDestroy() {
        this.service.ports.delete(this.teleportOutlet);
    }
}
TeleportOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: i1.TeleportService }], target: i0.ɵɵFactoryTarget.Directive });
TeleportOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.1", type: TeleportOutletDirective, selector: "[teleportOutlet]", inputs: { teleportOutlet: "teleportOutlet" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[teleportOutlet]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1.TeleportService }]; }, propDecorators: { teleportOutlet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQtb3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3RlbGVwb3J0L3RlbGVwb3J0LW91dGxldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXlELE1BQU0sZUFBZSxDQUFDOzs7QUFNeEcsTUFBTSxPQUFPLHVCQUF1QjtJQUlsQyxZQUFvQixHQUFxQixFQUFVLE9BQXdCO1FBQXZELFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7SUFBRyxDQUFDO0lBRS9FLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQywrRkFBK0Y7UUFDL0YsK0JBQStCO1FBQy9CLElBQUksT0FBTyxDQUFDLGNBQWMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssUUFBUSxFQUFFO1lBQ3JFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7b0hBakJVLHVCQUF1Qjt3R0FBdkIsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBSG5DLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDN0I7cUlBR1UsY0FBYztzQkFBdEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZWxlcG9ydFNlcnZpY2UgfSBmcm9tICcuL3RlbGVwb3J0LnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdGVsZXBvcnRPdXRsZXRdJyxcbn0pXG5leHBvcnQgY2xhc3MgVGVsZXBvcnRPdXRsZXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIC8vIFdlIGNvdWxkJ3ZlIGFsc28gdXNlZCB0aGUgYG5nQWNjZXB0SW5wdXRUeXBlYCwgYnV0IGl0J3MgYmVpbmcgZGVwcmVjYXRlZCBpbiBuZXdlciBBbmd1bGFyIHZlcnNpb25zLlxuICBASW5wdXQoKSB0ZWxlcG9ydE91dGxldDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSBzZXJ2aWNlOiBUZWxlcG9ydFNlcnZpY2UpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIC8vIFRoZSBgdGVsZXBvcnRPdXRsZXRgIG1pZ2h0IGJlIGBudWxsfHVuZGVmaW5lZGAsIGJ1dCB3ZSBkb24ndCB3YW50IG51bGxhYmxlIHZhbHVlcyB0byBiZSB1c2VkXG4gICAgLy8gYXMga2V5cyBmb3IgdGhlIGBwb3J0c2AgbWFwLlxuICAgIGlmIChjaGFuZ2VzLnRlbGVwb3J0T3V0bGV0ICYmIHR5cGVvZiB0aGlzLnRlbGVwb3J0T3V0bGV0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5zZXJ2aWNlLnBvcnRzLnNldCh0aGlzLnRlbGVwb3J0T3V0bGV0LCB0aGlzLnZjcik7XG4gICAgICB0aGlzLnNlcnZpY2UubmV3T3V0bGV0KHRoaXMudGVsZXBvcnRPdXRsZXQpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc2VydmljZS5wb3J0cy5kZWxldGUodGhpcy50ZWxlcG9ydE91dGxldCk7XG4gIH1cbn1cbiJdfQ==