import { Directive, Input, NgModule, } from '@angular/core';
import { TeleportOutletDirective } from './teleport-outlet.directive';
import * as i0 from "@angular/core";
import * as i1 from "./teleport.service";
export class TeleportDirective {
    constructor(tpl, service) {
        this.tpl = tpl;
        this.service = service;
        this.subscription = null;
    }
    ngOnChanges(changes) {
        if (changes.teleportTo && typeof this.teleportTo === 'string') {
            this.dispose();
            this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {
                if (outlet) {
                    this.viewRef = outlet.createEmbeddedView(this.tpl);
                }
            });
        }
    }
    ngOnDestroy() {
        this.dispose();
    }
    dispose() {
        this.subscription?.unsubscribe();
        this.subscription = null;
        this.viewRef?.destroy();
    }
}
TeleportDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportDirective, deps: [{ token: i0.TemplateRef }, { token: i1.TeleportService }], target: i0.ɵɵFactoryTarget.Directive });
TeleportDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.1", type: TeleportDirective, selector: "[teleportTo]", inputs: { teleportTo: "teleportTo" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[teleportTo]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i1.TeleportService }]; }, propDecorators: { teleportTo: [{
                type: Input
            }] } });
export class TeleportModule {
}
TeleportModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TeleportModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule, declarations: [TeleportDirective, TeleportOutletDirective], exports: [TeleportDirective, TeleportOutletDirective] });
TeleportModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TeleportDirective, TeleportOutletDirective],
                    exports: [TeleportDirective, TeleportOutletDirective],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L292ZXJ2aWV3L3NyYy9saWIvdGVsZXBvcnQvdGVsZXBvcnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsR0FLVCxNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBS3RFLE1BQU0sT0FBTyxpQkFBaUI7SUFNNUIsWUFBb0IsR0FBcUIsRUFBVSxPQUF3QjtRQUF2RCxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBRm5FLGlCQUFZLEdBQXdCLElBQUksQ0FBQztJQUU2QixDQUFDO0lBRS9FLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRTtZQUM3RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFZixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDN0UsSUFBSSxNQUFNLEVBQUU7b0JBQ1YsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNwRDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU8sT0FBTztRQUNiLElBQUksQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs4R0E1QlUsaUJBQWlCO2tHQUFqQixpQkFBaUI7MkZBQWpCLGlCQUFpQjtrQkFIN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztpQkFDekI7Z0lBRVUsVUFBVTtzQkFBbEIsS0FBSzs7QUFrQ1IsTUFBTSxPQUFPLGNBQWM7OzJHQUFkLGNBQWM7NEdBQWQsY0FBYyxpQkFuQ2QsaUJBQWlCLEVBZ0NNLHVCQUF1QixhQWhDOUMsaUJBQWlCLEVBaUNDLHVCQUF1Qjs0R0FFekMsY0FBYzsyRkFBZCxjQUFjO2tCQUoxQixRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLGlCQUFpQixFQUFFLHVCQUF1QixDQUFDO29CQUMxRCxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSx1QkFBdUIsQ0FBQztpQkFDdEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFRlbGVwb3J0U2VydmljZSB9IGZyb20gJy4vdGVsZXBvcnQuc2VydmljZSc7XG5pbXBvcnQgeyBUZWxlcG9ydE91dGxldERpcmVjdGl2ZSB9IGZyb20gJy4vdGVsZXBvcnQtb3V0bGV0LmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t0ZWxlcG9ydFRvXScsXG59KVxuZXhwb3J0IGNsYXNzIFRlbGVwb3J0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSB0ZWxlcG9ydFRvOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPGFueT47XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRwbDogVGVtcGxhdGVSZWY8YW55PiwgcHJpdmF0ZSBzZXJ2aWNlOiBUZWxlcG9ydFNlcnZpY2UpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnRlbGVwb3J0VG8gJiYgdHlwZW9mIHRoaXMudGVsZXBvcnRUbyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZGlzcG9zZSgpO1xuXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZS5vdXRsZXQkKHRoaXMudGVsZXBvcnRUbykuc3Vic2NyaWJlKChvdXRsZXQpID0+IHtcbiAgICAgICAgaWYgKG91dGxldCkge1xuICAgICAgICAgIHRoaXMudmlld1JlZiA9IG91dGxldC5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50cGwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbVGVsZXBvcnREaXJlY3RpdmUsIFRlbGVwb3J0T3V0bGV0RGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW1RlbGVwb3J0RGlyZWN0aXZlLCBUZWxlcG9ydE91dGxldERpcmVjdGl2ZV0sXG59KVxuZXhwb3J0IGNsYXNzIFRlbGVwb3J0TW9kdWxlIHt9XG4iXX0=