import { Directive, Input, NgModule, } from '@angular/core';
import { isString } from '../views/types';
import { DynamicViewComponent } from './dynamic-view.component';
import * as i0 from "@angular/core";
import * as i1 from "../views/view";
export class DynamicViewDirective {
    constructor(defaultTpl, vcr, viewService) {
        this.defaultTpl = defaultTpl;
        this.vcr = vcr;
        this.viewService = viewService;
    }
    ngOnInit() {
        this.resolveContentType();
    }
    ngOnChanges(changes) {
        if (changes.view && !changes.view.isFirstChange()) {
            this.resolveContentType();
        }
    }
    resolveContentType() {
        this.viewRef?.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        this.viewRef?.destroy();
    }
}
DynamicViewDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.ViewService }], target: i0.ɵɵFactoryTarget.Directive });
DynamicViewDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.1", type: DynamicViewDirective, selector: "[dynamicView]", inputs: { view: ["dynamicView", "view"], injector: ["dynamicViewInjector", "injector"], context: ["dynamicViewContext", "context"] }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dynamicView]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.ViewService }]; }, propDecorators: { view: [{
                type: Input,
                args: ['dynamicView']
            }], injector: [{
                type: Input,
                args: ['dynamicViewInjector']
            }], context: [{
                type: Input,
                args: ['dynamicViewContext']
            }] } });
export class DynamicViewModule {
}
DynamicViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DynamicViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule, declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] });
DynamicViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DynamicViewDirective, DynamicViewComponent],
                    exports: [DynamicViewDirective],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy12aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL2R5bmFtaWMtdmlldy9keW5hbWljLXZpZXcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsR0FPVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQW9CLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFLaEUsTUFBTSxPQUFPLG9CQUFvQjtJQU8vQixZQUFvQixVQUE0QixFQUFVLEdBQXFCLEVBQVUsV0FBd0I7UUFBN0YsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQUcsQ0FBQztJQUVySCxRQUFRO1FBQ04sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFO1lBQ2pELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLG9CQUFvQixFQUFFO2dCQUNwRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2FBQ3hCLENBQUMsQ0FBQztZQUNGLElBQUksQ0FBQyxPQUF5QyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ2hHO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDdkUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNiLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUTtnQkFDNUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzFCLENBQUM7O2lIQXRDVSxvQkFBb0I7cUdBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQUhoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjsySkFFdUIsSUFBSTtzQkFBekIsS0FBSzt1QkFBQyxhQUFhO2dCQUNVLFFBQVE7c0JBQXJDLEtBQUs7dUJBQUMscUJBQXFCO2dCQUNDLE9BQU87c0JBQW5DLEtBQUs7dUJBQUMsb0JBQW9COztBQTBDN0IsTUFBTSxPQUFPLGlCQUFpQjs7OEdBQWpCLGlCQUFpQjsrR0FBakIsaUJBQWlCLGlCQTdDakIsb0JBQW9CLEVBMENNLG9CQUFvQixhQTFDOUMsb0JBQW9COytHQTZDcEIsaUJBQWlCOzJGQUFqQixpQkFBaUI7a0JBSjdCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLENBQUM7b0JBQzFELE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDO2lCQUNoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGVudCwgVmlld1JlZiwgaXNTdHJpbmcgfSBmcm9tICcuLi92aWV3cy90eXBlcyc7XG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4uL3ZpZXdzL3ZpZXcnO1xuaW1wb3J0IHsgQ29tcFJlZiB9IGZyb20gJy4uL3ZpZXdzL2NvbXAtcmVmJztcbmltcG9ydCB7IER5bmFtaWNWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9keW5hbWljLXZpZXcuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2R5bmFtaWNWaWV3XScsXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNWaWV3RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXcnKSB2aWV3OiBDb250ZW50O1xuICBASW5wdXQoJ2R5bmFtaWNWaWV3SW5qZWN0b3InKSBpbmplY3RvcjogSW5qZWN0b3I7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXdDb250ZXh0JykgY29udGV4dDogYW55O1xuXG4gIHByaXZhdGUgdmlld1JlZjogVmlld1JlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRlZmF1bHRUcGw6IFRlbXBsYXRlUmVmPGFueT4sIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIHZpZXdTZXJ2aWNlOiBWaWV3U2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnJlc29sdmVDb250ZW50VHlwZSgpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnZpZXcgJiYgIWNoYW5nZXMudmlldy5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgIHRoaXMucmVzb2x2ZUNvbnRlbnRUeXBlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x2ZUNvbnRlbnRUeXBlKCkge1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICAgIGlmIChpc1N0cmluZyh0aGlzLnZpZXcpKSB7XG4gICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdTZXJ2aWNlLmNyZWF0ZUNvbXBvbmVudChEeW5hbWljVmlld0NvbXBvbmVudCwge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvcixcbiAgICAgIH0pO1xuICAgICAgKHRoaXMudmlld1JlZiBhcyBDb21wUmVmPER5bmFtaWNWaWV3Q29tcG9uZW50Pikuc2V0SW5wdXQoJ2NvbnRlbnQnLCB0aGlzLnZpZXcpLmRldGVjdENoYW5nZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy52aWV3U2VydmljZS5jcmVhdGVWaWV3KHRoaXMudmlldyB8fCB0aGlzLmRlZmF1bHRUcGwsIHtcbiAgICAgICAgdmNyOiB0aGlzLnZjcixcbiAgICAgICAgaW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IgPz8gdGhpcy52Y3IuaW5qZWN0b3IsXG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0R5bmFtaWNWaWV3RGlyZWN0aXZlLCBEeW5hbWljVmlld0NvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtEeW5hbWljVmlld0RpcmVjdGl2ZV0sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNWaWV3TW9kdWxlIHt9XG4iXX0=