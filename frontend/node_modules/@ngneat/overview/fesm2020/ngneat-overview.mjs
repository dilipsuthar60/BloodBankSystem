import * as i0 from '@angular/core';
import { Injectable, Directive, Input, NgModule, TemplateRef, Component } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, map } from 'rxjs/operators';

class TeleportService {
    constructor() {
        this.outlets = new BehaviorSubject('');
        this.asObservable = this.outlets.asObservable();
        this.ports = new Map();
    }
    outlet$(name) {
        return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));
    }
    newOutlet(name) {
        this.outlets.next(name);
    }
}
TeleportService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TeleportService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class TeleportOutletDirective {
    constructor(vcr, service) {
        this.vcr = vcr;
        this.service = service;
    }
    ngOnChanges(changes) {
        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used
        // as keys for the `ports` map.
        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {
            this.service.ports.set(this.teleportOutlet, this.vcr);
            this.service.newOutlet(this.teleportOutlet);
        }
    }
    ngOnDestroy() {
        this.service.ports.delete(this.teleportOutlet);
    }
}
TeleportOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });
TeleportOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.1", type: TeleportOutletDirective, selector: "[teleportOutlet]", inputs: { teleportOutlet: "teleportOutlet" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[teleportOutlet]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: TeleportService }]; }, propDecorators: { teleportOutlet: [{
                type: Input
            }] } });

class TeleportDirective {
    constructor(tpl, service) {
        this.tpl = tpl;
        this.service = service;
        this.subscription = null;
    }
    ngOnChanges(changes) {
        if (changes.teleportTo && typeof this.teleportTo === 'string') {
            this.dispose();
            this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {
                if (outlet) {
                    this.viewRef = outlet.createEmbeddedView(this.tpl);
                }
            });
        }
    }
    ngOnDestroy() {
        this.dispose();
    }
    dispose() {
        this.subscription?.unsubscribe();
        this.subscription = null;
        this.viewRef?.destroy();
    }
}
TeleportDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportDirective, deps: [{ token: i0.TemplateRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });
TeleportDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.1", type: TeleportDirective, selector: "[teleportTo]", inputs: { teleportTo: "teleportTo" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[teleportTo]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: TeleportService }]; }, propDecorators: { teleportTo: [{
                type: Input
            }] } });
class TeleportModule {
}
TeleportModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TeleportModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule, declarations: [TeleportDirective, TeleportOutletDirective], exports: [TeleportDirective, TeleportOutletDirective] });
TeleportModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: TeleportModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TeleportDirective, TeleportOutletDirective],
                    exports: [TeleportDirective, TeleportOutletDirective],
                }]
        }] });

function isTemplateRef(value) {
    return value instanceof TemplateRef;
}
function isComponent(value) {
    return typeof value === 'function';
}
function isString(value) {
    return typeof value === 'string';
}

class DynamicViewComponent {
}
DynamicViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DynamicViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.1", type: DynamicViewComponent, selector: "dynamic-view", inputs: { content: "content" }, ngImport: i0, template: ` <div [innerHTML]="content"></div> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'dynamic-view',
                    template: ` <div [innerHTML]="content"></div> `,
                }]
        }], propDecorators: { content: [{
                type: Input
            }] } });

class TplRef {
    constructor(args) {
        this.args = args;
        this.wrapper = null;
        if (this.args.vcr) {
            this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});
            this.viewRef.detectChanges();
        }
        else {
            this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});
            this.viewRef.detectChanges();
            this.args.appRef.attachView(this.viewRef);
        }
    }
    detectChanges() {
        this.viewRef.detectChanges();
    }
    getElement() {
        const rootNodes = this.viewRef.rootNodes;
        if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {
            this.element = rootNodes[0];
        }
        else {
            this.element = document.createElement('div');
            this.element.append(...rootNodes);
        }
        return this.element;
    }
    destroy() {
        if (this.viewRef.rootNodes[0] !== 1) {
            this.element?.parentNode.removeChild(this.element);
            this.element = null;
        }
        if (!this.args.vcr) {
            this.args.appRef.detachView(this.viewRef);
        }
        this.viewRef.destroy();
        this.viewRef = null;
    }
}

class StringRef {
    constructor(value) {
        this.value = value;
    }
    getElement() {
        return this.value;
    }
    detectChanges() { }
    destroy() { }
}

class CompRef {
    constructor(options) {
        this.options = options;
        if (options.vcr) {
            this.compRef = options.vcr.createComponent(options.component, {
                index: options.vcr.length,
                injector: options.injector || options.vcr.injector,
            });
        }
        else {
            const factory = options.resolver.resolveComponentFactory(options.component);
            this.compRef = factory.create(options.injector);
            options.appRef.attachView(this.compRef.hostView);
        }
    }
    get ref() {
        return this.compRef;
    }
    setInput(input, value) {
        this.compRef.instance[input] = value;
        return this;
    }
    setInputs(inputs) {
        Object.keys(inputs).forEach((input) => {
            this.compRef.instance[input] = inputs[input];
        });
        return this;
    }
    detectChanges() {
        this.compRef.hostView.detectChanges();
        return this;
    }
    appendTo(container) {
        container.appendChild(this.getElement());
        return this;
    }
    removeFrom(container) {
        container.removeChild(this.getElement());
        return this;
    }
    getRawContent() {
        return this.getElement().outerHTML;
    }
    getElement() {
        return this.compRef.location.nativeElement;
    }
    destroy() {
        this.compRef.destroy();
        !this.options.vcr && this.options.appRef.detachView(this.compRef.hostView);
        this.compRef = null;
    }
}

class ViewService {
    constructor(resolver, injector, appRef) {
        this.resolver = resolver;
        this.injector = injector;
        this.appRef = appRef;
    }
    createComponent(component, options = {}) {
        return new CompRef({
            component,
            vcr: options.vcr,
            injector: options.injector || this.injector,
            appRef: this.appRef,
            resolver: this.resolver,
        });
    }
    createTemplate(tpl, options = {}) {
        return new TplRef({
            vcr: options.vcr,
            appRef: this.appRef,
            tpl,
            context: options.context,
        });
    }
    createView(content, viewOptions = {}) {
        if (isTemplateRef(content)) {
            return this.createTemplate(content, viewOptions);
        }
        else if (isComponent(content)) {
            return this.createComponent(content, viewOptions);
        }
        else if (isString(content)) {
            return new StringRef(content);
        }
        else {
            throw 'Type of content is not supported';
        }
    }
}
ViewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: ViewService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable });
ViewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: ViewService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: ViewService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; } });

class DynamicViewDirective {
    constructor(defaultTpl, vcr, viewService) {
        this.defaultTpl = defaultTpl;
        this.vcr = vcr;
        this.viewService = viewService;
    }
    ngOnInit() {
        this.resolveContentType();
    }
    ngOnChanges(changes) {
        if (changes.view && !changes.view.isFirstChange()) {
            this.resolveContentType();
        }
    }
    resolveContentType() {
        this.viewRef?.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        this.viewRef?.destroy();
    }
}
DynamicViewDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: ViewService }], target: i0.ɵɵFactoryTarget.Directive });
DynamicViewDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.1", type: DynamicViewDirective, selector: "[dynamicView]", inputs: { view: ["dynamicView", "view"], injector: ["dynamicViewInjector", "injector"], context: ["dynamicViewContext", "context"] }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dynamicView]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: ViewService }]; }, propDecorators: { view: [{
                type: Input,
                args: ['dynamicView']
            }], injector: [{
                type: Input,
                args: ['dynamicViewInjector']
            }], context: [{
                type: Input,
                args: ['dynamicViewContext']
            }] } });
class DynamicViewModule {
}
DynamicViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DynamicViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule, declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] });
DynamicViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.1", ngImport: i0, type: DynamicViewModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DynamicViewDirective, DynamicViewComponent],
                    exports: [DynamicViewDirective],
                }]
        }] });

/*
 * Public API Surface of overview
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, isComponent, isString, isTemplateRef };
//# sourceMappingURL=ngneat-overview.mjs.map
