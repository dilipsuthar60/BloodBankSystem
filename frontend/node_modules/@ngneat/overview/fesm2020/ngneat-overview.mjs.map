{"version":3,"file":"ngneat-overview.mjs","sources":["../../../../projects/ngneat/overview/src/lib/teleport/teleport.service.ts","../../../../projects/ngneat/overview/src/lib/teleport/teleport-outlet.directive.ts","../../../../projects/ngneat/overview/src/lib/teleport/teleport.module.ts","../../../../projects/ngneat/overview/src/lib/views/types.ts","../../../../projects/ngneat/overview/src/lib/dynamic-view/dynamic-view.component.ts","../../../../projects/ngneat/overview/src/lib/views/template-ref.ts","../../../../projects/ngneat/overview/src/lib/views/string-ref.ts","../../../../projects/ngneat/overview/src/lib/views/comp-ref.ts","../../../../projects/ngneat/overview/src/lib/views/view.ts","../../../../projects/ngneat/overview/src/lib/dynamic-view/dynamic-view.directive.ts","../../../../projects/ngneat/overview/src/public-api.ts","../../../../projects/ngneat/overview/src/ngneat-overview.ts"],"sourcesContent":["import { Injectable, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeleportService {\n  private outlets = new BehaviorSubject<string>('');\n  private asObservable = this.outlets.asObservable();\n\n  outlet$(name: string) {\n    return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n  }\n\n  ports = new Map<string, ViewContainerRef>();\n\n  newOutlet(name: string) {\n    this.outlets.next(name);\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { TeleportService } from './teleport.service';\n\n@Directive({\n  selector: '[teleportOutlet]',\n})\nexport class TeleportOutletDirective implements OnChanges, OnDestroy {\n  // We could've also used the `ngAcceptInputType`, but it's being deprecated in newer Angular versions.\n  @Input() teleportOutlet: string | null | undefined;\n\n  constructor(private vcr: ViewContainerRef, private service: TeleportService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n    // as keys for the `ports` map.\n    if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n      this.service.ports.set(this.teleportOutlet, this.vcr);\n      this.service.newOutlet(this.teleportOutlet);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.service.ports.delete(this.teleportOutlet);\n  }\n}\n","import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { TeleportService } from './teleport.service';\nimport { TeleportOutletDirective } from './teleport-outlet.directive';\n\n@Directive({\n  selector: '[teleportTo]',\n})\nexport class TeleportDirective implements OnChanges, OnDestroy {\n  @Input() teleportTo: string | null | undefined;\n\n  private viewRef: EmbeddedViewRef<any>;\n  private subscription: Subscription | null = null;\n\n  constructor(private tpl: TemplateRef<any>, private service: TeleportService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.teleportTo && typeof this.teleportTo === 'string') {\n      this.dispose();\n\n      this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {\n        if (outlet) {\n          this.viewRef = outlet.createEmbeddedView(this.tpl);\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  private dispose(): void {\n    this.subscription?.unsubscribe();\n    this.subscription = null;\n    this.viewRef?.destroy();\n  }\n}\n\n@NgModule({\n  declarations: [TeleportDirective, TeleportOutletDirective],\n  exports: [TeleportDirective, TeleportOutletDirective],\n})\nexport class TeleportModule {}\n","import { TemplateRef, Type } from '@angular/core';\n\nexport interface ViewRef {\n  getElement(): Element | string;\n\n  detectChanges(): void;\n\n  destroy(): void;\n}\n\ntype ExcludeFunctionPropertyNames<T> = {\n  [Key in keyof T]: T[Key] extends Function ? never : Key;\n}[keyof T];\n\nexport type ExcludeFunctions<T> = Pick<T, ExcludeFunctionPropertyNames<T>>;\nexport type Content = string | TemplateRef<any> | Type<any>;\n\nexport function isTemplateRef(value: any): value is TemplateRef<any> {\n  return value instanceof TemplateRef;\n}\n\nexport function isComponent(value: any): value is Type<any> {\n  return typeof value === 'function';\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'dynamic-view',\n  template: ` <div [innerHTML]=\"content\"></div> `,\n})\nexport class DynamicViewComponent {\n  @Input() content: string;\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  EmbeddedViewRef,\n  Injector,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ViewRef } from './types';\n\ninterface Args<C> {\n  tpl: TemplateRef<C>;\n  context: C;\n  vcr: ViewContainerRef | undefined;\n  appRef: ApplicationRef | undefined;\n}\n\nexport class TplRef<C> implements ViewRef {\n  private viewRef: EmbeddedViewRef<{}>;\n  private element: Element;\n  private wrapper: Element | null = null;\n\n  constructor(private args: Args<C>) {\n    if (this.args.vcr) {\n      this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});\n      this.viewRef.detectChanges();\n    } else {\n      this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || ({} as C));\n      this.viewRef.detectChanges();\n      this.args.appRef.attachView(this.viewRef);\n    }\n  }\n\n  detectChanges() {\n    this.viewRef.detectChanges();\n  }\n\n  getElement(): Element {\n    const rootNodes = this.viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n      this.element = rootNodes[0];\n    } else {\n      this.element = document.createElement('div');\n      this.element.append(...rootNodes);\n    }\n\n    return this.element;\n  }\n\n  destroy() {\n    if (this.viewRef.rootNodes[0] !== 1) {\n      this.element?.parentNode.removeChild(this.element);\n      this.element = null;\n    }\n\n    if (!this.args.vcr) {\n      this.args.appRef.detachView(this.viewRef);\n    }\n\n    this.viewRef.destroy();\n    this.viewRef = null;\n  }\n}\n","import { ViewRef } from './types';\n\nexport class StringRef implements ViewRef {\n  constructor(private value: string) {}\n\n  getElement(): string {\n    return this.value;\n  }\n\n  detectChanges() {}\n\n  destroy() {}\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injector,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ExcludeFunctions, ViewRef } from './types';\n\ninterface Options<C> {\n  component: Type<C>;\n  injector: Injector;\n  resolver: ComponentFactoryResolver;\n  vcr: ViewContainerRef | undefined;\n  appRef: ApplicationRef | undefined;\n}\n\nexport class CompRef<T> implements ViewRef {\n  private compRef: ComponentRef<T>;\n\n  constructor(private options: Options<T>) {\n    if (options.vcr) {\n      this.compRef = options.vcr.createComponent(options.component, {\n        index: options.vcr.length,\n        injector: options.injector || options.vcr.injector,\n      });\n    } else {\n      const factory = options.resolver.resolveComponentFactory<T>(options.component);\n      this.compRef = factory.create(options.injector);\n      options.appRef.attachView(this.compRef.hostView);\n    }\n  }\n\n  get ref() {\n    return this.compRef;\n  }\n\n  setInput<K extends keyof ExcludeFunctions<T>>(input: K, value: T[K]) {\n    this.compRef.instance[input] = value;\n\n    return this;\n  }\n\n  setInputs(inputs: Partial<ExcludeFunctions<T>>) {\n    Object.keys(inputs).forEach((input) => {\n      this.compRef.instance[input] = inputs[input];\n    });\n\n    return this;\n  }\n\n  detectChanges() {\n    this.compRef.hostView.detectChanges();\n    return this;\n  }\n\n  appendTo(container: Element) {\n    container.appendChild(this.getElement());\n\n    return this;\n  }\n\n  removeFrom(container: Element) {\n    container.removeChild(this.getElement());\n\n    return this;\n  }\n\n  getRawContent() {\n    return this.getElement().outerHTML;\n  }\n\n  getElement<T extends Element>(): T {\n    return this.compRef.location.nativeElement;\n  }\n\n  destroy() {\n    this.compRef.destroy();\n    !this.options.vcr && this.options.appRef.detachView(this.compRef.hostView);\n    this.compRef = null;\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Injectable,\n  Injector,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Content, isComponent, isString, isTemplateRef, ViewRef } from './types';\nimport { TplRef } from './template-ref';\nimport { StringRef } from './string-ref';\nimport { CompRef } from './comp-ref';\n\ninterface _ViewOptions {\n  vcr?: ViewContainerRef | undefined;\n}\n\ninterface CompViewOptions extends _ViewOptions {\n  injector?: Injector | undefined;\n}\n\ninterface TemplateViewOptions extends _ViewOptions {\n  context?: Record<string, any> | undefined;\n}\n\nexport type ViewOptions = _ViewOptions & CompViewOptions & TemplateViewOptions;\n\n@Injectable({ providedIn: 'root' })\nexport class ViewService {\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector, private appRef: ApplicationRef) {}\n\n  createComponent<C>(component: Type<C>, options: CompViewOptions = {}) {\n    return new CompRef<C>({\n      component,\n      vcr: options.vcr,\n      injector: options.injector || this.injector,\n      appRef: this.appRef,\n      resolver: this.resolver,\n    });\n  }\n\n  createTemplate<C>(tpl: TemplateRef<C>, options: TemplateViewOptions = {}) {\n    return new TplRef({\n      vcr: options.vcr,\n      appRef: this.appRef,\n      tpl,\n      context: options.context,\n    });\n  }\n\n  createView(content: Content, viewOptions: _ViewOptions & CompViewOptions & TemplateViewOptions = {}): ViewRef {\n    if (isTemplateRef(content)) {\n      return this.createTemplate(content, viewOptions);\n    } else if (isComponent(content)) {\n      return this.createComponent(content, viewOptions);\n    } else if (isString(content)) {\n      return new StringRef(content);\n    } else {\n      throw 'Type of content is not supported';\n    }\n  }\n}\n","import {\n  Directive,\n  Injector,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Content, ViewRef, isString } from '../views/types';\nimport { ViewService } from '../views/view';\nimport { CompRef } from '../views/comp-ref';\nimport { DynamicViewComponent } from './dynamic-view.component';\n\n@Directive({\n  selector: '[dynamicView]',\n})\nexport class DynamicViewDirective implements OnInit, OnChanges, OnDestroy {\n  @Input('dynamicView') view: Content;\n  @Input('dynamicViewInjector') injector: Injector;\n  @Input('dynamicViewContext') context: any;\n\n  private viewRef: ViewRef;\n\n  constructor(private defaultTpl: TemplateRef<any>, private vcr: ViewContainerRef, private viewService: ViewService) {}\n\n  ngOnInit() {\n    this.resolveContentType();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.view && !changes.view.isFirstChange()) {\n      this.resolveContentType();\n    }\n  }\n\n  resolveContentType() {\n    this.viewRef?.destroy();\n    if (isString(this.view)) {\n      this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n        vcr: this.vcr,\n        injector: this.injector,\n      });\n      (this.viewRef as CompRef<DynamicViewComponent>).setInput('content', this.view).detectChanges();\n    } else {\n      this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n        vcr: this.vcr,\n        injector: this.injector ?? this.vcr.injector,\n        context: this.context,\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.viewRef?.destroy();\n  }\n}\n\n@NgModule({\n  declarations: [DynamicViewDirective, DynamicViewComponent],\n  exports: [DynamicViewDirective],\n})\nexport class DynamicViewModule {}\n","/*\n * Public API Surface of overview\n */\nexport { TeleportModule, TeleportDirective } from './lib/teleport/teleport.module';\nexport { TeleportOutletDirective } from './lib/teleport/teleport-outlet.directive';\nexport { DynamicViewModule, DynamicViewDirective } from './lib/dynamic-view/dynamic-view.directive';\nexport { StringRef } from './lib/views/string-ref';\nexport { CompRef } from './lib/views/comp-ref';\nexport { TplRef } from './lib/views/template-ref';\nexport { ViewService, ViewOptions } from './lib/views/view';\nexport { isComponent, isTemplateRef, Content, isString, ViewRef } from './lib/views/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}