{"ast":null,"code":"// import { Component } from '@angular/core';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-loading-animation',\n//   templateUrl: './loading-animation.component.html',\n//   styleUrls: ['./loading-animation.component.css']\n// })\n// export class LoadingAnimationComponent {\n// }\nimport { Component } from '@angular/core';\nlet LoadingComponent = class LoadingComponent {\n  constructor() {}\n  ngOnInit() {\n    // Get the lines.\n    const lines = document.querySelectorAll('#front line');\n    // Get the SVG element.\n    const svg = document.getElementById(\"loader\");\n    // Set the viewBox property of the SVG element.\n    const box = svg.getBBox();\n    svg.setAttribute(\"viewBox\", `${box.x} ${box.y} ${box.width} ${box.height}`);\n    // Create a function to run the animation.\n    function run() {\n      // Iterate over the lines.\n      for (let i = 0; i < lines.length; i += 1) {\n        // Get the current line.\n        const currLine = lines[i];\n        // Set the style of the current line.\n        setStyle(currLine, i);\n      }\n    }\n    // Run the animation.\n    run();\n    // Set an interval to run the animation again.\n    setInterval(run, 2000);\n  }\n  // Function to set the style of a line.\n  setStyle(currElement, i) {\n    // Set the stroke color of the line.\n    currElement.style.stroke = '#ff4d4f';\n    // Set the stroke dasharray of the line.\n    currElement.style.strokeDasharray = `${currElement.getTotalLength()}px`;\n    // Set the stroke dashoffset of the line.\n    currElement.style.strokeDashoffset = `${currElement.getTotalLength()}px`;\n    // Set the animation of the line.\n    currElement.style.animation = 'dash 0.1s ease-out forwards 0.1s';\n    currElement.style.animationDelay = 0.06 * i + 's';\n    currElement.style.animation - fill - mode;\n    \"forwards\";\n  }\n  // Function to remove the style of a line.\n  removeStyle(element, i) {\n    // Remove the style of the line.\n    element.style.removeAttribute(\"style\");\n  }\n};\nLoadingComponent = __decorate([Component({\n  selector: 'my-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.css']\n})], LoadingComponent);\nexport { LoadingComponent };\nfunction setStyle(currLine, i) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,SAASA,SAAS,QAAgB,eAAe;AAO1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAE3BC,eAAgB;EAEhBC,QAAQ;IACN;IACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,aAAa,CAAC;IAEtD;IACA,MAAMC,GAAG,GAAGF,QAAQ,CAACG,cAAc,CAAC,QAAQ,CAAC;IAE7C;IACA,MAAMC,GAAG,GAAGF,GAAG,CAACG,OAAO,EAAE;IACzBH,GAAG,CAACI,YAAY,CAAC,SAAS,EAAC,GAAGF,GAAG,CAACG,CAAC,IAAIH,GAAG,CAACI,CAAC,IAAIJ,GAAG,CAACK,KAAK,IAAIL,GAAG,CAACM,MAAM,EAAE,CAAC;IAE1E;IACA,SAASC,GAAG;MACV;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,CAACc,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QACxC;QACA,MAAME,QAAQ,GAAGf,KAAK,CAACa,CAAC,CAAC;QAEzB;QACAG,QAAQ,CAACD,QAAQ,EAAEF,CAAC,CAAC;;IAEzB;IAEA;IACAD,GAAG,EAAE;IAEL;IACAK,WAAW,CAACL,GAAG,EAAE,IAAI,CAAC;EACxB;EAEA;EACAI,QAAQ,CAACE,WAAgB,EAAEL,CAAM;IAC/B;IACAK,WAAW,CAACC,KAAK,CAACC,MAAM,GAAG,SAAS;IAEpC;IACAF,WAAW,CAACC,KAAK,CAACE,eAAe,GAAG,GAAGH,WAAW,CAACI,cAAc,EAAE,IAAI;IAEvE;IACAJ,WAAW,CAACC,KAAK,CAACI,gBAAgB,GAAG,GAAGL,WAAW,CAACI,cAAc,EAAE,IAAI;IAExE;IACAJ,WAAW,CAACC,KAAK,CAACK,SAAS,GAAG,kCAAkC;IAChEN,WAAW,CAACC,KAAK,CAACM,cAAc,GAAI,IAAI,GAAGZ,CAAC,GAAI,GAAG;IACnDK,WAAW,CAACC,KAAK,CAACK,SAAS,GAACE,IAAI,GAACC,IAAI;IAAG,UAAU;EACpD;EAEA;EACAC,WAAW,CAACC,OAAY,EAAEhB,CAAM;IAC9B;IACAgB,OAAO,CAACV,KAAK,CAACW,eAAe,CAAC,OAAO,CAAC;EACxC;CAED;AAzDYjC,gBAAgB,eAL5BD,SAAS,CAAC;EACTmC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACWpC,gBAAgB,CAyD5B;SAzDYA,gBAAgB;AA0D7B,SAASmB,QAAQ,CAACD,QAAiB,EAAEF,CAAS;EAC5C,MAAM,IAAIqB,KAAK,CAAC,2BAA2B,CAAC;AAC9C","names":["Component","LoadingComponent","constructor","ngOnInit","lines","document","querySelectorAll","svg","getElementById","box","getBBox","setAttribute","x","y","width","height","run","i","length","currLine","setStyle","setInterval","currElement","style","stroke","strokeDasharray","getTotalLength","strokeDashoffset","animation","animationDelay","fill","mode","removeStyle","element","removeAttribute","selector","templateUrl","styleUrls","Error"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\loading-animation\\loading-animation.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n\n// @Component({\n//   selector: 'app-loading-animation',\n//   templateUrl: './loading-animation.component.html',\n//   styleUrls: ['./loading-animation.component.css']\n// })\n// export class LoadingAnimationComponent {\n\n// }\n\n\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'my-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.css']\n})\nexport class LoadingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    // Get the lines.\n    const lines = document.querySelectorAll('#front line');\n\n    // Get the SVG element.\n    const svg = document.getElementById(\"loader\");\n\n    // Set the viewBox property of the SVG element.\n    const box = svg.getBBox();\n    svg.setAttribute(\"viewBox\",`${box.x} ${box.y} ${box.width} ${box.height}`)\n\n    // Create a function to run the animation.\n    function run() {\n      // Iterate over the lines.\n      for (let i = 0; i < lines.length; i += 1) {\n        // Get the current line.\n        const currLine = lines[i];\n\n        // Set the style of the current line.\n        setStyle(currLine, i);\n      }\n    }\n\n    // Run the animation.\n    run();\n\n    // Set an interval to run the animation again.\n    setInterval(run, 2000);\n  }\n\n  // Function to set the style of a line.\n  setStyle(currElement: any, i: any) {\n    // Set the stroke color of the line.\n    currElement.style.stroke = '#ff4d4f';\n\n    // Set the stroke dasharray of the line.\n    currElement.style.strokeDasharray = `${currElement.getTotalLength()}px`;\n\n    // Set the stroke dashoffset of the line.\n    currElement.style.strokeDashoffset = `${currElement.getTotalLength()}px`;\n\n    // Set the animation of the line.\n    currElement.style.animation = 'dash 0.1s ease-out forwards 0.1s';\n    currElement.style.animationDelay = (0.06 * i) + 's';\n    currElement.style.animation-fill-mode = \"forwards\";\n  }\n\n  // Function to remove the style of a line.\n  removeStyle(element: any, i: any) {\n    // Remove the style of the line.\n    element.style.removeAttribute(\"style\");\n  }\n\n}\nfunction setStyle(currLine: Element, i: number) {\n  throw new Error('Function not implemented.');\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}