{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hp/Documents/Arcs Infotech/blood-bank-system/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license Angular v15.2.9\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { getDebugNode, RendererFactory2 as RendererFactory2$1, InjectionToken as InjectionToken$1, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, resolveForwardRef as resolveForwardRef$1, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID as LOCALE_ID$1, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ɵisEnvironmentProviders, ModuleWithComponentFactories, ɵconvertToBitFlags, Injector as Injector$1, InjectFlags as InjectFlags$1, ɵsetAllowDuplicateNgModuleIdsForTest, ɵresetCompiledComponents, ɵsetUnknownElementStrictMode as ɵsetUnknownElementStrictMode$1, ɵsetUnknownPropertyStrictMode as ɵsetUnknownPropertyStrictMode$1, ɵgetUnknownElementStrictMode as ɵgetUnknownElementStrictMode$1, ɵgetUnknownPropertyStrictMode as ɵgetUnknownPropertyStrictMode$1, EnvironmentInjector as EnvironmentInjector$1, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nfunction waitForAsync(fn) {\n  const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n  if (!_Zone) {\n    return function () {\n      return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js');\n    };\n  }\n  const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n  if (typeof asyncTest === 'function') {\n    return asyncTest(fn);\n  }\n  return function () {\n    return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/testing');\n  };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\nfunction async(fn) {\n  return waitForAsync(fn);\n}\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nclass ComponentFixture {\n  constructor(componentRef, ngZone, _autoDetect) {\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n    this._autoDetect = _autoDetect;\n    this._isStable = true;\n    this._isDestroyed = false;\n    this._resolve = null;\n    this._promise = null;\n    this._onUnstableSubscription = null;\n    this._onStableSubscription = null;\n    this._onMicrotaskEmptySubscription = null;\n    this._onErrorSubscription = null;\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n    if (ngZone) {\n      // Create subscriptions outside the NgZone so that the callbacks run oustide\n      // of NgZone.\n      ngZone.runOutsideAngular(() => {\n        this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n          next: () => {\n            this._isStable = false;\n          }\n        });\n        this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n          next: () => {\n            if (this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              this.detectChanges(true);\n            }\n          }\n        });\n        this._onStableSubscription = ngZone.onStable.subscribe({\n          next: () => {\n            this._isStable = true;\n            // Check whether there is a pending whenStable() completer to resolve.\n            if (this._promise !== null) {\n              // If so check whether there are no pending macrotasks before resolving.\n              // Do this check in the next tick so that ngZone gets a chance to update the state of\n              // pending macrotasks.\n              scheduleMicroTask(() => {\n                if (!ngZone.hasPendingMacrotasks) {\n                  if (this._promise !== null) {\n                    this._resolve(true);\n                    this._resolve = null;\n                    this._promise = null;\n                  }\n                }\n              });\n            }\n          }\n        });\n        this._onErrorSubscription = ngZone.onError.subscribe({\n          next: error => {\n            throw error;\n          }\n        });\n      });\n    }\n  }\n  _tick(checkNoChanges) {\n    this.changeDetectorRef.detectChanges();\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n  detectChanges(checkNoChanges = true) {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => {\n        this._tick(checkNoChanges);\n      });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n  checkNoChanges() {\n    this.changeDetectorRef.checkNoChanges();\n  }\n  /**\n   * Set whether the fixture should autodetect changes.\n   *\n   * Also runs detectChanges once so that any existing change is detected.\n   */\n  autoDetectChanges(autoDetect = true) {\n    if (this.ngZone == null) {\n      throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n  /**\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\n   * yet.\n   */\n  isStable() {\n    return this._isStable && !this.ngZone.hasPendingMacrotasks;\n  }\n  /**\n   * Get a promise that resolves when the fixture is stable.\n   *\n   * This can be used to resume testing after events have triggered asynchronous activity or\n   * asynchronous change detection.\n   */\n  whenStable() {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    } else if (this._promise !== null) {\n      return this._promise;\n    } else {\n      this._promise = new Promise(res => {\n        this._resolve = res;\n      });\n      return this._promise;\n    }\n  }\n  _getRenderer() {\n    if (this._renderer === undefined) {\n      this._renderer = this.componentRef.injector.get(RendererFactory2$1, null);\n    }\n    return this._renderer;\n  }\n  /**\n   * Get a promise that resolves when the ui state is stable following animations.\n   */\n  whenRenderingDone() {\n    const renderer = this._getRenderer();\n    if (renderer && renderer.whenRenderingDone) {\n      return renderer.whenRenderingDone();\n    }\n    return this.whenStable();\n  }\n  /**\n   * Trigger component destruction.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this.componentRef.destroy();\n      if (this._onUnstableSubscription != null) {\n        this._onUnstableSubscription.unsubscribe();\n        this._onUnstableSubscription = null;\n      }\n      if (this._onStableSubscription != null) {\n        this._onStableSubscription.unsubscribe();\n        this._onStableSubscription = null;\n      }\n      if (this._onMicrotaskEmptySubscription != null) {\n        this._onMicrotaskEmptySubscription.unsubscribe();\n        this._onMicrotaskEmptySubscription = null;\n      }\n      if (this._onErrorSubscription != null) {\n        this._onErrorSubscription.unsubscribe();\n        this._onErrorSubscription = null;\n      }\n      this._isDestroyed = true;\n    }\n  }\n}\nfunction scheduleMicroTask(fn) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/testing`;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZone() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the `fakeAsync` zone:\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception is thrown.\n *\n * Can be used to wrap `inject()` calls.\n *\n * @param fn The function that you want to wrap in the `fakeAsync` zone.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n *\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\n * Any arguments passed when calling this returned function will be passed through to the `fn`\n * function in the parameters when it is called.\n *\n * @publicApi\n */\nfunction fakeAsync(fn) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @param millis The number of milliseconds to advance the virtual timer.\n * @param tickOptions The options to pass to the `tick()` function.\n *\n * @usageNotes\n *\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\n * which determines whether or not to invoke new macroTasks.\n *\n * If you provide a `tickOptions` object, but do not specify a\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\n * then `processNewMacroTasksSynchronously` defaults to true.\n *\n * If you omit the `tickOptions` parameter (`tick(100))`), then\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\n *\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * The following example includes a nested timeout (new macroTask), and\n * the `tickOptions` parameter is allowed to default. In this case,\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\n * function is executed on each tick.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n * ```\n *\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\n * set to false, so the nested timeout function is not invoked.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n * ```\n *\n *\n * @publicApi\n */\nfunction tick(millis = 0, tickOptions = {\n  processNewMacroTasksSynchronously: true\n}) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis, tickOptions);\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flushes any pending microtasks and simulates the asynchronous passage of time for the timers in\n * the `fakeAsync` zone by\n * draining the macrotask queue until it is empty.\n *\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\n *     throwing an error.\n * @returns The simulated time elapsed, in milliseconds.\n *\n * @publicApi\n */\nfunction flush(maxTurns) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n\n/** Whether test modules should be torn down by default. */\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\n/** Whether unknown elements in templates should throw by default. */\nconst THROW_ON_UNKNOWN_ELEMENTS_DEFAULT = false;\n/** Whether unknown properties in templates should throw by default. */\nconst THROW_ON_UNKNOWN_PROPERTIES_DEFAULT = false;\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nclass TestComponentRenderer {\n  insertRootElement(rootElementId) {}\n  removeAllRootElements() {}\n}\n/**\n * @publicApi\n */\nconst ComponentFixtureAutoDetect = new InjectionToken$1('ComponentFixtureAutoDetect');\n/**\n * @publicApi\n */\nconst ComponentFixtureNoNgZone = new InjectionToken$1('ComponentFixtureNoNgZone');\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  const componentResolved = [];\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map();\n  function cachedResourceResolve(url) {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n    return promise;\n  }\n  componentResourceResolutionQueue.forEach((component, type) => {\n    const promises = [];\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n      }));\n    }\n    const styleUrls = component.styleUrls;\n    const styles = component.styles || (component.styles = []);\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push(''); // pre-allocate array.\n      promises.push(cachedResourceResolve(styleUrl).then(style => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      }));\n    });\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\n// https://github.com/terser/terser/issues/250.\nconst _global$1 = /* @__PURE__ */(() => typeof globalThis !== 'undefined' && globalThis || typeof global !== 'undefined' && global || typeof window !== 'undefined' && window || typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self)();\nvar FactoryTarget;\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\nvar ViewEncapsulation$1;\n(function (ViewEncapsulation) {\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));\nfunction getCompilerFacade(request) {\n  const globalNg = _global$1['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n  if (token == null) {\n    return '' + token;\n  }\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n  if (token.name) {\n    return `${token.name}`;\n  }\n  const res = token.toString();\n  if (res == null) {\n    return '' + res;\n  }\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nfunction concatStringsWithSpace(before, after) {\n  return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;\n}\nconst __forward_ref__ = getClosureSafeProperty({\n  __forward_ref__: getClosureSafeProperty\n});\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n  forwardRefFn.__forward_ref__ = forwardRef;\n  forwardRefFn.toString = function () {\n    return stringify(this());\n  };\n  return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n  return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;\n}\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nfunction ɵɵdefineInjectable(opts) {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn || null,\n    factory: opts.factory,\n    value: undefined\n  };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjector(options) {\n  return {\n    providers: options.providers || [],\n    imports: options.imports || []\n  };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nfunction getInjectableDef(type) {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\nfunction isInjectable(type) {\n  return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition(type, field) {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n  if (def) {\n    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` + `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nfunction getInjectorDef(type) {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;\n}\nconst NG_PROV_DEF = getClosureSafeProperty({\n  ɵprov: getClosureSafeProperty\n});\nconst NG_INJ_DEF = getClosureSafeProperty({\n  ɵinj: getClosureSafeProperty\n});\n// We need to keep these around so we can read off old defs if new defs are unavailable\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({\n  ngInjectableDef: getClosureSafeProperty\n});\nconst NG_INJECTOR_DEF = getClosureSafeProperty({\n  ngInjectorDef: getClosureSafeProperty\n});\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n/**\n * URL for the XSS security documentation.\n */\nconst XSS_SECURITY_URL = 'https://g.co/ng/security#xss';\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.\n */\nclass RuntimeError extends Error {\n  constructor(code, message) {\n    super(formatRuntimeError(code, message));\n    this.code = code;\n  }\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  // We also prepend `0` to non-compile-time errors.\n  const fullCode = `NG0${Math.abs(code)}`;\n  let errorMessage = `${fullCode}${message ? ': ' + message.trim() : ''}`;\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n  return typeof v === 'function';\n}\n\n// The functions in this file verify that the assumptions we are making\nfunction assertNumber(actual, msg) {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\nfunction assertFunction(actual, msg) {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\nfunction assertEqual(actual, expected, msg) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\nfunction assertNotEqual(actual, expected, msg) {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\nfunction assertSame(actual, expected, msg) {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\nfunction assertNotSame(actual, expected, msg) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\nfunction assertLessThan(actual, expected, msg) {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\nfunction assertNotDefined(actual, msg) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\nfunction assertDefined(actual, msg) {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\nfunction throwError(msg, actual, expected, comparison) {\n  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n  // If we're in a worker, `Node` will not be defined.\n  if (!(typeof Node !== 'undefined' && node instanceof Node) && !(typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode')) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\nfunction assertIndexInRange(arr, index) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\nfunction assertOneOf(value, ...validValues) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nfunction arrayEquals(a, b, identityAccessor) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA);\n      valueB = identityAccessor(valueB);\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Flattens an array.\n */\nfunction flatten$1(list) {\n  return list.flat(Number.POSITIVE_INFINITY);\n}\nfunction deepForEach(input, fn) {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\nfunction removeFromArray(arr, index) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\nfunction newArray(size, value) {\n  const list = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n  return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nfunction arraySplice(array, index, count) {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop(); // shrink the array\n  }\n}\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nfunction arrayInsert(array, index, value) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n  array[index] = value;\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nfunction arrayInsert2(array, index, value1, value2) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nfunction arrayIndexOfSorted(array, value) {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1];\n  }\n  return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n  return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nfunction keyValueArrayDelete(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n  return index;\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + (end - start >> 1); // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return middle << shift;\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n\n  return ~(end << shift);\n}\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n  return {\n    toString: fn\n  }.toString();\n}\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this;\n      }\n      const annotationInstance = new DecoratorFactory(...args);\n      return function TypeDecorator(cls) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {\n          value: []\n        })[ANNOTATIONS];\n        annotations.push(annotationInstance);\n        if (additionalProcessing) additionalProcessing(cls);\n        return cls;\n      };\n    }\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n  });\n}\nfunction makeMetadataCtor(props) {\n  return function ctor(...args) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new ParamDecoratorFactory(...args);\n      ParamDecorator.annotation = annotationInstance;\n      return ParamDecorator;\n      function ParamDecorator(cls, unusedKey, index) {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {\n          value: []\n        })[PARAMETERS];\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const decoratorInstance = new PropDecoratorFactory(...args);\n      function PropDecorator(target, name) {\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {\n          value: {}\n        })[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n      return PropDecorator;\n    }\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);\n}\nclass ReflectionCapabilities {\n  constructor(reflect) {\n    this._reflect = reflect || _global$1['Reflect'];\n  }\n  factory(t) {\n    return (...args) => new t(...args);\n  }\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n    let result;\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n  _ownParameters(type, parentCtor) {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    }\n    // Prefer the direct API.\n    if (type.parameters && type.parameters !== parentCtor.parameters) {\n      return type.parameters;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = type.ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return newArray(type.length);\n  }\n  parameters(type) {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n  _ownAnnotations(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n      let annotations = typeOrFunc.annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return typeOrFunc[ANNOTATIONS];\n    }\n    return null;\n  }\n  annotations(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n  _ownPropMetadata(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = typeOrFunc.propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = typeOrFunc.propDecorators;\n      const propMetadata = {};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return typeOrFunc[PROP_METADATA];\n    }\n    return null;\n  }\n  propMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach(propName => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach(propName => {\n        const decorators = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n  ownPropMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n  hasLifecycleHook(type, lcProperty) {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\nfunction getParentCtor(ctor) {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\nfunction ngDevModeResetPerfCounters() {\n  const locationString = typeof location !== 'undefined' ? location.toString() : '';\n  const newCounters = {\n    namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n    firstCreatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n    rendererAppendChild: 0,\n    rendererInsertBefore: 0,\n    rendererCreateComment: 0\n  };\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n  _global$1['ngDevMode'] = allowNgDevModeTrue && newCounters;\n  return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nfunction initNgDevMode() {\n  // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n  // reset the counters.\n  // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n  // yet.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (typeof ngDevMode !== 'object') {\n      ngDevModeResetPerfCounters();\n    }\n    return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n  }\n  return false;\n}\nfunction isEnvironmentProviders(value) {\n  return value && !!value.ɵproviders;\n}\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nfunction renderStringify(value) {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nfunction stringifyForError(value) {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n  return renderStringify(value);\n}\n\n/** Called when directives inject each other (creating a circular dependency) */\nfunction throwCyclicDependencyError(token, path) {\n  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n  throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, `Circular dependency in DI detected for ${token}${depPath}`);\n}\nfunction throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n  } else if (isEnvironmentProviders(provider)) {\n    if (provider.ɵfromNgModule) {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n    } else {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n    }\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n  const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n  throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for `inject` instead.\n */\nvar InjectFlags;\n(function (InjectFlags) {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n  /** Check self and check parent injector if needed */\n  InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n  /** Don't ascend to ancestors of the node requesting injection. */\n  InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n  /** Skip the node that is requesting injection. */\n  InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n  /** Inject `defaultValue` instead if token not found. */\n  InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n  return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n  const injectableDef = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(stringify(token), 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nfunction assertInjectImplementationNotEqual(fn) {\n  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector = undefined;\nfunction setCurrentInjector(injector) {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n  if (_currentInjector === undefined) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`EnvironmentInjector#runInContext\\`.`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactoryDep(index) {\n  throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported during instantiation of a dependency by the DI system. It can be used\n * during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction inject$1(token, flags = InjectFlags.Default) {\n  return ɵɵinject(token, convertToBitFlags(flags));\n}\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nfunction convertToBitFlags(flags) {\n  if (typeof flags === 'undefined' || typeof flags === 'number') {\n    return flags;\n  }\n  // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n  // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n  // `InjectOptions` to `InjectFlags`.\n  return 0 /* InternalInjectFlags.Default */ | (\n  // comment to force a line break in the formatter\n  flags.optional && 8 /* InternalInjectFlags.Optional */) | (flags.host && 1 /* InternalInjectFlags.Host */) | (flags.self && 2 /* InternalInjectFlags.Self */) | (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */);\n}\n\nfunction injectArgs(types) {\n  const args = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n      }\n      let type = undefined;\n      let flags = InjectFlags.Default;\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === -1 /* DecoratorFlags.Inject */) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n      args.push(ɵɵinject(type, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nfunction attachInjectFlag(decorator, flag) {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nfunction getInjectFlag(token) {\n  return token[DI_DECORATOR_FLAG];\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n  const tokenPath = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source = null) {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = [];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Inject = attachInjectFlag(\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nmakeParamDecorator('Inject', token => ({\n  token\n})), -1 /* DecoratorFlags.Inject */);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Optional =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Self =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst SkipSelf =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Host =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\nconst NG_COMP_DEF = getClosureSafeProperty({\n  ɵcmp: getClosureSafeProperty\n});\nconst NG_DIR_DEF = getClosureSafeProperty({\n  ɵdir: getClosureSafeProperty\n});\nconst NG_PIPE_DEF = getClosureSafeProperty({\n  ɵpipe: getClosureSafeProperty\n});\nconst NG_MOD_DEF = getClosureSafeProperty({\n  ɵmod: getClosureSafeProperty\n});\nconst NG_FACTORY_DEF = getClosureSafeProperty({\n  ɵfac: getClosureSafeProperty\n});\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = getClosureSafeProperty({\n  __NG_ELEMENT_ID__: getClosureSafeProperty\n});\n\n/** Counter used to generate unique IDs for component definitions. */\nlet componentDefCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n    const baseDef = getNgDirectiveDef(componentDefinition);\n    const def = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null,\n      pipeDefs: null,\n      dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n      getStandaloneInjector: null,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      id: `c${componentDefCount++}`,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null\n    };\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */false);\n    def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */true);\n    return def;\n  });\n}\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n  const def = type.ɵcmp;\n  def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */false);\n  def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */true);\n}\nfunction extractDirectiveDef(type) {\n  return getComponentDef$1(type) || getDirectiveDef(type);\n}\nfunction nonNull(value) {\n  return value !== null;\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵdefineNgModule(def) {\n  return noSideEffects(() => {\n    const res = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null\n    };\n    return res;\n  });\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n  });\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName = obj[minifiedKey];\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        secondary[publicName] = declaredName;\n      }\n    }\n  }\n  return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdefineDirective(directiveDefinition) {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n    return def;\n  });\n}\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nfunction ɵɵdefinePipe(pipeDef) {\n  return {\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone === true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  };\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef$1(type) {\n  return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDef(type) {\n  return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef$1(type) {\n  return type[NG_PIPE_DEF] || null;\n}\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See this guide for additional information: https://angular.io/guide/standalone-components\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nfunction isStandalone(type) {\n  const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n  return def !== null ? def.standalone : false;\n}\nfunction getNgModuleDef(type, throwNotFound) {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\nfunction getNgDirectiveDef(directiveDefinition) {\n  const declaredInputs = {};\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    findHostDirectiveDefs: null,\n    hostDirectives: null,\n    inputs: invertObject(directiveDefinition.inputs, declaredInputs),\n    outputs: invertObject(directiveDefinition.outputs)\n  };\n}\nfunction initFeatures(definition) {\n  definition.features?.forEach(fn => fn(definition));\n}\nfunction extractDefListOrFactory(dependencies, pipeDef) {\n  if (!dependencies) {\n    return null;\n  }\n  const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;\n  return () => (typeof dependencies === 'function' ? dependencies() : dependencies).map(dep => defExtractor(dep)).filter(nonNull);\n}\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nconst T_HOST = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR$1 = 9;\nconst RENDERER_FACTORY = 10;\nconst RENDERER = 11;\nconst SANITIZER = 12;\nconst CHILD_HEAD = 13;\nconst CHILD_TAIL = 14;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 15;\nconst DECLARATION_COMPONENT_VIEW = 16;\nconst DECLARATION_LCONTAINER = 17;\nconst PREORDER_HOOK_FLAGS = 18;\nconst QUERIES = 19;\nconst ID = 20;\nconst EMBEDDED_VIEW_INJECTOR = 21;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nconst HEADER_OFFSET = 22;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$4 = 1;\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\nconst HAS_TRANSPLANTED_VIEWS = 2;\n// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$3 = 1;\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLView(value) {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLContainer(value) {\n  return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n  return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n  return tNode.componentOffset > -1;\n}\nfunction isDirectiveHost(tNode) {\n  return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\n\nfunction isComponentDef(def) {\n  return !!def.template;\n}\nfunction isRootView(target) {\n  return (target[FLAGS] & 256 /* LViewFlags.IsRoot */) !== 0;\n}\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n  assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeForTView(tNode, tView) {\n  assertTNode(tNode);\n  tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n  assertDefined(tNode, 'TNode must be defined');\n  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n    throwError('Not of type TNode, got: ' + tNode);\n  }\n}\nfunction assertTIcu(tIcu) {\n  assertDefined(tIcu, 'Expected TIcu to be defined');\n  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n    throwError('Object is not of TIcu type.');\n  }\n}\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n  if (!getComponentDef$1(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertCurrentTNodeIsParent(isParent) {\n  assertEqual(isParent, true, 'currentTNode should be a parent');\n}\nfunction assertHasParent(tNode) {\n  assertDefined(tNode, 'currentTNode should exist!');\n  assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertLContainer(value) {\n  assertDefined(value, 'LContainer must be defined');\n  assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n  assertDefined(value, 'LView must be defined');\n  assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n  assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nfunction assertDirectiveDef(obj) {\n  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n    throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n  }\n}\nfunction assertIndexInDeclRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n  if (!(lower <= index && index < upper)) {\n    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n  }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n  assertDefined(lView, errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n  assertIndexInExpandoRange(lView, injectorIndex);\n  assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\nfunction getFactoryDef(type, throwNotFound) {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nclass SimpleChange {\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange() {\n    return this.firstChange;\n  }\n}\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵNgOnChangesFeature() {\n  return NgOnChangesFeatureImpl;\n}\nfunction NgOnChangesFeatureImpl(definition) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\nɵɵNgOnChangesFeature.ngInherit = true;\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n  if (current) {\n    const previous = simpleChangesStore.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore.current = null;\n    this.ngOnChanges(current);\n  }\n}\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n  const declaredName = this.declaredInputs[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {\n    previous: EMPTY_OBJ,\n    current: null\n  });\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n  instance[privateName] = value;\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\nlet profilerCallback = null;\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setProfiler = profiler => {\n  profilerCallback = profiler;\n};\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nconst profiler = function (event, instance, hookOrListener) {\n  if (profilerCallback != null /* both `null` and `undefined` */) {\n    profilerCallback(event, instance, hookOrListener);\n  }\n};\nconst SVG_NAMESPACE = 'svg';\nconst MATH_ML_NAMESPACE = 'math';\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapRNode(value) {\n  while (Array.isArray(value)) {\n    value = value[HOST];\n  }\n  return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLView(value) {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value;\n    value = value[HOST];\n  }\n  return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNode(tNode, lView) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const node = unwrapRNode(lView[index]);\n    return node;\n  }\n  return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index];\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n  return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n  return (view[FLAGS] & 64 /* LViewFlags.Attached */) === 64 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n  return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts, index);\n  return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\nfunction updateTransplantedViewCount(lContainer, amount) {\n  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n  let viewOrContainer = lContainer;\n  let parent = lContainer[PARENT];\n  while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {\n    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    viewOrContainer = parent;\n    parent = parent[PARENT];\n  }\n}\nconst instructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true\n};\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _isInCheckNoChangesMode = false;\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nfunction specOnlyIsInstructionStateEmpty() {\n  return instructionState.lFrame.parent === null;\n}\nfunction getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n  return instructionState.bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵenableBindings() {\n  instructionState.bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdisableBindings() {\n  instructionState.bindingsEnabled = false;\n}\n/**\n * Return the current `LView`.\n */\nfunction getLView() {\n  return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\nfunction getTView() {\n  return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nfunction ɵɵrestoreView(viewToRestore) {\n  instructionState.lFrame.contextLView = viewToRestore;\n  return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nfunction ɵɵresetView(value) {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\nfunction getCurrentTNode() {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n  return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n  return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n  instructionState.lFrame.isParent = false;\n}\nfunction getContextLView() {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _isInCheckNoChangesMode;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _isInCheckNoChangesMode = mode;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\nfunction getBindingIndex() {\n  return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n  return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n  return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\nfunction isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nfunction getCurrentDirectiveIndex() {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nfunction getCurrentDirectiveDef(tData) {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n  return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView) {\n  const tView = lView[TVIEW];\n  // Return the declaration parent for embedded views\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === 1 /* TViewType.Component */) {\n    return lView[T_HOST];\n  }\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nfunction enterDI(lView, tNode, flags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n    let parentTNode = tNode;\n    let parentLView = lView;\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode.parent;\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW];\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n  return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nfunction enterView(newView) {\n  ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\nfunction createLFrame(parent) {\n  const lFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null,\n    tView: null,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent,\n    child: null,\n    inI18n: false\n  };\n  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n  return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight() {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null;\n  oldLFrame.lView = null;\n  return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nfunction leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);\n  return contextLView[CONTEXT];\n}\nfunction walkUpViews(nestingLevel, currentView) {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW];\n    nestingLevel--;\n  }\n  return currentView;\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nfunction getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nfunction setSelectedIndex(index) {\n  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n  instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nfunction getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace$1() {\n  return instructionState.lFrame.currentNamespace;\n}\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {\n    ngOnChanges,\n    ngOnInit,\n    ngDoCheck\n  } = directiveDef.type.prototype;\n  if (ngOnChanges) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);\n  }\n  if (ngOnInit) {\n    (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);\n  }\n  if (ngDoCheck) {\n    (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);\n  }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i];\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n    if (ngAfterContentInit) {\n      (tView.contentHooks ?? (tView.contentHooks = [])).push(-i, ngAfterContentInit);\n    }\n    if (ngAfterContentChecked) {\n      (tView.contentHooks ?? (tView.contentHooks = [])).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks ?? (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);\n    }\n    if (ngAfterViewInit) {\n      (tView.viewHooks ?? (tView.viewHooks = [])).push(-i, ngAfterViewInit);\n    }\n    if (ngAfterViewChecked) {\n      (tView.viewHooks ?? (tView.viewHooks = [])).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks ?? (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);\n    }\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks ?? (tView.destroyHooks = [])).push(i, ngOnDestroy);\n    }\n  }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n  callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    flags &= 2047 /* LViewFlags.IndexWithinInitPhaseReset */;\n    flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n    lView[FLAGS] = flags;\n  }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */ : 0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1];\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i];\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i + 2;\n      }\n      i++;\n    }\n  }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1];\n  const directiveIndex = isInitHook ? -arr[i] : arr[i];\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> 11 /* LViewFlags.IndexWithinInitPhaseShift */;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */ && (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n      currentView[FLAGS] += 2048 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n      profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n      try {\n        hook.call(directive);\n      } finally {\n        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n      }\n    }\n  } else {\n    profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n    try {\n      hook.call(directive);\n    } finally {\n      profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n    }\n  }\n}\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n  constructor(\n  /**\n   * Factory to invoke in order to create a new instance.\n   */\n  factory,\n  /**\n   * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n   */\n  isViewProvider, injectImplementation) {\n    this.factory = factory;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     */\n    this.resolving = false;\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\nfunction isFactory(obj) {\n  return obj instanceof NodeInjectorFactory;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$2 = 1;\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nfunction toTNodeTypeAsString(tNodeType) {\n  let text = '';\n  tNodeType & 1 /* TNodeType.Text */ && (text += '|Text');\n  tNodeType & 2 /* TNodeType.Element */ && (text += '|Element');\n  tNodeType & 4 /* TNodeType.Container */ && (text += '|Container');\n  tNodeType & 8 /* TNodeType.ElementContainer */ && (text += '|ElementContainer');\n  tNodeType & 16 /* TNodeType.Projection */ && (text += '|Projection');\n  tNodeType & 32 /* TNodeType.Icu */ && (text += '|IcuContainer');\n  tNodeType & 64 /* TNodeType.Placeholder */ && (text += '|Placeholder');\n  return text.length > 0 ? text.substring(1) : text;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$1 = 1;\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasClassInput(tNode) {\n  return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasStyleInput(tNode) {\n  return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\n}\nfunction assertTNodeType(tNode, expectedTypes, message) {\n  assertDefined(tNode, 'should be called with a TNode');\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n  }\n}\nfunction assertPureTNodeType(type) {\n  if (!(type === 2 /* TNodeType.Element */ ||\n  //\n  type === 1 /* TNodeType.Text */ ||\n  //\n  type === 4 /* TNodeType.Container */ ||\n  //\n  type === 8 /* TNodeType.ElementContainer */ ||\n  //\n  type === 32 /* TNodeType.Icu */ ||\n  //\n  type === 16 /* TNodeType.Projection */ ||\n  //\n  type === 64 /* TNodeType.Placeholder */)) {\n    throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n  }\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(renderer, native, attrs) {\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n        break;\n      }\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n      const namespaceURI = attrs[i++];\n      const attrName = attrs[i++];\n      const attrVal = attrs[i++];\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal);\n      }\n      i++;\n    }\n  }\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n  return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ || marker === 6 /* AttributeMarker.I18n */;\n}\n\nfunction isAnimationProp(name) {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nfunction mergeHostAttrs(dst, src) {\n  if (src === null || src.length === 0) {\n    // do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) {\n          // Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ || srcMarker === 2 /* AttributeMarker.Styles */) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value;\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  }\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n  ngDevMode && assertNumber(parentLocation, 'Number expected');\n  ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');\n  const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n  ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n  return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\n\nfunction getParentInjectorViewOffset(parentLocation) {\n  return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW];\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = type[NG_ELEMENT_ID];\n  }\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = type[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n    insertBloom(lView, null); // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n  lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n  return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n  if (tNode.injectorIndex === -1 ||\n  // If the injector index is the same as its parent's injector index, then the index has been\n  // copied down from the parent node. No injector has been created yet on this node.\n  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex ||\n  // After the first template pass, the injector index might exist but the parent values\n  // might not have been calculated yet for this instance\n  lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nfunction getParentInjectorLocation(tNode, lView) {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex; // ViewOffset is 0\n  }\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode = null;\n  let lViewCursor = lView;\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return parentTNode.injectorIndex | declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n    }\n  }\n\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n  bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n  ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n      // Skip namespaced attributes\n      if (value === 0 /* AttributeMarker.NamespaceURI */) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1];\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n  if (flags & InjectFlags.Optional || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR$1];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (lView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) {\n      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    }\n    // Otherwise try the node injector.\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  }\n  // Finally, fall back to the module injector.\n  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n  const bloomHash = bloomHashBitOrFactory(token);\n  // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n    }\n    try {\n      const value = bloomHash(flags);\n      if (value == null && !(flags & InjectFlags.Optional)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n    // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n    // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n      // Check the current injector. If it matches, see if it contains token.\n      const tView = lView[TVIEW];\n      ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n      parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n  return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n  // 1) This is the first invocation `previousTView == null` which means that we are at the\n  // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n  // to look into the ViewProviders is if:\n  // - we are on a component\n  // - AND the injector set `includeViewProviders` to true (implying that the token can see\n  // ViewProviders because it is the Component or a Service which itself was declared in\n  // ViewProviders)\n  isComponentHost(tNode) && includeViewProviders :\n  // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n  // In such a case we are only allowed to look into the ViewProviders if:\n  // - We just crossed from child View to Parent View `previousTView != currentTView`\n  // - AND the parent TNode is an Element.\n  // This means that we just came from the Component's View and therefore are allowed to see\n  // into the ViewProviders.\n  previousTView != currentTView && (tNode.type & 3 /* TNodeType.AnyRNode */) !== 0;\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;\n  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n  const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i];\n    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart];\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nfunction getNodeInjectable(lView, tView, index, tNode) {\n  let value = lView[index];\n  const tData = tView.data;\n  if (isFactory(value)) {\n    const factory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode && assertEqual(success, true, 'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index], tView);\n      }\n    } finally {\n      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId =\n  // First check with `hasOwnProperty` so we don't get an inherited ID.\n  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode && assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nclass NodeInjector {\n  constructor(_tNode, _lView) {\n    this._tNode = _tNode;\n    this._lView = _lView;\n  }\n  get(token, notFoundValue, flags) {\n    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n  }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n  return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵgetInheritedFactory(type) {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n      parent = Object.getPrototypeOf(parent);\n    }\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\nfunction getFactoryOf(type) {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n  let currentTNode = tNode;\n  let currentLView = lView;\n  // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */ && !(currentLView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n    // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    }\n    // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n    let parentTNode = currentTNode.parent;\n    // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      }\n      // Otherwise keep going up the tree.\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n    currentTNode = parentTNode;\n  }\n  return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type;\n  // The parent pointer differs based on `TView.type`.\n  if (tViewType === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  } else if (tViewType === 1 /* TViewType.Component */) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST];\n  }\n  return null;\n}\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Attribute = makeParamDecorator('Attribute', attributeName => ({\n  attributeName,\n  __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName)\n}));\nlet _reflect = null;\nfunction getReflect() {\n  return _reflect = _reflect || new ReflectionCapabilities();\n}\nfunction reflectDependencies(type) {\n  return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n  return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n  const meta = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false\n  };\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n      const proto = Object.getPrototypeOf(param);\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n        }\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n  return meta;\n}\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n  if (type && type !== incoming && checkForDuplicateNgModules) {\n    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nfunction registerNgModuleType(ngModuleType, id) {\n  const existing = modules.get(id) || null;\n  assertSameOrNotExisting(id, existing, ngModuleType);\n  modules.set(id, ngModuleType);\n}\nfunction clearModulesForTest() {\n  modules.clear();\n}\nfunction getRegisteredNgModuleType(id) {\n  return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n  checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveWindow(element) {\n  return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveDocument(element) {\n  return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveBody(element) {\n  return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn$1(value) {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return;\n  // If the element matches any directive, it's considered as valid.\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n    // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n    // Domino doesn't expose HTMLUnknownElement globally.\n    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);\n    if (isUnknown && !matchingSchemas(schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared'}.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n      } else {\n        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n      } else {\n        console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n      }\n    }\n  }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true;\n  // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n  // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n    tagName = 'ng-template';\n  }\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared';\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message += `\\nIf the '${propName}' is an Angular control flow directive, ` + `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message += `\\n1. If '${tagName}' is an Angular component and it has the ` + `'${propName}' input, then verify that it is ${importLocation}.`;\n    // May be a Web Component?\n    if (tagName && tagName.indexOf('-') > -1) {\n      message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` + `to the ${schemas} of this component to suppress this message.`;\n      message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    }\n  }\n  reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n  } else {\n    console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n  }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  // Unable to obtain a context.\n  if (!context) return null;\n  return context.constructor ? getComponentDef$1(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction isHostComponentStandalone(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const componentDef = getDeclarationComponentDef(lView);\n  // Treat host component as non-standalone if we can't obtain the def.\n  return !!componentDef?.standalone;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getTemplateLocationDetails(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'], ['ngSwitchDefault', 'NgSwitchDefault']]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nfunction matchingSchemas(schemas, tagName) {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nfunction escapeCommentText(value) {\n  return value.replace(COMMENT_DISALLOWED, text => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n  return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nclass LContext {\n  /** Component's parent view data. */\n  get lView() {\n    return getLViewById(this.lViewId);\n  }\n  constructor(\n  /**\n   * ID of the component's parent view data.\n   */\n  lViewId,\n  /**\n   * The index instance of the node.\n   */\n  nodeIndex,\n  /**\n   * The instance of the DOM node that is attached to the lNode.\n   */\n  native) {\n    this.lViewId = lViewId;\n    this.nodeIndex = nodeIndex;\n    this.native = native;\n  }\n}\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView = mpValue;\n      let nodeIndex;\n      let component = undefined;\n      let directives = undefined;\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target;\n    ngDevMode && assertDomNode(rElement);\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n  let patchedData = readPatchedData(componentInstance);\n  let lView;\n  if (isLView(patchedData)) {\n    const contextLView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData;\n    const contextLView = context.lView;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n  return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return typeof data === 'number' ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n  const value = readPatchedData(target);\n  if (value) {\n    return isLView(value) ? value : value.lView;\n  }\n  return null;\n}\nfunction isComponentInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode.directiveStart === 0) return EMPTY_ARRAY;\n  const results = [];\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const directiveInstance = lView[i];\n    if (!isComponentInstance(directiveInstance)) {\n      results.push(directiveInstance);\n    }\n  }\n  return results;\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  const {\n    directiveStart,\n    componentOffset\n  } = tNode;\n  return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode && tNode.localNames) {\n    const result = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n  return null;\n}\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n  while (lView && !(lView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n    lView = getLViewParent(lView);\n  }\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode && assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nfunction getFirstLContainer(lView) {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nfunction getNextLContainer(container) {\n  return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer;\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST];\n    }\n    const rNode = unwrapRNode(lNodeToHandle);\n    if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      renderer.destroyNode(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\nfunction createTextNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n  ngDevMode && ngDevMode.rendererSetText++;\n  renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nfunction createElementNode(renderer, name, namespace) {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  return renderer.createElement(name, namespace);\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nfunction removeViewFromContainer(tView, lView) {\n  const renderer = lView[RENDERER];\n  applyView(tView, lView, renderer, 2 /* WalkTNodeTreeAction.Detach */, null, null);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nfunction addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nfunction renderDetachView(tView, lView) {\n  applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n  while (lViewOrLContainer) {\n    let next = null;\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer[NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView, lView, lContainer, index) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n  lView[PARENT] = lContainer;\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n  // Sets the attached flag\n  lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer, lView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const insertedLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertedLContainer);\n  const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n  if (declaredComponentLView !== insertedComponentLView) {\n    // At this point the declaration-component is not same as insertion-component; this means that\n    // this is a transplanted view. Mark the declared lView as having transplanted views so that\n    // those views can participate in CD.\n    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\nfunction detachMovedView(declarationContainer, lView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const declarationViewIndex = movedViews.indexOf(lView);\n  const insertionLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertionLContainer);\n  // If the view was marked for refresh but then detached before it was checked (where the flag\n  // would be cleared and the counter decremented), we need to decrement the view counter here\n  // instead.\n  if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n    lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n    updateTransplantedViewCount(insertionLContainer, -1);\n  }\n  movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~64 /* LViewFlags.Attached */;\n  }\n\n  return viewToDetach;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nfunction destroyLView(tView, lView) {\n  if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n    const renderer = lView[RENDERER];\n    if (renderer.destroyNode) {\n      applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n    }\n    destroyViewTree(lView);\n  }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView, lView) {\n  if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= 128 /* LViewFlags.Destroyed */;\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      lView[RENDERER].destroy();\n    }\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n    // Unregister the view once everything else has been cleaned up.\n    unregisterLView(lView);\n  }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP];\n  // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n  // information appended at the end. We need to know where the end of the `TCleanup` information\n  // is, and we track this with `lastLCleanupIndex`.\n  let lastLCleanupIndex = -1;\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n        // 2 at the end of this block).\n        const targetIdx = tCleanup[i + 3];\n        ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n        if (targetIdx >= 0) {\n          // unregister\n          lCleanup[lastLCleanupIndex = targetIdx]();\n        } else {\n          // Subscription\n          lCleanup[lastLCleanupIndex = -targetIdx].unsubscribe();\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n      const instanceCleanupFn = lCleanup[i];\n      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n      instanceCleanupFn();\n    }\n    lView[CLEANUP] = null;\n  }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n  let destroyHooks;\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i]];\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1];\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j]];\n            const hook = toCall[j + 1];\n            profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n            }\n          }\n        } else {\n          profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nfunction getParentRElement(tView, tNode, lView) {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nfunction getClosestRElement(tView, tNode, lView) {\n  let parentTNode = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n  while (parentTNode !== null && parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n    const {\n      componentOffset\n    } = parentTNode;\n    if (componentOffset > -1) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const {\n        encapsulation\n      } = tView.data[parentTNode.directiveStart + componentOffset];\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {\n        return null;\n      }\n    }\n    return getNativeByTNode(parentTNode, lView);\n  }\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n  renderer.removeChild(parent, child, isHostElement);\n}\n/** Checks if an element is a `<template>` node. */\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n/**\n * Returns a native parent of a given native node.\n */\nfunction nativeParentNode(renderer, node) {\n  return renderer.parentNode(node);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nfunction nativeNextSibling(renderer, node) {\n  return renderer.nextSibling(node);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n  if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode = childTNode.parent || lView[T_HOST];\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView, tNode) {\n  if (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */);\n    const tNodeType = tNode.type;\n    if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & 4 /* TNodeType.Container */) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      let nextRNode = icuContainerIterate(tNode, lView);\n      let rNode = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n  return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const slotIdx = tNode.projection;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection[slotIdx];\n  }\n  return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex];\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n  return lContainer[NATIVE];\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  const nativeParent = nativeParentNode(renderer, rNode);\n  if (nativeParent) {\n    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n  }\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === 0 /* WalkTNodeTreeAction.Create */) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= 2 /* TNodeFlags.isProjected */;\n      }\n    }\n\n    if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n      if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 32 /* TNodeType.Icu */) {\n        const nextRNode = icuContainerIterate(tNode, lView);\n        let rNode;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 16 /* TNodeType.Projection */) {\n        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST];\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST];\n  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT];\n    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i];\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      renderer.removeClass(rNode, prop);\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n    if (value == null /** || value === undefined */) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags |= RendererStyleFlags2.Important;\n      }\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  renderer.setAttribute(element, 'style', newValue);\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n/** Sets up the static DOM attributes on an `RNode`. */\nfunction setupStaticAttributes(renderer, element, tNode) {\n  const {\n    mergedAttrs,\n    classes,\n    styles\n  } = tNode;\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy$1() {\n  if (policy$1 === undefined) {\n    policy$1 = null;\n    if (_global$1.trustedTypes) {\n      try {\n        policy$1 = _global$1.trustedTypes.createPolicy('angular', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n  return getPolicy$1()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n  return getPolicy$1()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nfunction trustedScriptURLFromString(url) {\n  return getPolicy$1()?.createScriptURL(url) || url;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nfunction newTrustedFunctionForDev(...args) {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n  if (!_global$1.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = _global$1['eval'](trustedScriptFromString(body));\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(_global$1);\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * Validation function invoked at runtime for each binding that might potentially\n * represent a security-sensitive attribute of an <iframe>.\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\n * of such attributes.\n *\n * @codeGenApi\n */\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  const element = getNativeByTNode(tNode, lView);\n  // Restrict any dynamic bindings of security-sensitive attributes/properties\n  // on an <iframe> for security reasons.\n  if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\n    const iframe = element;\n    // Unset previously applied `src` and `srcdoc` if we come across a situation when\n    // a security-sensitive attribute is set later via an attribute/property binding.\n    iframe.src = '';\n    iframe.srcdoc = trustedHTMLFromString('');\n    // Also remove the <iframe> from the document.\n    nativeRemoveNode(lView[RENDERER], iframe);\n    const errorMessage = ngDevMode && `Angular has detected that the \\`${attrName}\\` was applied ` + `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` + `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` + `as a static attribute only. \\n` + `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` + `in a template or in host bindings section.`;\n    throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\n  }\n  return attrValue;\n}\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nfunction setDocument(document) {\n  DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nfunction getDocument() {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API. Meanwhile we just return `undefined` and let the application fail.\n  return undefined;\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n    if (_global$1.trustedTypes) {\n      try {\n        policy = _global$1.trustedTypes.createPolicy('angular#unsafe-bypass', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedHTMLFromStringBypass(html) {\n  return getPolicy()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptFromStringBypass(script) {\n  return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptURLFromStringBypass(url) {\n  return getPolicy()?.createScriptURL(url) || url;\n}\nclass SafeValueImpl {\n  constructor(changingThisBreaksApplicationSecurity) {\n    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n  }\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` + ` (see ${XSS_SECURITY_URL})`;\n  }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"HTML\" /* BypassType.Html */;\n  }\n}\n\nclass SafeStyleImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Style\" /* BypassType.Style */;\n  }\n}\n\nclass SafeScriptImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Script\" /* BypassType.Script */;\n  }\n}\n\nclass SafeUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"URL\" /* BypassType.Url */;\n  }\n}\n\nclass SafeResourceUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"ResourceURL\" /* BypassType.ResourceUrl */;\n  }\n}\n\nfunction unwrapSafeValue(value) {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n  return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nfunction getInertBodyHelper(defaultDoc) {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper {\n  constructor(inertDocumentHelper) {\n    this.inertDocumentHelper = inertDocumentHelper;\n  }\n  getInertBodyElement(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.removeChild(body.firstChild);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper {\n  constructor(defaultDoc) {\n    this.defaultDoc = defaultDoc;\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n  }\n  getInertBodyElement(html) {\n    const templateEl = this.inertDocument.createElement('template');\n    templateEl.innerHTML = trustedHTMLFromString(html);\n    return templateEl;\n  }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n  } catch {\n    return false;\n  }\n}\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nfunction _sanitizeUrl(url) {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n  }\n  return 'unsafe:' + url;\n}\nfunction tagSet(tags) {\n  const res = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\nfunction merge(...sets) {\n  const res = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  constructor() {\n    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n    // because characters were re-encoded.\n    this.sanitizedSomething = false;\n    this.buf = [];\n  }\n  sanitizeChildren(el) {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current = el.firstChild;\n    let traverseContent = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        current = current.firstChild;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current);\n        }\n        let next = this.checkClobberedElement(current, current.nextSibling);\n        if (next) {\n          current = next;\n          break;\n        }\n        current = this.checkClobberedElement(current, current.parentNode);\n      }\n    }\n    return this.buf.join('');\n  }\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  startElement(element) {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n  endElement(current) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n  chars(chars) {\n    this.buf.push(encodeEntities(chars));\n  }\n  checkClobberedElement(node, nextNode) {\n    if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n    const hi = match.charCodeAt(0);\n    const low = match.charCodeAt(1);\n    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';\n  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n    return '&#' + match.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n  let inertBodyElement = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n    }\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\nfunction getTemplateContent(el) {\n  return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ? el.content : null;\n}\nfunction isTemplateElement(el) {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext;\n(function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantHtml(html) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction validateAgainstEventAttributes(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction getSanitizer() {\n  const lView = getLView();\n  return lView && lView[SANITIZER];\n}\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nclass InjectionToken {\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(_desc, options) {\n    this._desc = _desc;\n    /** @internal */\n    this.ngMetadataName = 'InjectionToken';\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      this.__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory\n      });\n    }\n  }\n  /**\n   * @internal\n   */\n  get multi() {\n    return this;\n  }\n  toString() {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nconst ENVIRONMENT_INITIALIZER = new InjectionToken('ENVIRONMENT_INITIALIZER');\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nconst INJECTOR = new InjectionToken('INJECTOR',\n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\n\nconst INJECTOR_DEF_TYPES = new InjectionToken('INJECTOR_DEF_TYPES');\nclass NullInjector {\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component in a component injector.\n */\nfunction makeEnvironmentProviders(providers) {\n  return {\n    ɵproviders: providers\n  };\n}\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nfunction importProvidersFrom(...sources) {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources),\n    ɵfromNgModule: true\n  };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n  const providersOut = [];\n  const dedup = new Set(); // already seen types\n  let injectorTypesWithProviders;\n  deepForEach(sources, source => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef$1(source);\n      if (cmpDef?.standalone) {\n        throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n      }\n    }\n    // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n    const internalSource = source;\n    if (walkProviderTree(internalSource, providersOut, [], dedup)) {\n      injectorTypesWithProviders || (injectorTypesWithProviders = []);\n      injectorTypesWithProviders.push(internalSource);\n    }\n  });\n  // Collect all providers from `ModuleWithProviders` types.\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, providersOut);\n  }\n  return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, providersOut) {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {\n      ngModule,\n      providers\n    } = typesWithProviders[i];\n    deepForEachProvider(providers, provider => {\n      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n      providersOut.push(provider);\n    });\n  }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nfunction walkProviderTree(container, providersOut, parents, dedup) {\n  container = resolveForwardRef(container);\n  if (!container) return false;\n  // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n  let defType = null;\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef$1(container);\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule = container.ngModule;\n    injDef = getInjectorDef(ngModule);\n    if (injDef) {\n      defType = ngModule;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container;\n  }\n  // Check for circular dependencies.\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify);\n    throwCyclicDependencyError(defName, path);\n  }\n  // Check for multiple imports of the same module\n  const isDuplicate = dedup.has(defType);\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n    dedup.add(defType);\n    if (cmpDef.dependencies) {\n      const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n      for (const dep of deps) {\n        walkProviderTree(dep, providersOut, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedup.add(defType);\n      let importTypesWithProviders;\n      try {\n        deepForEach(injDef.imports, imported => {\n          if (walkProviderTree(imported, providersOut, parents, dedup)) {\n            importTypesWithProviders || (importTypesWithProviders = []);\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, providersOut);\n      }\n    }\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType());\n      // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n      providersOut.push(\n      // Provider to create `defType` using its factory.\n      {\n        provide: defType,\n        useFactory: factory,\n        deps: EMPTY_ARRAY\n      },\n      // Make this `defType` available to an internal logic that calculates injector scope.\n      {\n        provide: INJECTOR_DEF_TYPES,\n        useValue: defType,\n        multi: true\n      },\n      // Provider to eagerly instantiate `defType` via `ENVIRONMENT_INITIALIZER`.\n      {\n        provide: ENVIRONMENT_INITIALIZER,\n        useValue: () => ɵɵinject(defType),\n        multi: true\n      } //\n      );\n    }\n    // Next, include providers listed on the definition itself.\n    const defProviders = injDef.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container;\n      deepForEachProvider(defProviders, provider => {\n        ngDevMode && validateProvider(provider, defProviders, injectorType);\n        providersOut.push(provider);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n  return defType !== container && container.providers !== undefined;\n}\nfunction validateProvider(provider, providers, containerType) {\n  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {\n    return;\n  }\n  // Here we expect the provider to be a `useClass` provider (by elimination).\n  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\nfunction deepForEachProvider(providers, fn) {\n  for (let provider of providers) {\n    if (isEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      deepForEachProvider(provider, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\nconst USE_VALUE$1 = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isValueProvider(value) {\n  return value !== null && typeof value == 'object' && USE_VALUE$1 in value;\n}\nfunction isExistingProvider(value) {\n  return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n  return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n  return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n  return !!value.useClass;\n}\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nconst INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR$1 = undefined;\nfunction getNullInjector() {\n  if (NULL_INJECTOR$1 === undefined) {\n    NULL_INJECTOR$1 = new NullInjector();\n  }\n  return NULL_INJECTOR$1;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n */\nclass EnvironmentInjector {}\nclass R3Injector extends EnvironmentInjector {\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  constructor(providers, parent, source, scopes) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.scopes = scopes;\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n     * to prevent further searches.\n     */\n    this.records = new Map();\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     */\n    this._ngOnDestroyHooks = new Set();\n    this._onDestroyHooks = [];\n    this._destroyed = false;\n    // Start off by creating Records for every provider.\n    forEachSingleProvider(providers, provider => this.processProvider(provider));\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n    // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    }\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE);\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value);\n    }\n    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES.multi, EMPTY_ARRAY, InjectFlags.Self));\n  }\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  destroy() {\n    this.assertNotDestroyed();\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n      for (const hook of this._onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this._ngOnDestroyHooks.clear();\n      this.injectorDefTypes.clear();\n      this._onDestroyHooks.length = 0;\n    }\n  }\n  onDestroy(callback) {\n    this._onDestroyHooks.push(callback);\n  }\n  runInContext(fn) {\n    this.assertNotDestroyed();\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    this.assertNotDestroyed();\n    flags = convertToBitFlags(flags);\n    // Set the injection context.\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e) {\n      if (e.name === 'NullInjectorError') {\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n    }\n  }\n  /** @internal */\n  resolveInjectorInitializers() {\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER.multi, EMPTY_ARRAY, InjectFlags.Self);\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' + `(expected an array, but got ${typeof initializers}). ` + 'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n      }\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  toString() {\n    const tokens = [];\n    const records = this.records;\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n  assertNotDestroyed() {\n    if (this._destroyed) {\n      throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n    }\n  }\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  processProvider(provider) {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider);\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord.multi);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi.push(provider);\n    } else {\n      const existing = this.records.get(token);\n      if (ngDevMode && existing && existing.multi !== undefined) {\n        throwMixedMultiProviderError();\n      }\n    }\n    this.records.set(token, record);\n  }\n  hydrate(token, record) {\n    if (ngDevMode && record.value === CIRCULAR) {\n      throwCyclicDependencyError(stringify(token));\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      record.value = record.factory();\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this._ngOnDestroyHooks.add(record.value);\n    }\n    return record.value;\n  }\n  injectableDefInScope(def) {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || this.scopes.has(providedIn);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n  if (factory !== null) {\n    return factory;\n  }\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n  // There was no way to resolve a factory for this token.\n  throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    const args = newArray(paramLength, '?');\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n  }\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token);\n  } else {\n    return () => new token();\n  }\n}\nfunction providerToRecord(provider) {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n  let factory = undefined;\n  if (ngDevMode && isEnvironmentProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\nfunction makeRecord(factory, value, multi = false) {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined\n  };\n}\nfunction hasDeps(value) {\n  return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n  return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;\n}\nfunction forEachSingleProvider(providers, fn) {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (provider && isEnvironmentProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nclass ComponentRef$1 {}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactory$1 {}\nfunction noComponentFactoryError(component) {\n  const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  error[ERROR_COMPONENT] = component;\n  return error;\n}\nconst ERROR_COMPONENT = 'ngComponent';\nfunction getComponent$1(error) {\n  return error[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n  resolveComponentFactory(component) {\n    throw noComponentFactoryError(component);\n  }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactoryResolver$1 {}\nComponentFactoryResolver$1.NULL = /* @__PURE__ */new _NullComponentFactoryResolver();\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nfunction injectElementRef() {\n  return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(tNode, lView) {\n  return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n  constructor(nativeElement) {\n    this.nativeElement = nativeElement;\n  }\n}\n/**\n * @internal\n * @nocollapse\n */\nElementRef.__NG_ELEMENT_ID__ = injectElementRef;\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nfunction unwrapElementRef(value) {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nclass RendererFactory2 {}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nclass Renderer2 {}\n/**\n * @internal\n * @nocollapse\n */\nRenderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();\n/** Injects a Renderer2 for the current component. */\nfunction injectRenderer2() {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nclass Sanitizer {}\n/** @nocollapse */\nSanitizer.ɵprov = ɵɵdefineInjectable({\n  token: Sanitizer,\n  providedIn: 'root',\n  factory: () => null\n});\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nclass Version {\n  constructor(full) {\n    this.full = full;\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n}\n/**\n * @publicApi\n */\nconst VERSION = new Version('15.2.9');\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nfunction wrappedError(message, originalError) {\n  const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n  const error = Error(msg);\n  error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\nfunction getOriginalError(error) {\n  return error[ERROR_ORIGINAL_ERROR];\n}\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nclass ErrorHandler {\n  constructor() {\n    /**\n     * @internal\n     */\n    this._console = console;\n  }\n  handleError(error) {\n    const originalError = this._findOriginalError(error);\n    this._console.error('ERROR', error);\n    if (originalError) {\n      this._console.error('ORIGINAL ERROR', originalError);\n    }\n  }\n  /** @internal */\n  _findOriginalError(error) {\n    let e = error && getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n    return e || null;\n  }\n}\nfunction normalizeDebugBindingName(name) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef$1(type);\n  if (!componentDef.standalone) {\n    throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` + `but Angular expects to have a standalone component here. ` + `Please make sure the ${stringifyForError(type)} component has ` + `the \\`standalone: true\\` flag in the decorator.`);\n  }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n  if (!getComponentDef$1(type)) {\n    throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` + `make sure it has the \\`@Component\\` decorator.`);\n  }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n  throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` + `${stringifyForError(first)} and ` + `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {\n  const field = propName ? ` for '${propName}'` : '';\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;\n  if (creationMode) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook?`;\n  }\n  throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix,\n    newValue = prefix;\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n  return {\n    propName,\n    oldValue,\n    newValue\n  };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n    }\n    // metadata for property binding\n    return {\n      propName: metadata,\n      oldValue,\n      newValue\n    };\n  }\n  // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n    const meta = tData[idx];\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n      // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n      if (matches && matches.length - 1 > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n  return {\n    propName: undefined,\n    oldValue,\n    newValue\n  };\n}\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {\n  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n  // It is strange to me that sometimes the class information comes in form of `class` attribute\n  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n  // if that is the right behavior.\n  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  // Indicates whether we are processing value from the implicit\n  // attribute section (i.e. before the first marker in the array).\n  let isImplicitAttrsSection = true;\n  while (i < attrs.length) {\n    let item = attrs[i++];\n    if (typeof item === 'string' && isImplicitAttrsSection) {\n      const value = attrs[i++];\n      if (isProjectionMode && item === 'class') {\n        // We found a `class` attribute in the implicit attribute section,\n        // check if it matches the value of the `cssClassToMatch` argument.\n        if (classIndexOf(value.toLowerCase(), cssClassToMatch, 0) !== -1) {\n          return true;\n        }\n      }\n    } else if (item === 1 /* AttributeMarker.Classes */) {\n      // We found the classes section. Start searching for the class.\n      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n        // while we have strings\n        if (item.toLowerCase() === cssClassToMatch) return true;\n      }\n      return false;\n    } else if (typeof item === 'number') {\n      // We've came across a first marker, which indicates\n      // that the implicit attribute section is over.\n      isImplicitAttrsSection = false;\n    }\n  }\n  return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nfunction isInlineTemplate(tNode) {\n  return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n  const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode = 4 /* SelectorFlags.ELEMENT */;\n  const nodeAttrs = tNode.attrs || [];\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = current | mode & 1 /* SelectorFlags.NOT */;\n      continue;\n    }\n    if (skipToNextSelector) continue;\n    if (mode & 4 /* SelectorFlags.ELEMENT */) {\n      mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = mode & 8 /* SelectorFlags.CLASS */ ? current : selector[++i];\n      // special case for matching against classes when a tNode has been instantiated with\n      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n      if (mode & 8 /* SelectorFlags.CLASS */ && tNode.attrs !== null) {\n        if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n        continue;\n      }\n      const attrName = mode & 8 /* SelectorFlags.CLASS */ ? 'class' : current;\n      const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n        }\n        const compareAgainstClassName = mode & 8 /* SelectorFlags.CLASS */ ? nodeAttrValue : null;\n        if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n  return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n  return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n  if (attrs === null) return -1;\n  let i = 0;\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n        bindingsMode = true;\n      } else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1];\n    }\n  }\n  return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n  let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nfunction isSelectorInSelectorList(selector, list) {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n  let result = selector[0];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n        const attrValue = selector[++i];\n        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & 8 /* SelectorFlags.CLASS */) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nfunction stringifyCSSSelectorList(selectorList) {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n  const attrs = [];\n  const classes = [];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i]);\n        }\n      } else if (mode === 8 /* SelectorFlags.CLASS */) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  return {\n    attrs,\n    classes\n  };\n}\n\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {\n  __brand__: 'NO_CHANGE'\n} : {};\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nfunction ɵɵadvance(delta) {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n  ngDevMode && assertIndexInDeclRange(lView, index);\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n      }\n    }\n  }\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreDiEnv = {\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef\n};\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nfunction compileInjectable(type, meta) {\n  let ngInjectableDef = null;\n  let ngFactoryDef = null;\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n        return ngInjectableDef;\n      }\n    });\n  }\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\nconst USE_VALUE = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isUseClassProvider(meta) {\n  return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n  return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n  return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n  return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta = srcMeta || {\n    providedIn: null\n  };\n  const compilerMeta = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nclass Injector {\n  static create(options, parent) {\n    if (Array.isArray(options)) {\n      return createInjector({\n        name: ''\n      }, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({\n        name\n      }, options.parent, options.providers, name);\n    }\n  }\n}\nInjector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\nInjector.NULL = /* @__PURE__ */new NullInjector();\n/** @nocollapse */\nInjector.ɵprov = ɵɵdefineInjectable({\n  token: Injector,\n  providedIn: 'any',\n  factory: () => ɵɵinject(INJECTOR)\n});\n/**\n * @internal\n * @nocollapse\n */\nInjector.__NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\n\nfunction findFirstClosedCycle(keys) {\n  const res = [];\n  for (let i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\nfunction constructResolvingPath(keys) {\n  if (keys.length > 1) {\n    const reversed = findFirstClosedCycle(keys.slice().reverse());\n    const tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n  return '';\n}\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n  const keys = [key];\n  const errMsg = constructResolvingMessage(keys);\n  const error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);\n  error.addKey = addKey;\n  error.keys = keys;\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\nfunction addKey(injector, key) {\n  this.injectors.push(injector);\n  this.keys.push(key);\n  // Note: This updated message won't be reflected in the `.stack` property\n  this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nfunction noProviderError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    const first = stringify(keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nfunction cyclicDependencyError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n  return injectionError(injector, key, function (keys) {\n    const first = stringify(keys[0].token);\n    return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n  }, originalException);\n}\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nfunction invalidProviderError(provider) {\n  return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\nfunction noAnnotationError(typeOrFunc, params) {\n  const signature = [];\n  for (let i = 0, ii = params.length; i < ii; i++) {\n    const parameter = params[i];\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n  return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' + stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\nfunction outOfBoundsError(index) {\n  return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nclass ReflectiveKey {\n  /**\n   * Private\n   */\n  constructor(token, id) {\n    this.token = token;\n    this.id = id;\n    if (!token) {\n      throw new RuntimeError(208 /* RuntimeErrorCode.MISSING_INJECTION_TOKEN */, ngDevMode && 'Token must be defined!');\n    }\n    this.displayName = stringify(this.token);\n  }\n  /**\n   * Retrieves a `Key` for a token.\n   */\n  static get(token) {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n  /**\n   * @returns the number of keys registered in the system.\n   */\n  static get numberOfKeys() {\n    return _globalKeyRegistry.numberOfKeys;\n  }\n}\nclass KeyRegistry {\n  constructor() {\n    this._allKeys = new Map();\n  }\n  get(token) {\n    if (token instanceof ReflectiveKey) return token;\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token);\n    }\n    const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n  get numberOfKeys() {\n    return this._allKeys.size;\n  }\n}\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n  constructor(key, optional, visibility) {\n    this.key = key;\n    this.optional = optional;\n    this.visibility = visibility;\n  }\n  static fromKey(key) {\n    return new ReflectiveDependency(key, false, null);\n  }\n}\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n  constructor(key, resolvedFactories, multiProvider) {\n    this.key = key;\n    this.resolvedFactories = resolvedFactories;\n    this.multiProvider = multiProvider;\n    this.resolvedFactory = this.resolvedFactories[0];\n  }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\nclass ResolvedReflectiveFactory {\n  constructor(\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  factory,\n  /**\n   * Arguments (dependencies) to the `factory` function.\n   */\n  dependencies) {\n    this.factory = factory;\n    this.dependencies = dependencies;\n  }\n}\n/**\n * Resolve a single provider.\n */\nfunction resolveReflectiveFactory(provider) {\n  let factoryFn;\n  let resolvedDeps;\n  if (provider.useClass) {\n    const useClass = resolveForwardRef(provider.useClass);\n    factoryFn = getReflect().factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = aliasInstance => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n */\nfunction resolveReflectiveProvider(provider) {\n  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n */\nfunction resolveReflectiveProviders(providers) {\n  const normalized = _normalizeProviders(providers, []);\n  const resolved = normalized.map(resolveReflectiveProvider);\n  const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n  for (let i = 0; i < providers.length; i++) {\n    const provider = providers[i];\n    const existing = normalizedProvidersMap.get(provider.key.id);\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (let j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      let resolvedProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\nfunction _normalizeProviders(providers, res) {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push({\n        provide: b,\n        useClass: b\n      });\n    } else if (b && typeof b == 'object' && b.provide !== undefined) {\n      res.push(b);\n    } else if (Array.isArray(b)) {\n      _normalizeProviders(b, res);\n    } else {\n      throw invalidProviderError(b);\n    }\n  });\n  return res;\n}\nfunction constructDependencies(typeOrFunc, dependencies) {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    const params = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\nfunction _dependenciesFor(typeOrFunc) {\n  const params = getReflect().parameters(typeOrFunc);\n  if (!params) return [];\n  if (params.some(p => p == null)) {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\nfunction _extractToken(typeOrFunc, metadata, params) {\n  let token = null;\n  let optional = false;\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata.token, optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n  let visibility = null;\n  for (let i = 0; i < metadata.length; ++i) {\n    const paramMetadata = metadata[i];\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata.token;\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    } else if (paramMetadata instanceof InjectionToken) {\n      token = paramMetadata;\n    }\n  }\n  token = resolveForwardRef(token);\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n}\nfunction _createDependency(token, optional, visibility) {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n// Threshold for the dynamic version\nconst UNDEFINED = {};\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * TODO: delete in v14.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\nclass ReflectiveInjector {\n  /**\n   * Turns an array of provider definitions into an array of resolved providers.\n   *\n   * A resolution is a process of flattening multiple nested arrays and converting individual\n   * providers into an array of `ResolvedReflectiveProvider`s.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n   *\n   * expect(providers.length).toEqual(2);\n   *\n   * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n   * expect(providers[0].key.displayName).toBe(\"Car\");\n   * expect(providers[0].dependencies.length).toEqual(1);\n   * expect(providers[0].factory).toBeDefined();\n   *\n   * expect(providers[1].key.displayName).toBe(\"Engine\");\n   * });\n   * ```\n   *\n   */\n  static resolve(providers) {\n    return resolveReflectiveProviders(providers);\n  }\n  /**\n   * Resolves an array of providers and creates an injector from those providers.\n   *\n   * The passed-in providers can be an array of `Type`, `Provider`,\n   * or a recursive array of more providers.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n  static resolveAndCreate(providers, parent) {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n  }\n  /**\n   * Creates an injector from previously resolved providers.\n   *\n   * This API is the recommended way to construct injectors in performance-sensitive parts.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, Engine]);\n   * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n  static fromResolvedProviders(providers, parent) {\n    return new ReflectiveInjector_(providers, parent);\n  }\n}\nclass ReflectiveInjector_ {\n  /**\n   * Private\n   */\n  constructor(_providers, _parent) {\n    /** @internal */\n    this._constructionCounter = 0;\n    this._providers = _providers;\n    this.parent = _parent || null;\n    const len = _providers.length;\n    this.keyIds = [];\n    this.objs = [];\n    for (let i = 0; i < len; i++) {\n      this.keyIds[i] = _providers[i].key.id;\n      this.objs[i] = UNDEFINED;\n    }\n  }\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n  }\n  resolveAndCreateChild(providers) {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return this.createChildFromResolved(ResolvedReflectiveProviders);\n  }\n  createChildFromResolved(providers) {\n    const inj = new ReflectiveInjector_(providers);\n    inj.parent = this;\n    return inj;\n  }\n  resolveAndInstantiate(provider) {\n    return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n  }\n  instantiateResolved(provider) {\n    return this._instantiateProvider(provider);\n  }\n  getProviderAtIndex(index) {\n    if (index < 0 || index >= this._providers.length) {\n      throw outOfBoundsError(index);\n    }\n    return this._providers[index];\n  }\n  /** @internal */\n  _new(provider) {\n    if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n      throw cyclicDependencyError(this, provider.key);\n    }\n    return this._instantiateProvider(provider);\n  }\n  _getMaxNumberOfObjects() {\n    return this.objs.length;\n  }\n  _instantiateProvider(provider) {\n    if (provider.multiProvider) {\n      const res = [];\n      for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n      }\n      return res;\n    } else {\n      return this._instantiate(provider, provider.resolvedFactories[0]);\n    }\n  }\n  _instantiate(provider, ResolvedReflectiveFactory) {\n    const factory = ResolvedReflectiveFactory.factory;\n    let deps;\n    try {\n      deps = ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n    } catch (e) {\n      if (e.addKey) {\n        e.addKey(this, provider.key);\n      }\n      throw e;\n    }\n    let obj;\n    try {\n      obj = factory(...deps);\n    } catch (e) {\n      throw instantiationError(this, e, e.stack, provider.key);\n    }\n    return obj;\n  }\n  _getByReflectiveDependency(dep) {\n    return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n  }\n  _getByKey(key, visibility, notFoundValue) {\n    if (key === ReflectiveInjector_.INJECTOR_KEY) {\n      return this;\n    }\n    if (visibility instanceof Self) {\n      return this._getByKeySelf(key, notFoundValue);\n    } else {\n      return this._getByKeyDefault(key, notFoundValue, visibility);\n    }\n  }\n  _getObjByKeyId(keyId) {\n    for (let i = 0; i < this.keyIds.length; i++) {\n      if (this.keyIds[i] === keyId) {\n        if (this.objs[i] === UNDEFINED) {\n          this.objs[i] = this._new(this._providers[i]);\n        }\n        return this.objs[i];\n      }\n    }\n    return UNDEFINED;\n  }\n  /** @internal */\n  _throwOrNull(key, notFoundValue) {\n    if (notFoundValue !== THROW_IF_NOT_FOUND) {\n      return notFoundValue;\n    } else {\n      throw noProviderError(this, key);\n    }\n  }\n  /** @internal */\n  _getByKeySelf(key, notFoundValue) {\n    const obj = this._getObjByKeyId(key.id);\n    return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);\n  }\n  /** @internal */\n  _getByKeyDefault(key, notFoundValue, visibility) {\n    let inj;\n    if (visibility instanceof SkipSelf) {\n      inj = this.parent;\n    } else {\n      inj = this;\n    }\n    while (inj instanceof ReflectiveInjector_) {\n      const inj_ = inj;\n      const obj = inj_._getObjByKeyId(key.id);\n      if (obj !== UNDEFINED) return obj;\n      inj = inj_.parent;\n    }\n    if (inj !== null) {\n      return inj.get(key.token, notFoundValue);\n    } else {\n      return this._throwOrNull(key, notFoundValue);\n    }\n  }\n  get displayName() {\n    const providers = _mapProviders(this, b => ' \"' + b.key.displayName + '\" ').join(', ');\n    return `ReflectiveInjector(providers: [${providers}])`;\n  }\n  toString() {\n    return this.displayName;\n  }\n}\nReflectiveInjector_.INJECTOR_KEY = /* @__PURE__ */ReflectiveKey.get(Injector);\nfunction _mapProviders(injector, fn) {\n  const res = [];\n  for (let i = 0; i < injector._providers.length; ++i) {\n    res[i] = fn(injector.getProviderAtIndex(i));\n  }\n  return res;\n}\n\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\n/**\n * This file should not be necessary because node resolution should just default to `./di/index`!\n *\n * However it does not seem to work and it breaks:\n *  - //packages/animations/browser/test:test_web_chromium-local\n *  - //packages/compiler-cli/test:extract_i18n\n *  - //packages/compiler-cli/test:ngc\n *  - //packages/compiler-cli/test:perform_watch\n *  - //packages/compiler-cli/test/diagnostics:check_types\n *  - //packages/compiler-cli/test/transformers:test\n *  - //packages/compiler/test:test\n *  - //tools/public_api_guard:core_api\n *\n * Remove this file once the above is solved or wait until `ngc` is deleted and then it should be\n * safe to delete this file.\n */\n\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactory() {\n  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView, lView) {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i];\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i];\n        const hostBindingFn = hostBindingOpCodes[++i];\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        hostBindingFn(2 /* RenderFlags.Update */, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    for (let i = 0; i < contentQueries.length; i += 2) {\n      const queryStartIdx = contentQueries[i];\n      const directiveDefIdx = contentQueries[i + 1];\n      if (directiveDefIdx !== -1) {\n        const directiveDef = tView.data[directiveDefIdx];\n        ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n        ngDevMode && assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n        setCurrentQueryIndex(queryStartIdx);\n        directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n      }\n    }\n  }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction refreshChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    refreshComponent(hostLView, components[i]);\n  }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector, embeddedViewInjector) {\n  const lView = tView.blueprint.slice();\n  lView[HOST] = host;\n  lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 64 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */;\n  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) {\n    lView[FLAGS] |= 1024 /* LViewFlags.HasEmbeddedViewInjector */;\n  }\n\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n  lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n  ngDevMode && assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n  return lView;\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index];\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= 32 /* TNodeFlags.isDetached */;\n    }\n  } else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n  return tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n//////////////////////////\n//// Render\n//////////////////////////\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nfunction renderView(tView, lView, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n    }\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n    }\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n    }\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n    leaveView();\n  }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nfunction refreshView(tView, lView, templateFn, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  const flags = lView[FLAGS];\n  if ((flags & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */) return;\n  enterView(lView);\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  try {\n    resetPreOrderHookFlags(lView);\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n    }\n    const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n        }\n        incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n      }\n    }\n    // First mark transplanted views that are declared in this lView as needing a refresh at their\n    // insertion points. This is needed to avoid the situation where the template is defined in this\n    // `LView` but its declaration appears after the insertion component.\n    markTransplantedViewsForRefresh(lView);\n    refreshEmbeddedViews(lView);\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n        }\n\n        incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView);\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      refreshChildComponents(lView, components);\n    }\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n    }\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n        }\n\n        incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n      }\n    }\n\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      lView[FLAGS] &= ~(32 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n    }\n\n    if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n      lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n      updateTransplantedViewCount(lView[PARENT], -1);\n    }\n  } finally {\n    leaveView();\n  }\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n    const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n    profiler(preHookType, context);\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n    const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n    profiler(postHookType, context);\n  }\n}\n//////////////////////////\n//// Element\n//////////////////////////\nfunction executeContentQueries(tView, tNode, lView) {\n  if (isContentQueryHost(tNode)) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n      const def = tView.data[directiveIndex];\n      if (def.contentQueries) {\n        def.contentQueries(1 /* RenderFlags.Create */, lView[directiveIndex], directiveIndex);\n      }\n    }\n  }\n}\n/**\n * Creates directive instances.\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n  if (!getBindingsEnabled()) return;\n  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n  if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1];\n      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nfunction getOrCreateComponentTView(def) {\n  const tView = def.tView;\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n  }\n  return tView;\n}\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n  const blueprint = [];\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n  return blueprint;\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation) {\n  // When using native Shadow DOM, do not clear host element to allow native slot projection\n  const preserveContent = encapsulation === ViewEncapsulation.ShadowDom;\n  return renderer.selectRootElement(elementOrSelector, preserveContent);\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  if (context === null) {\n    // If context is null that this is instance specific callback. These callbacks can only be\n    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n    lCleanup.push(cleanupFn);\n  } else {\n    lCleanup.push(context);\n    if (tView.firstCreatePass) {\n      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n    }\n  }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags: 0,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: undefined,\n    inputs: null,\n    outputs: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0,\n    styleBindings: 0\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n/**\n * Generates the `PropertyAliases` data structure from the provided input/output mapping.\n * @param aliasMap Input/output mapping from the directive definition.\n * @param directiveIndex Index of the directive.\n * @param propertyAliases Object in which to store the results.\n * @param hostDirectiveAliasMap Object used to alias or filter out properties for host directives.\n * If the mapping is provided, it'll act as an allowlist, as well as a mapping of what public\n * name inputs/outputs should be exposed under.\n */\nfunction generatePropertyAliases(aliasMap, directiveIndex, propertyAliases, hostDirectiveAliasMap) {\n  for (let publicName in aliasMap) {\n    if (aliasMap.hasOwnProperty(publicName)) {\n      propertyAliases = propertyAliases === null ? {} : propertyAliases;\n      const internalName = aliasMap[publicName];\n      // If there are no host directive mappings, we want to remap using the alias map from the\n      // definition itself. If there is an alias map, it has two functions:\n      // 1. It serves as an allowlist of bindings that are exposed by the host directives. Only the\n      // ones inside the host directive map will be exposed on the host.\n      // 2. The public name of the property is aliased using the host directive alias map, rather\n      // than the alias map from the definition.\n      if (hostDirectiveAliasMap === null) {\n        addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName);\n      } else if (hostDirectiveAliasMap.hasOwnProperty(publicName)) {\n        addPropertyAlias(propertyAliases, directiveIndex, hostDirectiveAliasMap[publicName], internalName);\n      }\n    }\n  }\n  return propertyAliases;\n}\nfunction addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName) {\n  if (propertyAliases.hasOwnProperty(publicName)) {\n    propertyAliases[publicName].push(directiveIndex, internalName);\n  } else {\n    propertyAliases[publicName] = [directiveIndex, internalName];\n  }\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const tViewData = tView.data;\n  const tNodeAttrs = tNode.attrs;\n  const inputsFromAttrs = [];\n  let inputsStore = null;\n  let outputsStore = null;\n  for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n    const directiveDef = tViewData[directiveIndex];\n    const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;\n    const aliasedInputs = aliasData ? aliasData.inputs : null;\n    const aliasedOutputs = aliasData ? aliasData.outputs : null;\n    inputsStore = generatePropertyAliases(directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);\n    outputsStore = generatePropertyAliases(directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);\n    // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n    // should be set for inline templates.\n    const initialInputs = inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) : null;\n    inputsFromAttrs.push(initialInputs);\n  }\n  if (inputsStore !== null) {\n    if (inputsStore.hasOwnProperty('class')) {\n      tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\n    }\n\n    if (inputsStore.hasOwnProperty('style')) {\n      tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\n    }\n  }\n\n  tNode.initialInputs = inputsFromAttrs;\n  tNode.inputs = inputsStore;\n  tNode.outputs = outputsStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name) {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\nfunction elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  const element = getNativeByTNode(tNode, lView);\n  let inputData = tNode.inputs;\n  let dataValue;\n  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n    setInputsForProperty(tView, lView, dataValue, propName, value);\n    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);\n    if (ngDevMode) {\n      setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n    }\n  } else if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    propName = mapPropName(propName);\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n      ngDevMode.rendererSetProperty++;\n    }\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n    renderer.setProperty(element, propName, value);\n  } else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n    childComponentLView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n  }\n}\n\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (type & 3 /* TNodeType.AnyRNode */) {\n    if (value == null) {\n      renderer.removeAttribute(element, attrName);\n    } else {\n      renderer.setAttribute(element, attrName, debugValue);\n    }\n  } else {\n    const textContent = escapeCommentText(`bindings=${JSON.stringify({\n      [attrName]: debugValue\n    }, null, 2)}`);\n    renderer.setValue(element, textContent);\n  }\n}\nfunction setNgReflectProperties(lView, element, type, dataValue, value) {\n  if (type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */)) {\n    /**\n     * dataValue is an array containing runtime input or output names for the directives:\n     * i+0: directive instance index\n     * i+1: privateName\n     *\n     * e.g. [0, 'change', 'change-minified']\n     * we want to set the reflected property with the privateName: dataValue[i+1]\n     */\n    for (let i = 0; i < dataValue.length; i += 2) {\n      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n    }\n  }\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n  // tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n  if (getBindingsEnabled()) {\n    const exportsMap = localRefs === null ? null : {\n      '': -1\n    };\n    const matchResult = findDirectiveDefMatches(tView, tNode);\n    let directiveDefs;\n    let hostDirectiveDefs;\n    if (matchResult === null) {\n      directiveDefs = hostDirectiveDefs = null;\n    } else {\n      [directiveDefs, hostDirectiveDefs] = matchResult;\n    }\n    if (directiveDefs !== null) {\n      initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);\n    }\n    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n}\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // Publishes the directive types to DI so they can be injected. Needs to\n  // happen in a separate pass before the TNode flags have been initialized.\n  for (let i = 0; i < directives.length; i++) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);\n  }\n  initTNodeFlags(tNode, tView.data.length, directives.length);\n  // When the same token is provided by several directives on the same node, some rules apply in\n  // the viewEngine:\n  // - viewProviders have priority over providers\n  // - the last directive in NgModule.declarations has priority over the previous one\n  // So to match these rules, the order in which providers are added in the arrays is very\n  // important.\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    if (def.providersResolver) def.providersResolver(def);\n  }\n  let preOrderHooksFound = false;\n  let preOrderCheckHooksFound = false;\n  let directiveIdx = allocExpando(tView, lView, directives.length, null);\n  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    // Merge the attrs in the order of matches. This assumes that the first directive is the\n    // component itself, so that the component has the least priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n    saveNameToExportMap(directiveIdx, def, exportsMap);\n    if (def.contentQueries !== null) tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\n    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\n    const lifeCycleHooks = def.type.prototype;\n    // Only push a node index into the preOrderHooks array if this is the first\n    // pre-order hook found on this node.\n    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n      // We will push the actual hook function into this array later during dir instantiation.\n      // We cannot do it now because we must ensure hooks are registered in the same\n      // order that directives are created (i.e. injection order).\n      (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(tNode.index);\n      preOrderHooksFound = true;\n    }\n    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n      (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(tNode.index);\n      preOrderCheckHooksFound = true;\n    }\n    directiveIdx++;\n  }\n  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [];\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode, native) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  // The component view needs to be created before creating the node injector\n  // since it is used to inject some special symbols like `ChangeDetectorRef`.\n  if (isComponentHost(tNode)) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);\n  }\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n  attachPatchData(native, lView);\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i];\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n    }\n    if (isComponentDef(def)) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n    }\n  }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex];\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n  if (def.hostBindings !== null) {\n    def.hostBindings(1 /* RenderFlags.Create */, directive);\n  }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  const registry = tView.directiveRegistry;\n  let matches = null;\n  let hostDirectiveDefs = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i];\n      if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */false)) {\n        matches || (matches = []);\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` + `Please use a different tag to activate the ${stringify(def.type)} component.`);\n            if (isComponentHost(tNode)) {\n              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\n            }\n          }\n          // Components are inserted at the front of the matches array so that their lifecycle\n          // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n          // compatibility. This logic doesn't make sense with host directives, because it\n          // would allow the host directives to undo any overrides the host may have made.\n          // To handle this case, the host directives of components are inserted at the beginning\n          // of the array, followed by the component. As such, the insertion order is as follows:\n          // 1. Host directives belonging to the selector-matched component.\n          // 2. Selector-matched component.\n          // 3. Host directives belonging to selector-matched directives.\n          // 4. Selector-matched directives.\n          if (def.findHostDirectiveDefs !== null) {\n            const hostDirectiveMatches = [];\n            hostDirectiveDefs = hostDirectiveDefs || new Map();\n            def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);\n            // Add all host directives declared on this component, followed by the component itself.\n            // Host directives should execute first so the host has a chance to override changes\n            // to the DOM made by them.\n            matches.unshift(...hostDirectiveMatches, def);\n            // Component is offset starting from the beginning of the host directives array.\n            const componentOffset = hostDirectiveMatches.length;\n            markAsComponentHost(tView, tNode, componentOffset);\n          } else {\n            // No host directives on this component, just add the\n            // component def to the beginning of the matches.\n            matches.unshift(def);\n            markAsComponentHost(tView, tNode, 0);\n          }\n        } else {\n          // Append any host directives to the matches first.\n          hostDirectiveDefs = hostDirectiveDefs || new Map();\n          def.findHostDirectiveDefs?.(def, matches, hostDirectiveDefs);\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches === null ? null : [matches, hostDirectiveDefs];\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n  hostTNode.componentOffset = componentOffset;\n  (tView.components ?? (tView.components = [])).push(hostTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n  if (localRefs) {\n    const localNames = tNode.localNames = [];\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null) throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n  tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n  // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\nfunction addComponentLogic(lView, hostTNode, def) {\n  const native = getNativeByTNode(hostTNode, lView);\n  const tView = getOrCreateComponentTView(def);\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null, null));\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  lView[hostTNode.index] = componentView;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` + `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView);\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n    renderer.setAttribute(element, name, strValue, namespace);\n  }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n  const initialInputs = initialInputData[directiveIndex];\n  if (initialInputs !== null) {\n    const setInput = def.setInput;\n    for (let i = 0; i < initialInputs.length;) {\n      const publicName = initialInputs[i++];\n      const privateName = initialInputs[i++];\n      const value = initialInputs[i++];\n      if (setInput !== null) {\n        def.setInput(instance, value, publicName, privateName);\n      } else {\n        instance[privateName] = value;\n      }\n      if (ngDevMode) {\n        const nativeElement = getNativeByTNode(tNode, lView);\n        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n      }\n    }\n  }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs Input alias map that was generated from the directive def inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n * @param attrs Static attrs on this node.\n */\nfunction generateInitialInputs(inputs, directiveIndex, attrs) {\n  let inputsToStore = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    }\n    // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n    if (typeof attrName === 'number') break;\n    if (inputs.hasOwnProperty(attrName)) {\n      if (inputsToStore === null) inputsToStore = [];\n      // Find the input's public name from the input store. Note that we can be found easier\n      // through the directive def, but we want to do it using the inputs store so that it can\n      // account for host directive aliases.\n      const inputConfig = inputs[attrName];\n      for (let j = 0; j < inputConfig.length; j += 2) {\n        if (inputConfig[j] === directiveIndex) {\n          inputsToStore.push(attrName, inputConfig[j + 1], attrs[i + 1]);\n          // A directive can't have multiple inputs with the same name so we can break here.\n          break;\n        }\n      }\n    }\n    i += 2;\n  }\n  return inputsToStore;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n  ngDevMode && assertLView(currentView);\n  const lContainer = [hostNative, true, false, currentView, null, 0, tNode, native, null, null // moved views\n  ];\n\n  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n  return lContainer;\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction refreshEmbeddedViews(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      const embeddedTView = embeddedLView[TVIEW];\n      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n      }\n    }\n  }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;\n    const movedViews = lContainer[MOVED_VIEWS];\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i];\n      const insertionLContainer = movedLView[PARENT];\n      ngDevMode && assertLContainer(insertionLContainer);\n      // We don't want to increment the counter if the moved LView was already marked for\n      // refresh.\n      if ((movedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) === 0) {\n        updateTransplantedViewCount(insertionLContainer, 1);\n      }\n      // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n      // those that aren't (declaration component === insertion component). In the latter case,\n      // it's fine to add the flag, as we will clear it immediately in\n      // `refreshEmbeddedViews` for the view currently being refreshed.\n      movedLView[FLAGS] |= 512 /* LViewFlags.RefreshTransplantedView */;\n    }\n  }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction refreshComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n  if (viewAttachedToChangeDetector(componentView)) {\n    const tView = componentView[TVIEW];\n    if (componentView[FLAGS] & (16 /* LViewFlags.CheckAlways */ | 32 /* LViewFlags.Dirty */)) {\n      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      refreshContainsDirtyView(componentView);\n    }\n  }\n}\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\nfunction refreshContainsDirtyView(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        if (embeddedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n          const embeddedTView = embeddedLView[TVIEW];\n          ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n          refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n        } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n          refreshContainsDirtyView(embeddedLView);\n        }\n      }\n    }\n  }\n  const tView = lView[TVIEW];\n  // Refresh child component views.\n  const components = tView.components;\n  if (components !== null) {\n    for (let i = 0; i < components.length; i++) {\n      const componentView = getComponentLViewByIndex(components[i], lView);\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(componentView);\n      }\n    }\n  }\n}\nfunction renderComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView, lView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView) {\n  while (lView) {\n    lView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent;\n  }\n  return null;\n}\nfunction detectChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n  const rendererFactory = lView[RENDERER_FACTORY];\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n  if (!checkNoChangesMode && rendererFactory.begin) rendererFactory.begin();\n  try {\n    refreshView(tView, lView, tView.template, context);\n  } catch (error) {\n    if (notifyErrorHandler) {\n      handleError(lView, error);\n    }\n    throw error;\n  } finally {\n    if (!checkNoChangesMode && rendererFactory.end) rendererFactory.end();\n  }\n}\nfunction checkNoChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInternal(tView, lView, context, notifyErrorHandler);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  viewQueryFn(flags, component);\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\nfunction getOrCreateLViewCleanup(view) {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = []);\n}\nfunction getOrCreateTViewCleanup(tView) {\n  return tView.cleanup || (tView.cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index]);\n  }\n  return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleError(lView, error) {\n  const injector = lView[INJECTOR$1];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nfunction setInputsForProperty(tView, lView, inputs, publicName, value) {\n  for (let i = 0; i < inputs.length;) {\n    const index = inputs[i++];\n    const privateName = inputs[i++];\n    const instance = lView[index];\n    ngDevMode && assertIndexInRange(lView, index);\n    const def = tView.data[index];\n    if (def.setInput !== null) {\n      def.setInput(instance, value, publicName, privateName);\n    } else {\n      instance[privateName] = value;\n    }\n  }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView, index, value) {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView);\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles = writeToHost ? tNode.styles : null;\n  let classes = writeToHost ? tNode.classes : null;\n  let mode = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == 1 /* AttributeMarker.Classes */) {\n        classes = concatStringsWithSpace(classes, value);\n      } else if (mode == 2 /* AttributeMarker.Styles */) {\n        const style = value;\n        const styleValue = attrs[++i];\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n  while (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n        const lViewInAContainer = lNode[i];\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n        if (lViewFirstChildTNode !== null) {\n          collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n        }\n      }\n    }\n    const tNodeType = tNode.type;\n    if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      const nextRNode = icuContainerIterate(tNode, lView);\n      let rNode;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & 16 /* TNodeType.Projection */) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n  return result;\n}\nclass ViewRef {\n  get rootNodes() {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n  constructor(\n  /**\n   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n   *\n   * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n   * component.\n   *\n   * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n   * view.\n   *\n   * @internal\n   */\n  _lView,\n  /**\n   * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n   * requested.\n   *\n   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n   */\n  _cdRefInjectingView) {\n    this._lView = _lView;\n    this._cdRefInjectingView = _cdRefInjectingView;\n    this._appRef = null;\n    this._attachedToViewContainer = false;\n  }\n  get context() {\n    return this._lView[CONTEXT];\n  }\n  set context(value) {\n    this._lView[CONTEXT] = value;\n  }\n  get destroyed() {\n    return (this._lView[FLAGS] & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */;\n  }\n\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS];\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n  onDestroy(callback) {\n    storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n  }\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck() {\n    markViewDirty(this._cdRefInjectingView || this._lView);\n  }\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach() {\n    this._lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n  }\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach() {\n    this._lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n  }\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach detach} for more information.\n   */\n  detectChanges() {\n    detectChangesInternal(this._lView[TVIEW], this._lView, this.context);\n  }\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges() {\n    if (ngDevMode) {\n      checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);\n    }\n  }\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n  detachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._lView[TVIEW], this._lView);\n  }\n  attachToAppRef(appRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n}\n/** @internal */\nclass RootViewRef extends ViewRef {\n  constructor(_view) {\n    super(_view);\n    this._view = _view;\n  }\n  detectChanges() {\n    const lView = this._view;\n    const tView = lView[TVIEW];\n    const context = lView[CONTEXT];\n    detectChangesInternal(tView, lView, context, false);\n  }\n  checkNoChanges() {\n    if (ngDevMode) {\n      const lView = this._view;\n      const tView = lView[TVIEW];\n      const context = lView[CONTEXT];\n      checkNoChangesInternal(tView, lView, context, false);\n    }\n  }\n  get context() {\n    return null;\n  }\n}\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(ngModule) {\n    super();\n    this.ngModule = ngModule;\n  }\n  resolveComponentFactory(component) {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef$1(component);\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\nfunction toRefArray(map) {\n  const array = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({\n        propName: minified,\n        templateName: nonMinified\n      });\n    }\n  }\n  return array;\n}\nfunction getNamespace(elementName) {\n  const name = elementName.toLowerCase();\n  return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;\n}\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector {\n  constructor(injector, parentInjector) {\n    this.injector = injector;\n    this.parentInjector = parentInjector;\n  }\n  get(token, notFoundValue, flags) {\n    flags = convertToBitFlags(flags);\n    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value;\n    }\n    return this.parentInjector.get(token, notFoundValue, flags);\n  }\n}\n/**\n * ComponentFactory interface implementation.\n */\nclass ComponentFactory extends ComponentFactory$1 {\n  get inputs() {\n    return toRefArray(this.componentDef.inputs);\n  }\n  get outputs() {\n    return toRefArray(this.componentDef.outputs);\n  }\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(componentDef, ngModule) {\n    super();\n    this.componentDef = componentDef;\n    this.ngModule = ngModule;\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n    this.isBoundToModule = !!ngModule;\n  }\n  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {\n    environmentInjector = environmentInjector || this.ngModule;\n    let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;\n    if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n      realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\n    }\n    const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n    const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n    if (rendererFactory === null) {\n      throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode && 'Angular was not able to inject a renderer (RendererFactory2). ' + 'Likely this is due to a broken DI hierarchy. ' + 'Make sure that any injector used to create this component has a correct parent.');\n    }\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n    // Determine a tag name used for creating host elements when this component is created\n    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n    const elementName = this.componentDef.selectors[0][0] || 'div';\n    const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : createElementNode(hostRenderer, elementName, getNamespace(elementName));\n    const rootFlags = this.componentDef.onPush ? 32 /* LViewFlags.Dirty */ | 256 /* LViewFlags.IsRoot */ : 16 /* LViewFlags.CheckAlways */ | 256 /* LViewFlags.IsRoot */;\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootTView = createTView(0 /* TViewType.Root */, null, null, 1, 0, null, null, null, null, null);\n    const rootLView = createLView(null, rootTView, null, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector, null);\n    // rootView is the parent when bootstrapping\n    // TODO(misko): it looks like we are entering view here but we don't really need to as\n    // `renderView` does that. However as the code is written it is needed because\n    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n    // issues would allow us to drop this.\n    enterView(rootLView);\n    let component;\n    let tElementNode;\n    try {\n      const rootComponentDef = this.componentDef;\n      let rootDirectives;\n      let hostDirectiveDefs = null;\n      if (rootComponentDef.findHostDirectiveDefs) {\n        rootDirectives = [];\n        hostDirectiveDefs = new Map();\n        rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);\n        rootDirectives.push(rootComponentDef);\n      } else {\n        rootDirectives = [rootComponentDef];\n      }\n      const hostTNode = createRootComponentTNode(rootLView, hostRNode);\n      const componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, rendererFactory, hostRenderer);\n      tElementNode = getTNode(rootTView, HEADER_OFFSET);\n      // TODO(crisbeto): in practice `hostRNode` should always be defined, but there are some tests\n      // where the renderer is mocked out and `undefined` is returned. We should update the tests so\n      // that this check can be removed.\n      if (hostRNode) {\n        setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);\n      }\n      if (projectableNodes !== undefined) {\n        projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);\n      }\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);\n      renderView(rootTView, rootLView, null);\n    } finally {\n      leaveView();\n    }\n    return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);\n  }\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nclass ComponentRef extends ComponentRef$1 {\n  constructor(componentType, instance, location, _rootLView, _tNode) {\n    super();\n    this.location = location;\n    this._rootLView = _rootLView;\n    this._tNode = _tNode;\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n    this.componentType = componentType;\n  }\n  setInput(name, value) {\n    const inputData = this._tNode.inputs;\n    let dataValue;\n    if (inputData !== null && (dataValue = inputData[name])) {\n      const lView = this._rootLView;\n      setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n      const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);\n      markViewDirty(childComponentLView);\n    } else {\n      if (ngDevMode) {\n        const cmpNameForError = stringifyForError(this.componentType);\n        let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n        message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n        reportUnknownPropertyError(message);\n      }\n    }\n  }\n  get injector() {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n  destroy() {\n    this.hostView.destroy();\n  }\n  onDestroy(callback) {\n    this.hostView.onDestroy(callback);\n  }\n}\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nconst NULL_INJECTOR = {\n  get: (token, notFoundValue) => {\n    throwProviderNotFoundError(token, 'NullInjector');\n  }\n};\n/** Creates a TNode that can be used to instantiate a root component. */\nfunction createRootComponentTNode(lView, rNode) {\n  const tView = lView[TVIEW];\n  const index = HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, index);\n  lView[index] = rNode;\n  // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n  // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n  // representing a host element.\n  return getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, '#host', null);\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param rootComponentDef ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(tNode, rNode, rootComponentDef, rootDirectives, rootView, rendererFactory, hostRenderer, sanitizer) {\n  const tView = rootView[TVIEW];\n  applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer);\n  const viewRenderer = rendererFactory.createRenderer(rNode, rootComponentDef);\n  const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, rootComponentDef.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, rootView[tNode.index], tNode, rendererFactory, viewRenderer, sanitizer || null, null, null);\n  if (tView.firstCreatePass) {\n    markAsComponentHost(tView, tNode, rootDirectives.length - 1);\n  }\n  addToViewTree(rootView, componentView);\n  // Store component view at node index, with node as the HOST\n  return rootView[tNode.index] = componentView;\n}\n/** Sets up the styling information on a root component. */\nfunction applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {\n  for (const def of rootDirectives) {\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n    if (rNode !== null) {\n      setupStaticAttributes(hostRenderer, rNode, tNode);\n    }\n  }\n}\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {\n  const rootTNode = getCurrentTNode();\n  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n  const tView = rootLView[TVIEW];\n  const native = getNativeByTNode(rootTNode, rootLView);\n  initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);\n  for (let i = 0; i < rootDirectives.length; i++) {\n    const directiveIndex = rootTNode.directiveStart + i;\n    const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);\n    attachPatchData(directiveInstance, rootLView);\n  }\n  invokeDirectivesHostBindings(tView, rootLView, rootTNode);\n  if (native) {\n    attachPatchData(native, rootLView);\n  }\n  // We're guaranteed for the `componentOffset` to be positive here\n  // since a root component always matches a component def.\n  ngDevMode && assertGreaterThan(rootTNode.componentOffset, -1, 'componentOffset must be great than -1');\n  const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);\n  componentView[CONTEXT] = rootLView[CONTEXT] = component;\n  if (hostFeatures !== null) {\n    for (const feature of hostFeatures) {\n      feature(component, rootComponentDef);\n    }\n  }\n  // We want to generate an empty QueryList for root content queries for backwards\n  // compatibility with ViewEngine.\n  executeContentQueries(tView, rootTNode, componentView);\n  return component;\n}\n/** Sets the static attributes on a root component. */\nfunction setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {\n  if (rootSelectorOrNode) {\n    setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n  } else {\n    // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n    // is not defined), also apply attributes and classes extracted from component selector.\n    // Extract attributes and classes from the first selector only to match VE behavior.\n    const {\n      attrs,\n      classes\n    } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n    if (attrs) {\n      setUpAttributes(hostRenderer, hostRNode, attrs);\n    }\n    if (classes && classes.length > 0) {\n      writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n    }\n  }\n}\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\n  const projection = tNode.projection = [];\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const nodesforSlot = projectableNodes[i];\n    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n    // complex checks down the line.\n    // We also normalize the length of the passed in projectable nodes (to match the number of\n    // <ng-container> slots defined by a component).\n    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n  }\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nfunction LifecycleHooksFeature() {\n  const tNode = getCurrentTNode();\n  ngDevMode && assertDefined(tNode, 'TNode is required');\n  registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\nfunction getSuperType(type) {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain = [definition];\n  while (superType) {\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n        // Merge inputs and outputs\n        fillProperties(definition.inputs, superDef.inputs);\n        fillProperties(definition.declaredInputs, superDef.declaredInputs);\n        fillProperties(definition.outputs, superDef.outputs);\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = definition.data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            feature(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n  let hostVars = 0;\n  let hostAttrs = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = hostVars += def.hostVars;\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\nfunction maybeUnwrapEmpty(value) {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf, ctx) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS = [\n// The child class should use the providers of its parent.\n'providersResolver'\n// Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n// as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS = [\n// The child class should use the template function of its parent, including all template\n// semantics.\n'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors',\n// The child class should use the CSS styles of its parent, including all styling semantics.\n'styles', 'encapsulation',\n// The child class should be checked by the runtime in the same way as its parent.\n'schemas'];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let superDef = undefined;\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir;\n  }\n  // Needed because `definition` fields are readonly.\n  const defAny = definition;\n  // Copy over any fields that apply to either directives or components.\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\n  return definition => {\n    definition.findHostDirectiveDefs = findHostDirectiveDefs;\n    definition.hostDirectives = (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map(dir => {\n      return typeof dir === 'function' ? {\n        directive: resolveForwardRef(dir),\n        inputs: EMPTY_OBJ,\n        outputs: EMPTY_OBJ\n      } : {\n        directive: resolveForwardRef(dir.directive),\n        inputs: bindingArrayToMap(dir.inputs),\n        outputs: bindingArrayToMap(dir.outputs)\n      };\n    });\n  };\n}\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\n  if (currentDef.hostDirectives !== null) {\n    for (const hostDirectiveConfig of currentDef.hostDirectives) {\n      const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        validateHostDirective(hostDirectiveConfig, hostDirectiveDef, matchedDefs);\n      }\n      // We need to patch the `declaredInputs` so that\n      // `ngOnChanges` can map the properties correctly.\n      patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);\n      // Host directives execute before the host so that its host bindings can be overwritten.\n      findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n      hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);\n      matchedDefs.push(hostDirectiveDef);\n    }\n  }\n}\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings) {\n  if (bindings === undefined || bindings.length === 0) {\n    return EMPTY_OBJ;\n  }\n  const result = {};\n  for (let i = 0; i < bindings.length; i += 2) {\n    result[bindings[i]] = bindings[i + 1];\n  }\n  return result;\n}\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\n  for (const publicName in exposedInputs) {\n    if (exposedInputs.hasOwnProperty(publicName)) {\n      const remappedPublicName = exposedInputs[publicName];\n      const privateName = declaredInputs[publicName];\n      // We *technically* shouldn't be able to hit this case because we can't have multiple\n      // inputs on the same property and we have validations against conflicting aliases in\n      // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n      // with the wrong name so we have a non-user-friendly assertion here just in case.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {\n        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\n      }\n      declaredInputs[remappedPublicName] = privateName;\n    }\n  }\n}\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n * @param matchedDefs Directives that have been matched so far.\n */\nfunction validateHostDirective(hostDirectiveConfig, directiveDef, matchedDefs) {\n  const type = hostDirectiveConfig.directive;\n  if (directiveDef === null) {\n    if (getComponentDef$1(type) !== null) {\n      throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\n    }\n    throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` + `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n  }\n  if (!directiveDef.standalone) {\n    throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\n  }\n  if (matchedDefs.indexOf(directiveDef) > -1) {\n    throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTITVE */, `Directive ${directiveDef.type.name} matches multiple times on the same element. ` + `Directives can only match an element once.`);\n  }\n  validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n  validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\n  const className = def.type.name;\n  const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n  for (const publicName in hostDirectiveBindings) {\n    if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n      if (!bindings.hasOwnProperty(publicName)) {\n        throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\n      }\n      const remappedPublicName = hostDirectiveBindings[publicName];\n      if (bindings.hasOwnProperty(remappedPublicName) && bindings[remappedPublicName] !== publicName) {\n        throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\n      }\n    }\n  }\n}\nfunction isIterable(obj) {\n  return obj !== null && typeof obj === 'object' && obj[Symbol.iterator] !== undefined;\n}\nfunction isListLikeIterable(obj) {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) || !(obj instanceof Map) &&\n  // JS Map are iterables but return entries as [k, v]\n  Symbol.iterator in obj; // JS Iterable have a Symbol.iterator prop\n}\n\nfunction areIterablesEqual(a, b, comparator) {\n  const iterator1 = a[Symbol.iterator]();\n  const iterator2 = b[Symbol.iterator]();\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\nfunction iterateListLike(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[Symbol.iterator]();\n    let item;\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\nfunction isJsObject(o) {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\nfunction devModeEqual(a, b) {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n  return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(lView, values) {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n  return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(lView, prefix, v0, suffix) {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n  return ɵɵattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n  return ɵɵattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵattributeInterpolateV;\n}\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n  const view = getComponentViewByInstance(component);\n  detectChangesInternal(view[TVIEW], view, component);\n}\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, getConstant(tViewConsts, attrsIndex));\n  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n  registerPostOrderHooks(tView, tNode);\n  const embeddedTView = tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n  return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, false);\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  appendChild(tView, lView, comment, tNode);\n  attachPatchData(comment, lView);\n  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n  }\n}\n\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nfunction ɵɵreference(index) {\n  const contextLView = getContextLView();\n  return load(contextLView, HEADER_OFFSET + index);\n}\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n  const inputs = tNode.inputs;\n  const property = isClassBased ? 'class' : 'style';\n  // We support both 'class' and `className` hence the fallback.\n  setInputsForProperty(tView, lView, inputs[property], property, value);\n}\nfunction elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\n  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const renderer = lView[RENDERER];\n  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace$1());\n  const hasDirectives = isDirectiveHost(tNode);\n  if (ngDevMode && tView.firstCreatePass) {\n    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n  }\n  setCurrentTNode(tNode, true);\n  setupStaticAttributes(renderer, native, tNode);\n  if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n  if (hasDirectives) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementEnd() {\n  let currentTNode = getCurrentTNode();\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n  decreaseElementDepthCount();\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n  return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\n  // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n  const localRefs = getConstant(tViewConsts, localRefsIndex);\n  resolveDirectives(tView, lView, tNode, localRefs);\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, true);\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const native = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n  appendChild(tView, lView, native, tNode);\n  attachPatchData(native, lView);\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerEnd() {\n  let currentTNode = getCurrentTNode();\n  const tView = getTView();\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n  return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nfunction ɵɵgetCurrentView() {\n  return getLView();\n}\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\nfunction isSubscribable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\nconst isObservable = isSubscribable;\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener - this argument is a reminder\n *     from the Renderer3 infrastructure and should be removed from the instruction arguments\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n  return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n  const tNode = getCurrentTNode();\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIdx) {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP];\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);\n  const context = lView[CONTEXT];\n  // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  let processOutputs = true;\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if (tNode.type & 3 /* TNodeType.AnyRNode */ || eventTargetResolver) {\n    const native = getNativeByTNode(tNode, lView);\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver ? _lView => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    // There might be cases where multiple directives on the same element try to register an event\n    // handler function for the same event. In this situation we want to avoid registration of\n    // several native listeners as each registration would be intercepted by NgZone and\n    // trigger change detection. This would mean that a single user action would result in several\n    // change detections being invoked. To avoid this situation we want to have only one call to\n    // native handler registration (for the same element and same type of event).\n    //\n    // In order to have just one native event handler in presence of multiple handler functions,\n    // we just register a first handler function as a native event listener and then chain\n    // (coalesce) other handler functions on top of the first native handler function.\n    let existingListener = null;\n    // Please note that the coalescing described here doesn't happen for events specifying an\n    // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n    // view engine.\n    // Also, we don't have to search for existing listeners is there are no directives\n    // matching on a given node as we can't register multiple event handlers for the same event in\n    // a template (this would mean having duplicate attributes).\n    if (!eventTargetResolver && isTNodeDirectiveHost) {\n      existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n    }\n    if (existingListener !== null) {\n      // Attach a new listener to coalesced listeners list, maintaining the order in which\n      // listeners are registered. For performance reasons, we keep a reference to the last\n      // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n      // the entire set each time we need to add a new listener.\n      const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n      lastListenerFn.__ngNextListenerFn__ = listenerFn;\n      existingListener.__ngLastListenerFn__ = listenerFn;\n      processOutputs = false;\n    } else {\n      listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n      const cleanupFn = renderer.listen(target, eventName, listenerFn);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n      lCleanup.push(listenerFn, cleanupFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n    }\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n  }\n  // subscribe to directive outputs\n  const outputs = tNode.outputs;\n  let props;\n  if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n    const propsLength = props.length;\n    if (propsLength) {\n      for (let i = 0; i < propsLength; i += 2) {\n        const index = props[i];\n        ngDevMode && assertIndexInRange(lView, index);\n        const minifiedName = props[i + 1];\n        const directiveInstance = lView[index];\n        const output = directiveInstance[minifiedName];\n        if (ngDevMode && !isObservable(output)) {\n          throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n        }\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n  try {\n    profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  } finally {\n    profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n  }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    }\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView);\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n      nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n    }\n    if (wrapWithPreventDefault && result === false) {\n      e.preventDefault();\n      // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n      e.returnValue = false;\n    }\n    return result;\n  };\n}\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nfunction ɵɵnextContext(level = 1) {\n  return nextContextImpl(level);\n}\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i; // first matching selector \"captures\" a given node\n    }\n  }\n\n  return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);\n    const tails = projectionHeads.slice();\n    let componentChild = componentNode.child;\n    while (componentChild !== null) {\n      const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n      if (slotIndex !== null) {\n        if (tails[slotIndex]) {\n          tails[slotIndex].projectionNext = componentChild;\n        } else {\n          projectionHeads[slotIndex] = componentChild;\n        }\n        tails[slotIndex] = componentChild;\n      }\n      componentChild = componentChild.next;\n    }\n  }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n  const lView = getLView();\n  const tView = getTView();\n  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n  // `<ng-content>` has no content\n  setCurrentTNodeAsNotParent();\n  if ((tProjectionNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\nfunction toTStylingRange(prev, next) {\n  ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction getTStylingRangePrev(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange >> 17 /* StylingRange.PREV_SHIFT */ & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\n\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) == 2 /* StylingRange.PREV_DUPLICATE */;\n}\n\nfunction setTStylingRangePrev(tStylingRange, previous) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */ | previous << 17 /* StylingRange.PREV_SHIFT */;\n}\n\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */;\n}\n\nfunction getTStylingRangeNext(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction setTStylingRangeNext(tStylingRange, next) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~131068 /* StylingRange.NEXT_MASK */ |\n  //\n  next << 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) === 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\nfunction getTStylingRangeTail(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__;\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic;\n    tStylingKey = staticKeyValueArray[1]; // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n    }\n    tmplTail = index;\n  }\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n  }\n  markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n  markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n  }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {\n  const tStylingAtIndex = tData[index + 1];\n  const isMap = tStylingKey === null;\n  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor];\n    const tStyleRangeAtCursor = tData[cursor + 1];\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n  if (tStylingKeyCursor === null ||\n  // If the cursor is `null` it means that we have map at that\n  // location so we must assume that we have a match.\n  tStylingKey == null ||\n  // If `tStylingKey` is `null` then it is a map therefor assume that it\n  // contains a match.\n  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\n  }\n\n  return false;\n}\n\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedKey(text) {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedValue(text) {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassName(text) {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassNameNext(text, index) {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyle(text) {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyleNext(text, startIndex) {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nfunction resetParserState(text) {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n  let ch;\n  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ || (ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */ || ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */)) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let ch2 = -1; // 2nd previous character\n  let ch3 = -1; // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch = text.charCodeAt(i++);\n    if (ch === 59 /* CharCode.SEMI_COLON */) {\n      return lastChIndex;\n    } else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (startIndex === i - 4 &&\n    // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n    ch3 === 85 /* CharCode.U */ && ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n      lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n    } else if (ch > 32 /* CharCode.SPACE */) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n  }\n\n  return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n      return index;\n    }\n    if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.slice(index + 1) + `'. Expecting '${expecting}'.`);\n}\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵclassProp(className, value) {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleMap(styles) {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction styleStringParser(keyValueArray, text) {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nfunction ɵɵclassMap(classes) {\n  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction classStringParser(keyValueArray, text) {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()];\n    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()];\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \\'false\\'');\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n    }\n  }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView, bindingIndex) {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()];\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;\n  }\n  return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n  let residual = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = tData[i].hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast];\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n  const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n  let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i];\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n          }\n          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY;\n  const styleKeyValueArray = [];\n  const unwrappedValue = unwrapSafeValue(value);\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n  return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction classKeyValueArraySet(keyValueArray, key, value) {\n  // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n  // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n  // will be added. Stringify the key here so that our internal data structure matches the value in\n  // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n  // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n  const stringKey = String(key);\n  if (stringKey !== '' && !stringKey.includes(' ')) {\n    keyValueArraySet(keyValueArray, stringKey, value);\n  }\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n  if (oldKeyValueArray === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey = null;\n    let setValue = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n  if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1];\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView);\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value = undefined;\n  while (index > 0) {\n    const rawKey = tData[index];\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? rawKey[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1];\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual, prop);\n    }\n  }\n  return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value) {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value, suffix) {\n  if (value == null || value === '') {\n    // do nothing\n    // Do not add the suffix if the value is going to be empty.\n    // As it produce invalid CSS, which the browsers will automatically omit but Domino will not.\n    // Example: `\"left\": \"px;\"` instead of `\"left\": \"\"`.\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n  return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nfunction ɵɵtext(index, value = '') {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) : tView.data[adjustedIndex];\n  const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n  appendChild(tView, lView, textNative, tNode);\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate(v0) {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵtextInterpolateV(values) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolateV;\n}\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolateV;\n}\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵhostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n  // These property accesses can be ignored because ngI18nClosureMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n  // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n  (function () {\n    // tslint:disable-next-line:no-toplevel-property-access\n    _global$1['ngI18nClosureMode'] =\n    // TODO(FW-1250): validate that this actually, you know, works.\n    // tslint:disable-next-line:no-toplevel-property-access\n    typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n  })();\n}\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n  const n = val,\n    i = Math.floor(Math.abs(val)),\n    v = val.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nfunction registerLocaleData(data, localeId, extraData) {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction findLocaleData(locale) {\n  const normalizedLocale = normalizeLocale(locale);\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n  throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nfunction getLocaleCurrencyCode(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction getLocalePluralCase(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nfunction getLocaleData(normalizedLocale) {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = _global$1.ng && _global$1.ng.common && _global$1.ng.common.locales && _global$1.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nfunction unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\nvar LocaleDataIndex;\n(function (LocaleDataIndex) {\n  LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n  LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n  LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n  LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n  LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n  LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n  LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n  LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\nfunction getPluralCase(value, locale) {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return result !== undefined ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ELEMENT_MARKER = {\n  marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ICU_MARKER = {\n  marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\nvar I18nCreateOpCode;\n(function (I18nCreateOpCode) {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n  /**\n   * Should the node be appended to parent immediately after creation.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd = 1;\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nfunction setLocaleId(localeId) {\n  assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nfunction getLocaleId() {\n  return LOCALE_ID;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent = childRNode;\n    let anchorRNode = null;\n    if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && childTNode.componentOffset === -1) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n  // Start with Rule1\n  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\nfunction isI18nText(tNode) {\n  return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\n\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nfunction getTIcu(tView, index) {\n  const value = tView.data[index];\n  if (value === null || typeof value === 'string') return null;\n  if (ngDevMode && !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nfunction setTIcu(tView, index, tIcu) {\n  const tNode = tView.data[index];\n  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, 'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n    tNode.value = tIcu;\n  }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex = [null /* may be updated to number later */, index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    insertBeforeIndex.push(index);\n  }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n  const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n  const currentCase = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n  return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\n\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n  return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n  return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\n\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nfunction setMaskBit(hasChange) {\n  if (hasChange) {\n    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);\n  }\n  changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index];\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n    }\n    if (appendNow && parentRNode !== null) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i];\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = createTextNode(renderer, opCode);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n        case 0 /* IcuCreateOpCode.AppendChild */:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = nativeParentNode(renderer, anchorRNode);\n          }\n          let insertInFrontOf;\n          let parentRNode;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]);\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx];\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case 1 /* IcuCreateOpCode.Attr */:\n          const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n          const attrName = mutableOpCodes[++i];\n          const attrValue = mutableOpCodes[++i];\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n          break;\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n          }\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i];\n          const commentNodeIndex = mutableOpCodes[++i];\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i];\n          const elementNodeIndex = mutableOpCodes[++i];\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n            ngDevMode && ngDevMode.rendererCreateElement++;\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] = createElementNode(renderer, tagName, null);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode && throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i];\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i];\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n            switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n              case 1 /* I18nUpdateOpCode.Attr */:\n                const propName = updateOpCodes[++j];\n                const sanitizeFn = updateOpCodes[++j];\n                const tNodeOrTagName = tView.data[nodeIndex];\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                } else {\n                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);\n                }\n                break;\n              case 0 /* I18nUpdateOpCode.Text */:\n                const rText = lView[nodeIndex];\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                break;\n              case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1];\n      if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const tIcu = getTIcu(tView, nodeIndex);\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n    }\n  }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i];\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n      }\n    }\n  }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case 1 /* IcuType.plural */:\n        {\n          const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n          index = icuExpression.cases.indexOf(resolvedCase);\n          if (index === -1 && resolvedCase !== 'other') {\n            index = icuExpression.cases.indexOf('other');\n          }\n          break;\n        }\n      case 0 /* IcuType.select */:\n        {\n          index = icuExpression.cases.indexOf('other');\n          break;\n        }\n    }\n  }\n  return index === -1 ? null : index;\n}\nfunction loadIcuContainerVisitor() {\n  const _stack = [];\n  let _index = -1;\n  let _lView;\n  let _removes;\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(tIcuContainerNode, lView) {\n    _lView = lView;\n    while (_stack.length) _stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext;\n  }\n  function enterIcu(tIcu, lView) {\n    _index = 0;\n    const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n    if (currentCase !== null) {\n      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n      _removes = tIcu.remove[currentCase];\n    } else {\n      _removes = EMPTY_ARRAY;\n    }\n  }\n  function icuContainerIteratorNext() {\n    if (_index < _removes.length) {\n      const removeOpCode = _removes[_index++];\n      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n      if (removeOpCode > 0) {\n        const rNode = _lView[removeOpCode];\n        ngDevMode && assertDomNode(rNode);\n        return rNode;\n      } else {\n        _stack.push(_index, _removes);\n        // ICUs are represented by negative indices\n        const tIcuIndex = ~removeOpCode;\n        const tIcu = _lView[TVIEW].data[tIcuIndex];\n        ngDevMode && assertTIcu(tIcu);\n        enterIcu(tIcu, _lView);\n        return icuContainerIteratorNext();\n      }\n    } else {\n      if (_stack.length === 0) {\n        return null;\n      } else {\n        _removes = _stack.pop();\n        _index = _stack.pop();\n        return icuContainerIteratorNext();\n      }\n    }\n  }\n  return icuContainerIteratorStart;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(value) {\n    const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n    const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n    switch (opCode) {\n      case 0 /* I18nUpdateOpCode.Text */:\n        return `(lView[${ref}] as Text).textContent = $$$`;\n      case 1 /* I18nUpdateOpCode.Attr */:\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n      case 2 /* I18nUpdateOpCode.IcuSwitch */:\n        return `icuSwitchCase(${ref}, $$$)`;\n      case 3 /* I18nUpdateOpCode.IcuUpdate */:\n        return `icuUpdateCase(${ref})`;\n    }\n    throw new Error('unexpected OpCode');\n  }\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements = [];\n    let statement = '';\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n  return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction icuCreateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(opCode) {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case 0 /* IcuCreateOpCode.AppendChild */:\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n      case 1 /* IcuCreateOpCode.Attr */:\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n    }\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n  let lastRef = -1;\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i];\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n  return lines;\n}\nclass OpCodeParser {\n  constructor(codes) {\n    this.i = 0;\n    this.codes = codes;\n  }\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n  consumeNumber() {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n  consumeString() {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n  consumeFunction() {\n    let value = this.codes[this.i++];\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n    throw new Error('expecting function in OpCode');\n  }\n  consumeNumberOrString() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string') {\n      return value;\n    }\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n  consumeNumberStringOrMarker() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {\n      return value;\n    }\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n}\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter(obj, debugGetter) {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {\n      get: debugGetter,\n      enumerable: false\n    });\n  } else {\n    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes = [];\n  const updateOpCodes = [];\n  const existingTNodeStack = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression = part;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        setCurrentTNode(getCurrentParentTNode(), false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n      }\n    }\n  }\n  tView.data[index] = {\n    create: createOpCodes,\n    update: updateOpCodes\n  };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? ngDevMode ? '{{?}}' : '' : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n  }\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n  const previousElement = getCurrentTNode();\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes = [];\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        }\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length; // Location of mask\n  const sizeIndex = maskIndex + 1; // location of size for skipping\n  updateOpCodes.push(null, null); // Alloc space for mask and size\n  const startIndex = maskIndex + 2; // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n  updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ | (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes) {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n  return 1 << Math.min(bindingIndex, 31);\n}\nfunction isRootTemplateMessage(subTemplateIndex) {\n  return subTemplateIndex === -1;\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n  res += message.slice(index);\n  return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n  const cases = [];\n  const values = [];\n  let icuType = 1 /* IcuType.plural */;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n    if (type === 'select') {\n      icuType = 0 /* IcuType.select */;\n    } else {\n      icuType = 1 /* IcuType.plural */;\n    }\n\n    mainBinding = parseInt(binding.slice(1), 10);\n    return '';\n  });\n  const parts = i18nParseTextIntoPartsAndICU(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === 1 /* IcuType.plural */) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {\n    type: icuType,\n    mainBinding: mainBinding,\n    cases,\n    values\n  };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n  if (!pattern) {\n    return [];\n  }\n  let prevPos = 0;\n  const braceStack = [];\n  const results = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n  const create = [];\n  const remove = [];\n  const update = [];\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\nfunction walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i);\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ` + `${lowerAttrName} on element ${tagName} ` + `(see ${XSS_SECURITY_URL})`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          // Parse the children of this node (if any)\n          bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(~index); // remove ICU at `index`\n    remove.push(index); // remove ICU comment at `index`\n  }\n}\n\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\n\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n  update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\n\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n  create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction i18nPostprocess(message, replacements = {}) {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches = {};\n    const templateIdsStack = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n      const content = phs || tmpl;\n      const placeholders = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach(placeholder => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n    return replacements.hasOwnProperty(key) ? replacements[key] : match;\n  });\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift();\n    }\n    return match;\n  });\n  return result;\n}\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant(tView.consts, messageIndex);\n  const parentTNode = getCurrentParentTNode();\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n  }\n  const tI18n = tView.data[adjustedIndex];\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf = parentTNode && parentTNode.type & 8 /* TNodeType.ElementContainer */ ? lView[parentTNode.index] : null;\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nEnd() {\n  setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant(tView.consts, attrsIndex);\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵi18nExp(value) {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nApply(index) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n  return i18nPostprocess(message, replacements);\n}\n\n/*\n * This file re-exports all symbols contained in this directory.\n *\n * Why is this file not `index.ts`?\n *\n * There seems to be an inconsistent path resolution of an `index.ts` file\n * when only the parent directory is referenced. This could be due to the\n * node module resolution configuration differing from rollup and/or typescript.\n *\n * With commit\n * https://github.com/angular/angular/commit/d5e3f2c64bd13ce83e7c70788b7fc514ca4a9918\n * the `instructions.ts` file was moved to `instructions/instructions.ts` and an\n * `index.ts` file was used to re-export everything. Having had file names that were\n * importing from `instructions' directly (not the from the sub file or the `index.ts`\n * file) caused strange CI issues. `index.ts` had to be renamed to `all.ts` for this\n * to work.\n *\n * Jira Issue = FW-1184\n */\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    let providerFactory = providerToFactory(provider);\n    const tNode = getCurrentTNode();\n    const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n      }\n    }\n  }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n      if (!providerIsTypeProvider && provider.multi) {\n        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n  if (isComponentProvider) {\n    multiFactory.componentProviders++;\n  }\n  return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n  return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n  const factories = this.multi;\n  let result;\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders;\n    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i];\n    result.push(factory());\n  }\n  return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n  return definition => {\n    definition.providersResolver = (def, processProvidersFn) => {\n      return providersResolver(def,\n      //\n      processProvidersFn ? processProvidersFn(providers) : providers,\n      //\n      viewProviders);\n    };\n  };\n}\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nclass NgModuleRef$1 {}\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nclass NgModuleFactory$1 {}\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nfunction createNgModule(ngModule, parentInjector) {\n  return new NgModuleRef(ngModule, parentInjector ?? null);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n  constructor(ngModuleType, _parent) {\n    super();\n    this._parent = _parent;\n    // tslint:disable-next-line:require-internal-with-underscore\n    this._bootstrapComponents = [];\n    this.destroyCbs = [];\n    // When bootstrapping a module we have a dependency graph that looks like this:\n    // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n    // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n    // circular dependency which will result in a runtime error, because the injector doesn't\n    // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n    // and providing it, rather than letting the injector resolve it.\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n    this._bootstrapComponents = maybeUnwrapFn$1(ngModuleDef.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], stringify(ngModuleType), new Set(['environment']));\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    this._r3Injector.resolveInjectorInitializers();\n    this.instance = this._r3Injector.get(ngModuleType);\n  }\n  get injector() {\n    return this._r3Injector;\n  }\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs.push(callback);\n  }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n  constructor(moduleType) {\n    super();\n    this.moduleType = moduleType;\n  }\n  create(parentInjector) {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n  constructor(providers, parent, source) {\n    super();\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    this.instance = null;\n    const injector = new R3Injector([...providers, {\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], parent || getNullInjector(), source, new Set(['environment']));\n    this.injector = injector;\n    injector.resolveInjectorInitializers();\n  }\n  destroy() {\n    this.injector.destroy();\n  }\n  onDestroy(callback) {\n    this.injector.onDestroy(callback);\n  }\n}\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n  const adapter = new EnvironmentNgModuleRefAdapter(providers, parent, debugName);\n  return adapter.injector;\n}\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nclass StandaloneService {\n  constructor(_injector) {\n    this._injector = _injector;\n    this.cachedInjectors = new Map();\n  }\n  getOrCreateStandaloneInjector(componentDef) {\n    if (!componentDef.standalone) {\n      return null;\n    }\n    if (!this.cachedInjectors.has(componentDef.id)) {\n      const providers = internalImportProvidersFrom(false, componentDef.type);\n      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;\n      this.cachedInjectors.set(componentDef.id, standaloneInjector);\n    }\n    return this.cachedInjectors.get(componentDef.id);\n  }\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n}\n/** @nocollapse */\nStandaloneService.ɵprov = ɵɵdefineInjectable({\n  token: StandaloneService,\n  providedIn: 'environment',\n  factory: () => new StandaloneService(ɵɵinject(EnvironmentInjector))\n});\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\nfunction ɵɵStandaloneFeature(definition) {\n  definition.getStandaloneInjector = parentInjector => {\n    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n  };\n}\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getComponent(element) {\n  ngDevMode && assertDomElement(element);\n  const context = getLContext(element);\n  if (context === null) return null;\n  if (context.component === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return null;\n    }\n    context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n  }\n  return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getContext(element) {\n  assertDomElement(element);\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getOwningComponent(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  let lView = context ? context.lView : null;\n  if (lView === null) return null;\n  let parent;\n  while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n    lView = parent;\n  }\n  return lView[FLAGS] & 256 /* LViewFlags.IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getRootComponents(elementOrDir) {\n  const lView = readPatchedLView(elementOrDir);\n  return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getInjector(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  const lView = context ? context.lView : null;\n  if (lView === null) return Injector.NULL;\n  const tNode = lView[TVIEW].data[context.nodeIndex];\n  return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nfunction getInjectionTokens(element) {\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex];\n  const providerTokens = [];\n  const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectives(node) {\n  // Skip text nodes because we can't have directives associated with them.\n  if (node instanceof Text) {\n    return [];\n  }\n  const context = getLContext(node);\n  const lView = context ? context.lView : null;\n  if (lView === null) {\n    return [];\n  }\n  const tView = lView[TVIEW];\n  const nodeIndex = context.nodeIndex;\n  if (!tView?.data[nodeIndex]) {\n    return [];\n  }\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n  }\n  // The `directives` in this case are a named array called `LComponentView`. Clone the\n  // result so we don't expose an internal data structure in the user's console.\n  return context.directives === null ? [] : [...context.directives];\n}\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectiveMetadata(directiveOrComponentInstance) {\n  const {\n    constructor\n  } = directiveOrComponentInstance;\n  if (!constructor) {\n    throw new Error('Unable to find the instance constructor');\n  }\n  // In case a component inherits from a directive, we may have component and directive metadata\n  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n  const componentDef = getComponentDef$1(constructor);\n  if (componentDef) {\n    return {\n      inputs: componentDef.inputs,\n      outputs: componentDef.outputs,\n      encapsulation: componentDef.encapsulation,\n      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default\n    };\n  }\n  const directiveDef = getDirectiveDef(constructor);\n  if (directiveDef) {\n    return {\n      inputs: directiveDef.inputs,\n      outputs: directiveDef.outputs\n    };\n  }\n  return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nfunction getLocalRefs(target) {\n  const context = getLContext(target);\n  if (context === null) return {};\n  if (context.localRefs === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return {};\n    }\n    context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n  }\n  return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getHostElement(componentOrDirective) {\n  return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nfunction getRenderedText(component) {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getListeners(element) {\n  ngDevMode && assertDomElement(element);\n  const lContext = getLContext(element);\n  const lView = lContext === null ? null : lContext.lView;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        const name = firstParam;\n        const listenerElement = unwrapRNode(lView[secondParam]);\n        const callback = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n        if (element == listenerElement) {\n          listeners.push({\n            element,\n            name,\n            callback,\n            useCapture,\n            type\n          });\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\nfunction sortListeners(a, b) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n  return obj.type !== undefined && obj.declaredInputs !== undefined && obj.findHostDirectiveDefs !== undefined;\n}\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\nfunction getComponentLView(target) {\n  const lContext = getLContext(target);\n  const nodeIndx = lContext.nodeIndex;\n  const lView = lContext.lView;\n  ngDevMode && assertLView(lView);\n  const componentLView = lView[nodeIndx];\n  ngDevMode && assertLView(componentLView);\n  return componentLView;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n  if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n}\n\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n  return noSideEffects(() => {\n    const clazz = type;\n    if (decorators !== null) {\n      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n        clazz.decorators.push(...decorators);\n      } else {\n        clazz.decorators = decorators;\n      }\n    }\n    if (ctorParameters !== null) {\n      // Rather than merging, clobber the existing parameters. If other projects exist which\n      // use tsickle-style annotations and reflect over them in the same way, this could\n      // cause issues, but that is vanishingly unlikely.\n      clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n      // The property decorator objects are merged as it is possible different fields have\n      // different decorator types. Decorators on individual fields are not merged, as it's\n      // also incredibly unlikely that a field will be decorated both with an Angular\n      // decorator and a non-Angular decorator that's also been downleveled.\n      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n        clazz.propDecorators = {\n          ...clazz.propDecorators,\n          ...propDecorators\n        };\n      } else {\n        clazz.propDecorators = propDecorators;\n      }\n    }\n  });\n}\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nfunction ɵɵpipe(index, pipeName) {\n  const tView = getTView();\n  let pipeDef;\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks ?? (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex];\n  }\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n  if (registry) {\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n  }\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'declared or imported in this module'}`;\n  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind1(index, slotOffset, v1) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n  return lView[TVIEW].data[index].pure;\n}\n\n/// <reference types=\"rxjs\" />\nclass EventEmitter_ extends Subject {\n  constructor(isAsync = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n  emit(value) {\n    super.next(value);\n  }\n  subscribe(observerOrNext, error, complete) {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n    if (this.__isAsync) {\n      errorFn = _wrapInTimeout(errorFn);\n      if (nextFn) {\n        nextFn = _wrapInTimeout(nextFn);\n      }\n      if (completeFn) {\n        completeFn = _wrapInTimeout(completeFn);\n      }\n    }\n    const sink = super.subscribe({\n      next: nextFn,\n      error: errorFn,\n      complete: completeFn\n    });\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n    return sink;\n  }\n}\nfunction _wrapInTimeout(fn) {\n  return value => {\n    setTimeout(fn, undefined, value);\n  };\n}\n/**\n * @publicApi\n */\nconst EventEmitter = EventEmitter_;\nfunction symbolIterator() {\n  // @ts-expect-error accessing a private member\n  return this._results[Symbol.iterator]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nclass QueryList {\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes() {\n    return this._changes || (this._changes = new EventEmitter());\n  }\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(_emitDistinctChangesOnly = false) {\n    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n    this.dirty = true;\n    this._results = [];\n    this._changesDetected = false;\n    this._changes = null;\n    this.length = 0;\n    this.first = undefined;\n    this.last = undefined;\n    // This function should be declared on the prototype, but doing so there will cause the class\n    // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n    // the constructor.\n    // [Symbol.iterator](): Iterator<T> { ... }\n    const proto = QueryList.prototype;\n    if (!proto[Symbol.iterator]) proto[Symbol.iterator] = symbolIterator;\n  }\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index) {\n    return this._results[index];\n  }\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map(fn) {\n    return this._results.map(fn);\n  }\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn) {\n    return this._results.filter(fn);\n  }\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn) {\n    return this._results.find(fn);\n  }\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce(fn, init) {\n    return this._results.reduce(fn, init);\n  }\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn) {\n    this._results.forEach(fn);\n  }\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn) {\n    return this._results.some(fn);\n  }\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray() {\n    return this._results.slice();\n  }\n  toString() {\n    return this._results.toString();\n  }\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree, identityAccessor) {\n    // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n    // QueryList (but not for QueryList itself.)\n    const self = this;\n    self.dirty = false;\n    const newResultFlat = flatten$1(resultsTree);\n    if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n      self._results = newResultFlat;\n      self.length = newResultFlat.length;\n      self.last = newResultFlat[this.length - 1];\n      self.first = newResultFlat[0];\n    }\n  }\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges() {\n    if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);\n  }\n  /** internal */\n  setDirty() {\n    this.dirty = true;\n  }\n  /** internal */\n  destroy() {\n    this.changes.complete();\n    this.changes.unsubscribe();\n  }\n}\nSymbol.iterator;\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nclass TemplateRef {}\n/**\n * @internal\n * @nocollapse\n */\nTemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;\nconst ViewEngineTemplateRef = TemplateRef;\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {\n  constructor(_declarationLView, _declarationTContainer, elementRef) {\n    super();\n    this._declarationLView = _declarationLView;\n    this._declarationTContainer = _declarationTContainer;\n    this.elementRef = elementRef;\n  }\n  createEmbeddedView(context, injector) {\n    const embeddedTView = this._declarationTContainer.tView;\n    const embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16 /* LViewFlags.CheckAlways */, null, embeddedTView.declTNode, null, null, null, null, injector || null);\n    const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n    const declarationViewLQueries = this._declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n    renderView(embeddedTView, embeddedLView, context);\n    return new ViewRef(embeddedLView);\n  }\n};\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef() {\n  return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n  if (hostTNode.type & 4 /* TNodeType.Container */) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-hierarchy).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nclass ViewContainerRef {}\n/**\n * @internal\n * @nocollapse\n */\nViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef() {\n  const previousTNode = getCurrentTNode();\n  return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(_lContainer, _hostTNode, _hostLView) {\n    super();\n    this._lContainer = _lContainer;\n    this._hostTNode = _hostTNode;\n    this._hostLView = _hostLView;\n  }\n  get element() {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n  get injector() {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n  /** @deprecated No replacement */\n  get parentInjector() {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n  clear() {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n  get(index) {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n  get length() {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  createEmbeddedView(templateRef, context, indexOrOptions) {\n    let index;\n    let injector;\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n    const viewRef = templateRef.createEmbeddedView(context || {}, injector);\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index;\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' + 'and an options object as the second argument. This combination of arguments ' + 'is incompatible. You can either change the first argument to provide Component ' + 'type or change the second argument to be a number (representing an index at ' + 'which to insert the new component\\'s host view into this container)');\n      }\n      index = indexOrOptions;\n    } else {\n      if (ngDevMode) {\n        assertDefined(getComponentDef$1(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` + `Please check whether provided class has @Component decorator.`);\n        assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' + 'and a number (representing an index at which to insert the new component\\'s ' + 'host view into this container as the second argument. This combination of arguments ' + 'is incompatible. Please use an object as the second argument instead.');\n      }\n      const options = indexOrOptions || {};\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n      }\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n    }\n    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef$1(componentFactoryOrType));\n    const contextInjector = injector || this.parentInjector;\n    // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n    if (!environmentInjector && componentFactory.ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n      // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n      const result = _injector.get(EnvironmentInjector, null);\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n    const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, environmentInjector);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n  insert(viewRef, index) {\n    const lView = viewRef._lView;\n    const tView = lView[TVIEW];\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n      const prevIdx = this.indexOf(viewRef);\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT];\n        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    insertView(tView, lView, lContainer, adjustedIdx);\n    // Physical operation of adding the DOM nodes.\n    const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);\n    if (parentRNode !== null) {\n      addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n    viewRef.attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n    return viewRef;\n  }\n  move(viewRef, newIndex) {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n  indexOf(viewRef) {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n  remove(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n  detach(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new ViewRef(view) : null;\n  }\n  _adjustIndex(index, shift = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\nfunction getViewRefs(lContainer) {\n  return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(hostTNode, hostLView) {\n  ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  let lContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    let commentNode;\n    // If the host is an element container, the native host element is guaranteed to be a\n    // comment and we can reuse that comment as anchor element for the new LContainer.\n    // The comment node in question is already part of the DOM structure so we don't need to append\n    // it again.\n    if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n      commentNode = unwrapRNode(slotValue);\n    } else {\n      // If the host is a regular element, we have to insert a comment node manually which will\n      // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n      // manipulation to insert it.\n      const renderer = hostLView[RENDERER];\n      ngDevMode && ngDevMode.rendererCreateComment++;\n      commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n      const hostNative = getNativeByTNode(hostTNode, hostLView);\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);\n    }\n    hostLView[hostTNode.index] = lContainer = createLContainer(slotValue, hostLView, commentNode, hostTNode);\n    addToViewTree(hostLView, lContainer);\n  }\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\nclass LQuery_ {\n  constructor(queryList) {\n    this.queryList = queryList;\n    this.matches = null;\n  }\n  clone() {\n    return new LQuery_(this.queryList);\n  }\n  setDirty() {\n    this.queryList.setDirty();\n  }\n}\nclass LQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  createEmbeddedView(tView) {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries = [];\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n      return new LQueries_(viewLQueries);\n    }\n    return null;\n  }\n  insertView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  detachView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  dirtyQueriesWithMatches(tView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\nclass TQueryMetadata_ {\n  constructor(predicate, flags, read = null) {\n    this.predicate = predicate;\n    this.flags = flags;\n    this.read = read;\n  }\n}\nclass TQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  elementStart(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode) {\n    let queriesForTemplateRef = null;\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n  template(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n  getByIndex(index) {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n  get length() {\n    return this.queries.length;\n  }\n  track(tquery) {\n    this.queries.push(tquery);\n  }\n}\nclass TQuery_ {\n  constructor(metadata, nodeIndex = -1) {\n    this.metadata = metadata;\n    this.matches = null;\n    this.indexInDeclarationView = -1;\n    this.crossesNgTemplate = false;\n    /**\n     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n     * elements in a template.\n     */\n    this._appliesToNextNode = true;\n    this._declarationNodeIndex = nodeIndex;\n  }\n  elementStart(tView, tNode) {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n  template(tView, tNode) {\n    this.elementStart(tView, tNode);\n  }\n  embeddedTView(tNode, childQueryIndex) {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n  isApplyingToNode(tNode) {\n    if (this._appliesToNextNode && (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && parent.type & 8 /* TNodeType.ElementContainer */ && parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n  matchTNode(tView, tNode) {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if (predicate === TemplateRef) {\n        if (tNode.type & 4 /* TNodeType.Container */) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4 /* TNodeType.Container */) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n  addMatch(tNodeIdx, matchIdx) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1];\n      }\n    }\n  }\n  return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n  }\n}\nfunction createSpecialToken(lView, tNode, read) {\n  if (read === ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    return createContainerRef(tNode, lView);\n  } else {\n    ngDevMode && throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n  }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n  const lQuery = lView[QUERIES].queries[queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches;\n    const result = [];\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx];\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n  return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n  const tQuery = tView.queries.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2]);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n        const declarationLContainer = lView[-tNodeIdx];\n        ngDevMode && assertLContainer(declarationLContainer);\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nfunction ɵɵqueryRefresh(queryList) {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n  setCurrentQueryIndex(queryIndex + 1);\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */)) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticViewQueries = true;\n    }\n  }\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode();\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticContentQueries = true;\n    }\n  }\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nfunction ɵɵloadQuery() {\n  return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\nfunction loadQueryInternal(lView, queryIndex) {\n  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n  return lView[QUERIES].queries[queryIndex].queryList;\n}\nfunction createLQuery(tView, lView, flags) {\n  const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();\n  lView[QUERIES].queries.push(new LQuery_(queryList));\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n  }\n}\nfunction getTQuery(tView, index) {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries.getByIndex(index);\n}\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n  return createTemplateRef(tNode, lView);\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreEnv = (() => ({\n  'ɵɵattribute': ɵɵattribute,\n  'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n  'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n  'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n  'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n  'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n  'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n  'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n  'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n  'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n  'ɵɵdefineComponent': ɵɵdefineComponent,\n  'ɵɵdefineDirective': ɵɵdefineDirective,\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵdefineNgModule': ɵɵdefineNgModule,\n  'ɵɵdefinePipe': ɵɵdefinePipe,\n  'ɵɵdirectiveInject': ɵɵdirectiveInject,\n  'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinjectAttribute': ɵɵinjectAttribute,\n  'ɵɵinvalidFactory': ɵɵinvalidFactory,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n  'ɵɵresetView': ɵɵresetView,\n  'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\n  'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n  'ɵɵProvidersFeature': ɵɵProvidersFeature,\n  'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n  'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n  'ɵɵStandaloneFeature': ɵɵStandaloneFeature,\n  'ɵɵnextContext': ɵɵnextContext,\n  'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n  'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n  'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n  'ɵɵenableBindings': ɵɵenableBindings,\n  'ɵɵdisableBindings': ɵɵdisableBindings,\n  'ɵɵelementStart': ɵɵelementStart,\n  'ɵɵelementEnd': ɵɵelementEnd,\n  'ɵɵelement': ɵɵelement,\n  'ɵɵelementContainerStart': ɵɵelementContainerStart,\n  'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n  'ɵɵelementContainer': ɵɵelementContainer,\n  'ɵɵpureFunction0': ɵɵpureFunction0,\n  'ɵɵpureFunction1': ɵɵpureFunction1,\n  'ɵɵpureFunction2': ɵɵpureFunction2,\n  'ɵɵpureFunction3': ɵɵpureFunction3,\n  'ɵɵpureFunction4': ɵɵpureFunction4,\n  'ɵɵpureFunction5': ɵɵpureFunction5,\n  'ɵɵpureFunction6': ɵɵpureFunction6,\n  'ɵɵpureFunction7': ɵɵpureFunction7,\n  'ɵɵpureFunction8': ɵɵpureFunction8,\n  'ɵɵpureFunctionV': ɵɵpureFunctionV,\n  'ɵɵgetCurrentView': ɵɵgetCurrentView,\n  'ɵɵrestoreView': ɵɵrestoreView,\n  'ɵɵlistener': ɵɵlistener,\n  'ɵɵprojection': ɵɵprojection,\n  'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n  'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n  'ɵɵpipeBind1': ɵɵpipeBind1,\n  'ɵɵpipeBind2': ɵɵpipeBind2,\n  'ɵɵpipeBind3': ɵɵpipeBind3,\n  'ɵɵpipeBind4': ɵɵpipeBind4,\n  'ɵɵpipeBindV': ɵɵpipeBindV,\n  'ɵɵprojectionDef': ɵɵprojectionDef,\n  'ɵɵhostProperty': ɵɵhostProperty,\n  'ɵɵproperty': ɵɵproperty,\n  'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n  'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n  'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n  'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n  'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n  'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n  'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n  'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n  'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n  'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n  'ɵɵpipe': ɵɵpipe,\n  'ɵɵqueryRefresh': ɵɵqueryRefresh,\n  'ɵɵviewQuery': ɵɵviewQuery,\n  'ɵɵloadQuery': ɵɵloadQuery,\n  'ɵɵcontentQuery': ɵɵcontentQuery,\n  'ɵɵreference': ɵɵreference,\n  'ɵɵclassMap': ɵɵclassMap,\n  'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n  'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n  'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n  'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n  'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n  'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n  'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n  'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n  'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n  'ɵɵstyleMap': ɵɵstyleMap,\n  'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,\n  'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,\n  'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,\n  'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,\n  'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,\n  'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,\n  'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,\n  'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,\n  'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,\n  'ɵɵstyleProp': ɵɵstyleProp,\n  'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n  'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n  'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n  'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n  'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n  'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n  'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n  'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n  'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n  'ɵɵclassProp': ɵɵclassProp,\n  'ɵɵadvance': ɵɵadvance,\n  'ɵɵtemplate': ɵɵtemplate,\n  'ɵɵtext': ɵɵtext,\n  'ɵɵtextInterpolate': ɵɵtextInterpolate,\n  'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n  'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n  'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n  'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n  'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n  'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n  'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n  'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n  'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n  'ɵɵi18n': ɵɵi18n,\n  'ɵɵi18nAttributes': ɵɵi18nAttributes,\n  'ɵɵi18nExp': ɵɵi18nExp,\n  'ɵɵi18nStart': ɵɵi18nStart,\n  'ɵɵi18nEnd': ɵɵi18nEnd,\n  'ɵɵi18nApply': ɵɵi18nApply,\n  'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n  'ɵɵresolveWindow': ɵɵresolveWindow,\n  'ɵɵresolveDocument': ɵɵresolveDocument,\n  'ɵɵresolveBody': ɵɵresolveBody,\n  'ɵɵsetComponentScope': ɵɵsetComponentScope,\n  'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n  'ɵɵregisterNgModuleType': registerNgModuleType,\n  'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n  'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n  'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n  'ɵɵsanitizeScript': ɵɵsanitizeScript,\n  'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n  'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n  'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n  'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n  'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\n  'forwardRef': forwardRef,\n  'resolveForwardRef': resolveForwardRef\n}))();\nfunction patchModuleCompilation() {\n  // Does nothing, but exists as a target for patching.\n}\nfunction isModuleWithProviders$1(value) {\n  return value.ngModule !== undefined;\n}\nfunction isNgModule$1(value) {\n  return !!getNgModuleDef(value);\n}\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n  moduleQueue.push({\n    moduleType,\n    ngModule\n  });\n}\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {\n          moduleType,\n          ngModule\n        } = moduleQueue[i];\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n  patchModuleCompilation();\n  compileNgModuleDefs(moduleType, ngModule);\n  if (ngModule.id !== undefined) {\n    registerNgModuleType(moduleType, ngModule.id);\n  }\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten$1(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          exports: flatten$1(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten$1(ngModule.schemas) : null,\n          id: ngModule.id || null\n        });\n        // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n      return ngModuleDef;\n    }\n  });\n  let ngFactoryDef = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  let ngInjectorDef = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n        const meta = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]\n        };\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n  const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n  const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` + 'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n  return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n  if (verifiedNgModule.get(moduleType)) return;\n  // skip verifications of standalone components, directives, and pipes\n  if (isStandalone(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef;\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType);\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDef(moduleType, true);\n  }\n  const errors = [];\n  const declarations = maybeUnwrapFn$1(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn$1(ngModuleDef.imports);\n  flatten$1(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n  });\n  const exports = maybeUnwrapFn$1(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  declarations.forEach(declarationType => verifyNotStandalone(declarationType, moduleType));\n  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten$1(imports.map(computeCombinedExports)).map(resolveForwardRef)];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n  const ngModule = getAnnotation(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports && flatten$1(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n      verifySemanticsOfNgModuleImport(mod, moduleType);\n      verifySemanticsOfNgModuleDef(mod, false, moduleType);\n    });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n    ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n  }\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function verifyDeclarationsHaveDefinitions(type) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n  function verifyDirectivesHaveSelector(type) {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n    if (!getComponentDef$1(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n  function verifyNotStandalone(type, moduleType) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (def?.standalone) {\n      const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n      errors.push(generateStandaloneInDeclarationsError(type, location));\n    }\n  }\n  function verifyExportsAreDeclaredOrReExported(type) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef$1(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef$1(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n  function verifyDeclarationIsUnique(type, suppressErrors) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n  function verifyComponentIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule && !isStandalone(type)) {\n      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n  function verifyCorrectBootstrapType(type) {\n    type = resolveForwardRef(type);\n    if (!getComponentDef$1(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n    if (isStandalone(type)) {\n      // Note: this error should be the same as the\n      // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n      errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` + `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` + `function for bootstrap instead.`);\n    }\n  }\n  function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    if (getComponentDef$1(type)) {\n      // We know we are component\n      const component = getAnnotation(type, 'Component');\n      if (component && component.entryComponents) {\n        deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n      }\n    }\n  }\n  function verifySemanticsOfNgModuleImport(type, importingModule) {\n    type = resolveForwardRef(type);\n    const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n    if (directiveDef !== null && !directiveDef.standalone) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null && !pipeDef.standalone) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n  let annotation = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n  function collect(annotations) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n  function readAnnotation(decorator) {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = decorator;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\nfunction resetCompiledComponents() {\n  ownerNgModule = new WeakMap();\n  verifiedNgModule = new WeakMap();\n  moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type);\n  // a standalone component, directive or pipe\n  if (ngModuleDef === null) {\n    return [type];\n  }\n  return [...flatten$1(maybeUnwrapFn$1(ngModuleDef.exports).map(type => {\n    const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n  const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n  const transitiveScopes = transitiveScopesFor(moduleType);\n  declarations.forEach(declaration => {\n    declaration = resolveForwardRef(declaration);\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration;\n      const componentDef = getComponentDef$1(component);\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      declaration.ngSelectorScope = moduleType;\n    }\n  });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef$1(dir) : getDirectiveDef(dir)).filter(def => !!def);\n  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n  componentDef.schemas = transitiveScopes.schemas;\n  // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n  componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nfunction transitiveScopesFor(type) {\n  if (isNgModule$1(type)) {\n    return transitiveScopesForNgModule(type);\n  } else if (isStandalone(type)) {\n    const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n    if (directiveDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set([type]),\n          pipes: new Set()\n        }\n      };\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set(),\n          pipes: new Set([type])\n        }\n      };\n    }\n  }\n  // TODO: change the error message to be more user-facing and take standalone into account\n  throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nfunction transitiveScopesForNgModule(moduleType) {\n  const def = getNgModuleDef(moduleType, true);\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n  const scopes = {\n    schemas: def.schemas || null,\n    compilation: {\n      directives: new Set(),\n      pipes: new Set()\n    },\n    exported: {\n      directives: new Set(),\n      pipes: new Set()\n    }\n  };\n  maybeUnwrapFn$1(def.imports).forEach(imported => {\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    const importedScope = transitiveScopesFor(imported);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n  maybeUnwrapFn$1(def.declarations).forEach(declared => {\n    const declaredWithDefs = declared;\n    if (getPipeDef$1(declaredWithDefs)) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n      // had its template compiled yet. In either case, it gets added to the compilation's\n      // directives.\n      scopes.compilation.directives.add(declared);\n    }\n  });\n  maybeUnwrapFn$1(def.exports).forEach(exported => {\n    const exportedType = exported;\n    // Either the type is a module, a pipe, or a component/directive (which may not have a\n    // ɵcmp as it might be compiled asynchronously).\n    if (isNgModule$1(exportedType)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      const exportedScope = transitiveScopesFor(exportedType);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (getPipeDef$1(exportedType)) {\n      scopes.exported.pipes.add(exportedType);\n    } else {\n      scopes.exported.directives.add(exportedType);\n    }\n  });\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\nfunction expandModuleWithProviders(value) {\n  if (isModuleWithProviders$1(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\nlet _nextReferenceId = 0;\nclass MetadataOverrider {\n  constructor() {\n    this._references = new Map();\n  }\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata(metadataClass, oldMetadata, override) {\n    const props = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach(prop => props[prop] = oldMetadata[prop]);\n    }\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(props);\n  }\n}\nfunction removeMetadata(metadata, remove, references) {\n  const removeObjects = new Set();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (Array.isArray(removeValue)) {\n      removeValue.forEach(value => {\n        removeObjects.add(_propHashKey(prop, value, references));\n      });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (Array.isArray(propValue)) {\n      metadata[prop] = propValue.filter(value => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\nfunction addMetadata(metadata, add) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && Array.isArray(propValue)) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\nfunction setMetadata(metadata, set) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\nfunction _propHashKey(propName, propValue, references) {\n  let nextObjectId = 0;\n  const objectIds = new Map();\n  const replacer = (key, value) => {\n    if (value !== null && typeof value === 'object') {\n      if (objectIds.has(value)) {\n        return objectIds.get(value);\n      }\n      // Record an id for this object such that any later references use the object's id instead\n      // of the object itself, in order to break cyclic pointers in objects.\n      objectIds.set(value, `ɵobj#${nextObjectId++}`);\n      // The first time an object is seen the object itself is serialized.\n      return value;\n    } else if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\nfunction _serializeReference(ref, references) {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\nfunction _valueProps(obj) {\n  const props = [];\n  // regular public props\n  Object.keys(obj).forEach(prop => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach(protoProp => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\nconst reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nclass OverrideResolver {\n  constructor() {\n    this.overrides = new Map();\n    this.resolved = new Map();\n  }\n  addOverride(type, override) {\n    const overrides = this.overrides.get(type) || [];\n    overrides.push(override);\n    this.overrides.set(type, overrides);\n    this.resolved.delete(type);\n  }\n  setOverrides(overrides) {\n    this.overrides.clear();\n    overrides.forEach(([type, override]) => {\n      this.addOverride(type, override);\n    });\n  }\n  getAnnotation(type) {\n    const annotations = reflection.annotations(type);\n    // Try to find the nearest known Type annotation and make sure that this annotation is an\n    // instance of the type we are looking for, so we can use it for resolution. Note: there might\n    // be multiple known annotations found due to the fact that Components can extend Directives (so\n    // both Directive and Component annotations would be present), so we always check if the known\n    // annotation has the right type.\n    for (let i = annotations.length - 1; i >= 0; i--) {\n      const annotation = annotations[i];\n      const isKnownType = annotation instanceof Directive || annotation instanceof Component || annotation instanceof Pipe || annotation instanceof NgModule;\n      if (isKnownType) {\n        return annotation instanceof this.type ? annotation : null;\n      }\n    }\n    return null;\n  }\n  resolve(type) {\n    let resolved = this.resolved.get(type) || null;\n    if (!resolved) {\n      resolved = this.getAnnotation(type);\n      if (resolved) {\n        const overrides = this.overrides.get(type);\n        if (overrides) {\n          const overrider = new MetadataOverrider();\n          overrides.forEach(override => {\n            resolved = overrider.overrideMetadata(this.type, resolved, override);\n          });\n        }\n      }\n      this.resolved.set(type, resolved);\n    }\n    return resolved;\n  }\n}\nclass DirectiveResolver extends OverrideResolver {\n  get type() {\n    return Directive;\n  }\n}\nclass ComponentResolver extends OverrideResolver {\n  get type() {\n    return Component;\n  }\n}\nclass PipeResolver extends OverrideResolver {\n  get type() {\n    return Pipe;\n  }\n}\nclass NgModuleResolver extends OverrideResolver {\n  get type() {\n    return NgModule;\n  }\n}\nvar TestingModuleOverride;\n(function (TestingModuleOverride) {\n  TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n  TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\nfunction isTestingModuleOverride(value) {\n  return value === TestingModuleOverride.DECLARATION || value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\nfunction assertNoStandaloneComponents(types, resolver, location) {\n  types.forEach(type => {\n    const component = resolver.resolve(type);\n    if (component && component.standalone) {\n      throw new Error(generateStandaloneInDeclarationsError(type, location));\n    }\n  });\n}\nclass TestBedCompiler {\n  constructor(platform, additionalModuleTypes) {\n    this.platform = platform;\n    this.additionalModuleTypes = additionalModuleTypes;\n    this.originalComponentResolutionQueue = null;\n    // Testing module configuration\n    this.declarations = [];\n    this.imports = [];\n    this.providers = [];\n    this.schemas = [];\n    // Queues of components/directives/pipes that should be recompiled.\n    this.pendingComponents = new Set();\n    this.pendingDirectives = new Set();\n    this.pendingPipes = new Set();\n    // Keep track of all components and directives, so we can patch Providers onto defs later.\n    this.seenComponents = new Set();\n    this.seenDirectives = new Set();\n    // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n    this.overriddenModules = new Set();\n    // Store resolved styles for Components that have template overrides present and `styleUrls`\n    // defined at the same time.\n    this.existingComponentStyles = new Map();\n    this.resolvers = initResolvers();\n    this.componentToModuleScope = new Map();\n    // Map that keeps initial version of component/directive/pipe defs in case\n    // we compile a Type again, thus overriding respective static fields. This is\n    // required to make sure we restore defs to their initial states between test runs.\n    // Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of an\n    // NgModule), store all of them in a map.\n    this.initialNgDefs = new Map();\n    // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n    // defs in case TestBed makes changes to the originals.\n    this.defCleanupOps = [];\n    this._injector = null;\n    this.compilerProviders = null;\n    this.providerOverrides = [];\n    this.rootProviderOverrides = [];\n    // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n    // module's provider list.\n    this.providerOverridesByModule = new Map();\n    this.providerOverridesByToken = new Map();\n    this.scopesWithOverriddenProviders = new Set();\n    this.testModuleRef = null;\n    class DynamicTestModule {}\n    this.testModuleType = DynamicTestModule;\n  }\n  setCompilerProviders(providers) {\n    this.compilerProviders = providers;\n    this._injector = null;\n  }\n  configureTestingModule(moduleDef) {\n    // Enqueue any compilation tasks for the directly declared component.\n    if (moduleDef.declarations !== undefined) {\n      // Verify that there are no standalone components\n      assertNoStandaloneComponents(moduleDef.declarations, this.resolvers.component, '\"TestBed.configureTestingModule\" call');\n      this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n      this.declarations.push(...moduleDef.declarations);\n    }\n    // Enqueue any compilation tasks for imported modules.\n    if (moduleDef.imports !== undefined) {\n      this.queueTypesFromModulesArray(moduleDef.imports);\n      this.imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.providers !== undefined) {\n      this.providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.schemas !== undefined) {\n      this.schemas.push(...moduleDef.schemas);\n    }\n  }\n  overrideModule(ngModule, override) {\n    this.overriddenModules.add(ngModule);\n    // Compile the module right away.\n    this.resolvers.module.addOverride(ngModule, override);\n    const metadata = this.resolvers.module.resolve(ngModule);\n    if (metadata === null) {\n      throw invalidTypeError(ngModule.name, 'NgModule');\n    }\n    this.recompileNgModule(ngModule, metadata);\n    // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n    // new declarations or imported modules. Ingest any possible new types and add them to the\n    // current queue.\n    this.queueTypesFromModulesArray([ngModule]);\n  }\n  overrideComponent(component, override) {\n    this.verifyNoStandaloneFlagOverrides(component, override);\n    this.resolvers.component.addOverride(component, override);\n    this.pendingComponents.add(component);\n  }\n  overrideDirective(directive, override) {\n    this.verifyNoStandaloneFlagOverrides(directive, override);\n    this.resolvers.directive.addOverride(directive, override);\n    this.pendingDirectives.add(directive);\n  }\n  overridePipe(pipe, override) {\n    this.verifyNoStandaloneFlagOverrides(pipe, override);\n    this.resolvers.pipe.addOverride(pipe, override);\n    this.pendingPipes.add(pipe);\n  }\n  verifyNoStandaloneFlagOverrides(type, override) {\n    if (override.add?.hasOwnProperty('standalone') || override.set?.hasOwnProperty('standalone') || override.remove?.hasOwnProperty('standalone')) {\n      throw new Error(`An override for the ${type.name} class has the \\`standalone\\` flag. ` + `Changing the \\`standalone\\` flag via TestBed overrides is not supported.`);\n    }\n  }\n  overrideProvider(token, provider) {\n    let providerDef;\n    if (provider.useFactory !== undefined) {\n      providerDef = {\n        provide: token,\n        useFactory: provider.useFactory,\n        deps: provider.deps || [],\n        multi: provider.multi\n      };\n    } else if (provider.useValue !== undefined) {\n      providerDef = {\n        provide: token,\n        useValue: provider.useValue,\n        multi: provider.multi\n      };\n    } else {\n      providerDef = {\n        provide: token\n      };\n    }\n    const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n    const providedIn = injectableDef === null ? null : resolveForwardRef$1(injectableDef.providedIn);\n    const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\n    overridesBucket.push(providerDef);\n    // Keep overrides grouped by token as well for fast lookups using token\n    this.providerOverridesByToken.set(token, providerDef);\n    if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\n      const existingOverrides = this.providerOverridesByModule.get(providedIn);\n      if (existingOverrides !== undefined) {\n        existingOverrides.push(providerDef);\n      } else {\n        this.providerOverridesByModule.set(providedIn, [providerDef]);\n      }\n    }\n  }\n  overrideTemplateUsingTestingModule(type, template) {\n    const def = type[ɵNG_COMP_DEF];\n    const hasStyleUrls = () => {\n      const metadata = this.resolvers.component.resolve(type);\n      return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n    };\n    const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n    // In Ivy, compiling a component does not require knowing the module providing the\n    // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n    // overrideComponent. Important: overriding template requires full Component re-compilation,\n    // which may fail in case styleUrls are also present (thus Component is considered as required\n    // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n    // preserve current styles available on Component def and restore styles back once compilation\n    // is complete.\n    const override = overrideStyleUrls ? {\n      template,\n      styles: [],\n      styleUrls: []\n    } : {\n      template\n    };\n    this.overrideComponent(type, {\n      set: override\n    });\n    if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n      this.existingComponentStyles.set(type, def.styles);\n    }\n    // Set the component's scope to be the testing module.\n    this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n  }\n  compileComponents() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.clearComponentResolutionQueue();\n      // Run compilers for all queued types.\n      let needsAsyncResources = _this.compileTypesSync();\n      // compileComponents() should not be async unless it needs to be.\n      if (needsAsyncResources) {\n        let resourceLoader;\n        let resolver = url => {\n          if (!resourceLoader) {\n            resourceLoader = _this.injector.get(ResourceLoader);\n          }\n          return Promise.resolve(resourceLoader.get(url));\n        };\n        yield resolveComponentResources(resolver);\n      }\n    })();\n  }\n  finalize() {\n    // One last compile\n    this.compileTypesSync();\n    // Create the testing module itself.\n    this.compileTestModule();\n    this.applyTransitiveScopes();\n    this.applyProviderOverrides();\n    // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n    // Components have `styleUrls` fields defined and template override was requested.\n    this.patchComponentsWithExistingStyles();\n    // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n    // every component.\n    this.componentToModuleScope.clear();\n    const parentInjector = this.platform.injector;\n    this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n    // ApplicationInitStatus.runInitializers() is marked @internal to core.\n    // Cast it to any before accessing it.\n    this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\n    // Set locale ID after running app initializers, since locale information might be updated while\n    // running initializers. This is also consistent with the execution order while bootstrapping an\n    // app (see `packages/core/src/application_ref.ts` file).\n    const localeId = this.testModuleRef.injector.get(LOCALE_ID$1, ɵDEFAULT_LOCALE_ID);\n    ɵsetLocaleId(localeId);\n    return this.testModuleRef;\n  }\n  /**\n   * @internal\n   */\n  _compileNgModuleSync(moduleType) {\n    this.queueTypesFromModulesArray([moduleType]);\n    this.compileTypesSync();\n    this.applyProviderOverrides();\n    this.applyProviderOverridesInScope(moduleType);\n    this.applyTransitiveScopes();\n  }\n  /**\n   * @internal\n   */\n  _compileNgModuleAsync(moduleType) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.queueTypesFromModulesArray([moduleType]);\n      yield _this2.compileComponents();\n      _this2.applyProviderOverrides();\n      _this2.applyProviderOverridesInScope(moduleType);\n      _this2.applyTransitiveScopes();\n    })();\n  }\n  /**\n   * @internal\n   */\n  _getModuleResolver() {\n    return this.resolvers.module;\n  }\n  /**\n   * @internal\n   */\n  _getComponentFactories(moduleType) {\n    return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n      const componentDef = declaration.ɵcmp;\n      componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n      return factories;\n    }, []);\n  }\n  compileTypesSync() {\n    // Compile all queued components, directives, pipes.\n    let needsAsyncResources = false;\n    this.pendingComponents.forEach(declaration => {\n      needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n      const metadata = this.resolvers.component.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Component');\n      }\n      this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n      ɵcompileComponent(declaration, metadata);\n    });\n    this.pendingComponents.clear();\n    this.pendingDirectives.forEach(declaration => {\n      const metadata = this.resolvers.directive.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Directive');\n      }\n      this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n      ɵcompileDirective(declaration, metadata);\n    });\n    this.pendingDirectives.clear();\n    this.pendingPipes.forEach(declaration => {\n      const metadata = this.resolvers.pipe.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Pipe');\n      }\n      this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n      ɵcompilePipe(declaration, metadata);\n    });\n    this.pendingPipes.clear();\n    return needsAsyncResources;\n  }\n  applyTransitiveScopes() {\n    if (this.overriddenModules.size > 0) {\n      // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n      // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n      // collect all affected modules and reset scopes to force their re-calculation.\n      const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n      const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n      if (affectedModules.size > 0) {\n        affectedModules.forEach(moduleType => {\n          this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n          moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n        });\n      }\n    }\n    const moduleToScope = new Map();\n    const getScopeOfModule = moduleType => {\n      if (!moduleToScope.has(moduleType)) {\n        const isTestingModule = isTestingModuleOverride(moduleType);\n        const realType = isTestingModule ? this.testModuleType : moduleType;\n        moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n      }\n      return moduleToScope.get(moduleType);\n    };\n    this.componentToModuleScope.forEach((moduleType, componentType) => {\n      const moduleScope = getScopeOfModule(moduleType);\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\n      // `tView` that is stored on component def contains information about directives and pipes\n      // that are in the scope of this component. Patching component scope will cause `tView` to be\n      // changed. Store original `tView` before patching scope, so the `tView` (including scope\n      // information) is restored back to its previous/original state before running next test.\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n      ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n    });\n    this.componentToModuleScope.clear();\n  }\n  applyProviderOverrides() {\n    const maybeApplyOverrides = field => type => {\n      const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n      const metadata = resolver.resolve(type);\n      if (this.hasProviderOverrides(metadata.providers)) {\n        this.patchDefWithProviderOverrides(type, field);\n      }\n    };\n    this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n    this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n    this.seenComponents.clear();\n    this.seenDirectives.clear();\n  }\n  /**\n   * Applies provider overrides to a given type (either an NgModule or a standalone component)\n   * and all imported NgModules and standalone components recursively.\n   */\n  applyProviderOverridesInScope(type) {\n    const hasScope = isStandaloneComponent(type) || isNgModule(type);\n    // The function can be re-entered recursively while inspecting dependencies\n    // of an NgModule or a standalone component. Exit early if we come across a\n    // type that can not have a scope (directive or pipe) or the type is already\n    // processed earlier.\n    if (!hasScope || this.scopesWithOverriddenProviders.has(type)) {\n      return;\n    }\n    this.scopesWithOverriddenProviders.add(type);\n    // NOTE: the line below triggers JIT compilation of the module injector,\n    // which also invokes verification of the NgModule semantics, which produces\n    // detailed error messages. The fact that the code relies on this line being\n    // present here is suspicious and should be refactored in a way that the line\n    // below can be moved (for ex. after an early exit check below).\n    const injectorDef = type[ɵNG_INJ_DEF];\n    // No provider overrides, exit early.\n    if (this.providerOverridesByToken.size === 0) return;\n    if (isStandaloneComponent(type)) {\n      // Visit all component dependencies and override providers there.\n      const def = getComponentDef(type);\n      const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n      for (const dependency of dependencies) {\n        this.applyProviderOverridesInScope(dependency);\n      }\n    } else {\n      const providers = [...injectorDef.providers, ...(this.providerOverridesByModule.get(type) || [])];\n      if (this.hasProviderOverrides(providers)) {\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, type);\n        this.storeFieldOfDefOnType(type, ɵNG_INJ_DEF, 'providers');\n        injectorDef.providers = this.getOverriddenProviders(providers);\n      }\n      // Apply provider overrides to imported modules recursively\n      const moduleDef = type[ɵNG_MOD_DEF];\n      const imports = maybeUnwrapFn(moduleDef.imports);\n      for (const importedModule of imports) {\n        this.applyProviderOverridesInScope(importedModule);\n      }\n      // Also override the providers on any ModuleWithProviders imports since those don't appear in\n      // the moduleDef.\n      for (const importedModule of flatten(injectorDef.imports)) {\n        if (isModuleWithProviders(importedModule)) {\n          this.defCleanupOps.push({\n            object: importedModule,\n            fieldName: 'providers',\n            originalValue: importedModule.providers\n          });\n          importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n        }\n      }\n    }\n  }\n  patchComponentsWithExistingStyles() {\n    this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n    this.existingComponentStyles.clear();\n  }\n  queueTypeArray(arr, moduleType) {\n    for (const value of arr) {\n      if (Array.isArray(value)) {\n        this.queueTypeArray(value, moduleType);\n      } else {\n        this.queueType(value, moduleType);\n      }\n    }\n  }\n  recompileNgModule(ngModule, metadata) {\n    // Cache the initial ngModuleDef as it will be overwritten.\n    this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n    this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n    ɵcompileNgModuleDefs(ngModule, metadata);\n  }\n  queueType(type, moduleType) {\n    const component = this.resolvers.component.resolve(type);\n    if (component) {\n      // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n      // missing. That might happen in case a class without any Angular decorators extends another\n      // class where Component/Directive/Pipe decorator is defined.\n      if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n        this.pendingComponents.add(type);\n      }\n      this.seenComponents.add(type);\n      // Keep track of the module which declares this component, so later the component's scope\n      // can be set correctly. If the component has already been recorded here, then one of several\n      // cases is true:\n      // * the module containing the component was imported multiple times (common).\n      // * the component is declared in multiple modules (which is an error).\n      // * the component was in 'declarations' of the testing module, and also in an imported module\n      //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n      // * overrideTemplateUsingTestingModule was called for the component in which case the module\n      //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n      //\n      // If the component was previously in the testing module's 'declarations' (meaning the\n      // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n      // real module, which was imported. This pattern is understood to mean that the component\n      // should use its original scope, but that the testing module should also contain the\n      // component in its scope.\n      //\n      // Note: standalone components have no associated NgModule, so the `moduleType` can be `null`.\n      if (moduleType !== null && (!this.componentToModuleScope.has(type) || this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION)) {\n        this.componentToModuleScope.set(type, moduleType);\n      }\n      return;\n    }\n    const directive = this.resolvers.directive.resolve(type);\n    if (directive) {\n      if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n        this.pendingDirectives.add(type);\n      }\n      this.seenDirectives.add(type);\n      return;\n    }\n    const pipe = this.resolvers.pipe.resolve(type);\n    if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n      this.pendingPipes.add(type);\n      return;\n    }\n  }\n  queueTypesFromModulesArray(arr) {\n    // Because we may encounter the same NgModule or a standalone Component while processing\n    // the dependencies of an NgModule or a standalone Component, we cache them in this set so we\n    // can skip ones that have already been seen encountered. In some test setups, this caching\n    // resulted in 10X runtime improvement.\n    const processedDefs = new Set();\n    const queueTypesFromModulesArrayRecur = arr => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          queueTypesFromModulesArrayRecur(value);\n        } else if (hasNgModuleDef(value)) {\n          const def = value.ɵmod;\n          if (processedDefs.has(def)) {\n            continue;\n          }\n          processedDefs.add(def);\n          // Look through declarations, imports, and exports, and queue\n          // everything found there.\n          this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n        } else if (isModuleWithProviders(value)) {\n          queueTypesFromModulesArrayRecur([value.ngModule]);\n        } else if (isStandaloneComponent(value)) {\n          this.queueType(value, null);\n          const def = getComponentDef(value);\n          if (processedDefs.has(def)) {\n            continue;\n          }\n          processedDefs.add(def);\n          const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n          dependencies.forEach(dependency => {\n            // Note: in AOT, the `dependencies` might also contain regular\n            // (NgModule-based) Component, Directive and Pipes, so we handle\n            // them separately and proceed with recursive process for standalone\n            // Components and NgModules only.\n            if (isStandaloneComponent(dependency) || hasNgModuleDef(dependency)) {\n              queueTypesFromModulesArrayRecur([dependency]);\n            } else {\n              this.queueType(dependency, null);\n            }\n          });\n        }\n      }\n    };\n    queueTypesFromModulesArrayRecur(arr);\n  }\n  // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n  // that import (even transitively) an overridden one. For all affected modules we need to\n  // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n  // of this function is to collect all affected modules in a set for further processing. Example:\n  // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n  // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n  // invalidated with the override.\n  collectModulesAffectedByOverrides(arr) {\n    const seenModules = new Set();\n    const affectedModules = new Set();\n    const calcAffectedModulesRecur = (arr, path) => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          // If the value is an array, just flatten it (by invoking this function recursively),\n          // keeping \"path\" the same.\n          calcAffectedModulesRecur(value, path);\n        } else if (hasNgModuleDef(value)) {\n          if (seenModules.has(value)) {\n            // If we've seen this module before and it's included into \"affected modules\" list, mark\n            // the whole path that leads to that module as affected, but do not descend into its\n            // imports, since we already examined them before.\n            if (affectedModules.has(value)) {\n              path.forEach(item => affectedModules.add(item));\n            }\n            continue;\n          }\n          seenModules.add(value);\n          if (this.overriddenModules.has(value)) {\n            path.forEach(item => affectedModules.add(item));\n          }\n          // Examine module imports recursively to look for overridden modules.\n          const moduleDef = value[ɵNG_MOD_DEF];\n          calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n        }\n      }\n    };\n    calcAffectedModulesRecur(arr, []);\n    return affectedModules;\n  }\n  /**\n   * Preserve an original def (such as ɵmod, ɵinj, etc) before applying an override.\n   * Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of\n   * an NgModule). If there is a def in a set already, don't override it, since\n   * an original one should be restored at the end of a test.\n   */\n  maybeStoreNgDef(prop, type) {\n    if (!this.initialNgDefs.has(type)) {\n      this.initialNgDefs.set(type, new Map());\n    }\n    const currentDefs = this.initialNgDefs.get(type);\n    if (!currentDefs.has(prop)) {\n      const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n      currentDefs.set(prop, currentDef);\n    }\n  }\n  storeFieldOfDefOnType(type, defField, fieldName) {\n    const def = type[defField];\n    const originalValue = def[fieldName];\n    this.defCleanupOps.push({\n      object: def,\n      fieldName,\n      originalValue\n    });\n  }\n  /**\n   * Clears current components resolution queue, but stores the state of the queue, so we can\n   * restore it later. Clearing the queue is required before we try to compile components (via\n   * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n   */\n  clearComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue === null) {\n      this.originalComponentResolutionQueue = new Map();\n    }\n    clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n  }\n  /*\n   * Restores component resolution queue to the previously saved state. This operation is performed\n   * as a part of restoring the state after completion of the current set of tests (that might\n   * potentially mutate the state).\n   */\n  restoreComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue !== null) {\n      restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n      this.originalComponentResolutionQueue = null;\n    }\n  }\n  restoreOriginalState() {\n    // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n    // case there were multiple overrides for the same field).\n    forEachRight(this.defCleanupOps, op => {\n      op.object[op.fieldName] = op.originalValue;\n    });\n    // Restore initial component/directive/pipe defs\n    this.initialNgDefs.forEach((defs, type) => {\n      defs.forEach((descriptor, prop) => {\n        if (!descriptor) {\n          // Delete operations are generally undesirable since they have performance\n          // implications on objects they were applied to. In this particular case, situations\n          // where this code is invoked should be quite rare to cause any noticeable impact,\n          // since it's applied only to some test cases (for example when class with no\n          // annotations extends some @Component) when we need to clear 'ɵcmp' field on a given\n          // class to restore its original state (before applying overrides and running tests).\n          delete type[prop];\n        } else {\n          Object.defineProperty(type, prop, descriptor);\n        }\n      });\n    });\n    this.initialNgDefs.clear();\n    this.scopesWithOverriddenProviders.clear();\n    this.restoreComponentResolutionQueue();\n    // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n    ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n  }\n  compileTestModule() {\n    class RootScopeModule {}\n    ɵcompileNgModuleDefs(RootScopeModule, {\n      providers: [...this.rootProviderOverrides]\n    });\n    const ngZone = new NgZone({\n      enableLongStackTrace: true\n    });\n    const providers = [{\n      provide: NgZone,\n      useValue: ngZone\n    }, {\n      provide: Compiler,\n      useFactory: () => new R3TestCompiler(this)\n    }, ...this.providers, ...this.providerOverrides];\n    const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n    // clang-format off\n    ɵcompileNgModuleDefs(this.testModuleType, {\n      declarations: this.declarations,\n      imports,\n      schemas: this.schemas,\n      providers\n    }, /* allowDuplicateDeclarationsInRoot */true);\n    // clang-format on\n    this.applyProviderOverridesInScope(this.testModuleType);\n  }\n  get injector() {\n    if (this._injector !== null) {\n      return this._injector;\n    }\n    const providers = [];\n    const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n    compilerOptions.forEach(opts => {\n      if (opts.providers) {\n        providers.push(opts.providers);\n      }\n    });\n    if (this.compilerProviders !== null) {\n      providers.push(...this.compilerProviders);\n    }\n    // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n    class CompilerModule {}\n    ɵcompileNgModuleDefs(CompilerModule, {\n      providers\n    });\n    const CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n    this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n    return this._injector;\n  }\n  // get overrides for a specific provider (if any)\n  getSingleProviderOverrides(provider) {\n    const token = getProviderToken(provider);\n    return this.providerOverridesByToken.get(token) || null;\n  }\n  getProviderOverrides(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n    // There are two flattening operations here. The inner flattenProviders() operates on the\n    // metadata's providers and applies a mapping function which retrieves overrides for each\n    // incoming provider. The outer flatten() then flattens the produced overrides array. If this is\n    // not done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n    // providers array and contaminate any error messages that might be generated.\n    return flatten(flattenProviders(providers, provider => this.getSingleProviderOverrides(provider) || []));\n  }\n  getOverriddenProviders(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n    const flattenedProviders = flattenProviders(providers);\n    const overrides = this.getProviderOverrides(flattenedProviders);\n    const overriddenProviders = [...flattenedProviders, ...overrides];\n    const final = [];\n    const seenOverriddenProviders = new Set();\n    // We iterate through the list of providers in reverse order to make sure provider overrides\n    // take precedence over the values defined in provider list. We also filter out all providers\n    // that have overrides, keeping overridden values only. This is needed, since presence of a\n    // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n    forEachRight(overriddenProviders, provider => {\n      const token = getProviderToken(provider);\n      if (this.providerOverridesByToken.has(token)) {\n        if (!seenOverriddenProviders.has(token)) {\n          seenOverriddenProviders.add(token);\n          // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n          // make sure that provided override takes highest precedence and is not combined with\n          // other instances of the same multi provider.\n          final.unshift({\n            ...provider,\n            multi: false\n          });\n        }\n      } else {\n        final.unshift(provider);\n      }\n    });\n    return final;\n  }\n  hasProviderOverrides(providers) {\n    return this.getProviderOverrides(providers).length > 0;\n  }\n  patchDefWithProviderOverrides(declaration, field) {\n    const def = declaration[field];\n    if (def && def.providersResolver) {\n      this.maybeStoreNgDef(field, declaration);\n      const resolver = def.providersResolver;\n      const processProvidersFn = providers => this.getOverriddenProviders(providers);\n      this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n      def.providersResolver = ngDef => resolver(ngDef, processProvidersFn);\n    }\n  }\n}\nfunction initResolvers() {\n  return {\n    module: new NgModuleResolver(),\n    component: new ComponentResolver(),\n    directive: new DirectiveResolver(),\n    pipe: new PipeResolver()\n  };\n}\nfunction isStandaloneComponent(value) {\n  const def = getComponentDef(value);\n  return !!def?.standalone;\n}\nfunction getComponentDef(value) {\n  return value.ɵcmp ?? null;\n}\nfunction hasNgModuleDef(value) {\n  return value.hasOwnProperty('ɵmod');\n}\nfunction isNgModule(value) {\n  return hasNgModuleDef(value);\n}\nfunction maybeUnwrapFn(maybeFn) {\n  return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\nfunction flatten(values) {\n  const out = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten(value));\n    } else {\n      out.push(value);\n    }\n  });\n  return out;\n}\nfunction identityFn(value) {\n  return value;\n}\nfunction flattenProviders(providers, mapFn = identityFn) {\n  const out = [];\n  for (let provider of providers) {\n    if (ɵisEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      out.push(...flattenProviders(provider, mapFn));\n    } else {\n      out.push(mapFn(provider));\n    }\n  }\n  return out;\n}\nfunction getProviderField(provider, field) {\n  return provider && typeof provider === 'object' && provider[field];\n}\nfunction getProviderToken(provider) {\n  return getProviderField(provider, 'provide') || provider;\n}\nfunction isModuleWithProviders(value) {\n  return value.hasOwnProperty('ngModule');\n}\nfunction forEachRight(values, fn) {\n  for (let idx = values.length - 1; idx >= 0; idx--) {\n    fn(values[idx], idx);\n  }\n}\nfunction invalidTypeError(name, expectedType) {\n  return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\nclass R3TestCompiler {\n  constructor(testBed) {\n    this.testBed = testBed;\n  }\n  compileModuleSync(moduleType) {\n    this.testBed._compileNgModuleSync(moduleType);\n    return new ɵNgModuleFactory(moduleType);\n  }\n  compileModuleAsync(moduleType) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.testBed._compileNgModuleAsync(moduleType);\n      return new ɵNgModuleFactory(moduleType);\n    })();\n  }\n  compileModuleAndAllComponentsSync(moduleType) {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const componentFactories = this.testBed._getComponentFactories(moduleType);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n  compileModuleAndAllComponentsAsync(moduleType) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const ngModuleFactory = yield _this4.compileModuleAsync(moduleType);\n      const componentFactories = _this4.testBed._getComponentFactories(moduleType);\n      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    })();\n  }\n  clearCache() {}\n  clearCacheFor(type) {}\n  getModuleId(moduleType) {\n    const meta = this.testBed._getModuleResolver().resolve(moduleType);\n    return meta && meta.id || undefined;\n  }\n}\n\n// The formatter and CI disagree on how this import statement should be formatted. Both try to keep\nlet _nextRootElementId = 0;\n/**\n * Returns a singleton of the `TestBed` class.\n *\n * @publicApi\n */\nfunction getTestBed() {\n  return TestBedImpl.INSTANCE;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n */\nclass TestBedImpl {\n  constructor() {\n    // Properties\n    this.platform = null;\n    this.ngModule = null;\n    this._compiler = null;\n    this._testModuleRef = null;\n    this._activeFixtures = [];\n    /**\n     * Internal-only flag to indicate whether a module\n     * scoping queue has been checked and flushed already.\n     * @nodoc\n     */\n    this.globalCompilationChecked = false;\n  }\n  static get INSTANCE() {\n    return TestBedImpl._INSTANCE = TestBedImpl._INSTANCE || new TestBedImpl();\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  static initTestEnvironment(ngModule, platform, options) {\n    const testBed = TestBedImpl.INSTANCE;\n    testBed.initTestEnvironment(ngModule, platform, options);\n    return testBed;\n  }\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  static resetTestEnvironment() {\n    TestBedImpl.INSTANCE.resetTestEnvironment();\n  }\n  static configureCompiler(config) {\n    return TestBedImpl.INSTANCE.configureCompiler(config);\n  }\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef) {\n    return TestBedImpl.INSTANCE.configureTestingModule(moduleDef);\n  }\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents() {\n    return TestBedImpl.INSTANCE.compileComponents();\n  }\n  static overrideModule(ngModule, override) {\n    return TestBedImpl.INSTANCE.overrideModule(ngModule, override);\n  }\n  static overrideComponent(component, override) {\n    return TestBedImpl.INSTANCE.overrideComponent(component, override);\n  }\n  static overrideDirective(directive, override) {\n    return TestBedImpl.INSTANCE.overrideDirective(directive, override);\n  }\n  static overridePipe(pipe, override) {\n    return TestBedImpl.INSTANCE.overridePipe(pipe, override);\n  }\n  static overrideTemplate(component, template) {\n    return TestBedImpl.INSTANCE.overrideTemplate(component, template);\n  }\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component, template) {\n    return TestBedImpl.INSTANCE.overrideTemplateUsingTestingModule(component, template);\n  }\n  static overrideProvider(token, provider) {\n    return TestBedImpl.INSTANCE.overrideProvider(token, provider);\n  }\n  static inject(token, notFoundValue, flags) {\n    return TestBedImpl.INSTANCE.inject(token, notFoundValue, ɵconvertToBitFlags(flags));\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  static get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n    return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n  }\n  /**\n   * Runs the given function in the `EnvironmentInjector` context of `TestBed`.\n   *\n   * @see EnvironmentInjector#runInContext\n   */\n  static runInInjectionContext(fn) {\n    return TestBedImpl.INSTANCE.runInInjectionContext(fn);\n  }\n  static createComponent(component) {\n    return TestBedImpl.INSTANCE.createComponent(component);\n  }\n  static resetTestingModule() {\n    return TestBedImpl.INSTANCE.resetTestingModule();\n  }\n  static execute(tokens, fn, context) {\n    return TestBedImpl.INSTANCE.execute(tokens, fn, context);\n  }\n  static get platform() {\n    return TestBedImpl.INSTANCE.platform;\n  }\n  static get ngModule() {\n    return TestBedImpl.INSTANCE.ngModule;\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  initTestEnvironment(ngModule, platform, options) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    TestBedImpl._environmentTeardownOptions = options?.teardown;\n    TestBedImpl._environmentErrorOnUnknownElementsOption = options?.errorOnUnknownElements;\n    TestBedImpl._environmentErrorOnUnknownPropertiesOption = options?.errorOnUnknownProperties;\n    this.platform = platform;\n    this.ngModule = ngModule;\n    this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n    // TestBed does not have an API which can reliably detect the start of a test, and thus could be\n    // used to track the state of the NgModule registry and reset it correctly. Instead, when we\n    // know we're in a testing scenario, we disable the check for duplicate NgModule registration\n    // completely.\n    ɵsetAllowDuplicateNgModuleIdsForTest(true);\n  }\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  resetTestEnvironment() {\n    this.resetTestingModule();\n    this._compiler = null;\n    this.platform = null;\n    this.ngModule = null;\n    TestBedImpl._environmentTeardownOptions = undefined;\n    ɵsetAllowDuplicateNgModuleIdsForTest(false);\n  }\n  resetTestingModule() {\n    this.checkGlobalCompilationFinished();\n    ɵresetCompiledComponents();\n    if (this._compiler !== null) {\n      this.compiler.restoreOriginalState();\n    }\n    this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n    // Restore the previous value of the \"error on unknown elements\" option\n    ɵsetUnknownElementStrictMode$1(this._previousErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT);\n    // Restore the previous value of the \"error on unknown properties\" option\n    ɵsetUnknownPropertyStrictMode$1(this._previousErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT);\n    // We have to chain a couple of try/finally blocks, because each step can\n    // throw errors and we don't want it to interrupt the next step and we also\n    // want an error to be thrown at the end.\n    try {\n      this.destroyActiveFixtures();\n    } finally {\n      try {\n        if (this.shouldTearDownTestingModule()) {\n          this.tearDownTestingModule();\n        }\n      } finally {\n        this._testModuleRef = null;\n        this._instanceTeardownOptions = undefined;\n        this._instanceErrorOnUnknownElementsOption = undefined;\n        this._instanceErrorOnUnknownPropertiesOption = undefined;\n      }\n    }\n    return this;\n  }\n  configureCompiler(config) {\n    if (config.useJit != null) {\n      throw new Error('the Render3 compiler JiT mode is not configurable !');\n    }\n    if (config.providers !== undefined) {\n      this.compiler.setCompilerProviders(config.providers);\n    }\n    return this;\n  }\n  configureTestingModule(moduleDef) {\n    this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n    // Trigger module scoping queue flush before executing other TestBed operations in a test.\n    // This is needed for the first test invocation to ensure that globally declared modules have\n    // their components scoped properly. See the `checkGlobalCompilationFinished` function\n    // description for additional info.\n    this.checkGlobalCompilationFinished();\n    // Always re-assign the options, even if they're undefined.\n    // This ensures that we don't carry them between tests.\n    this._instanceTeardownOptions = moduleDef.teardown;\n    this._instanceErrorOnUnknownElementsOption = moduleDef.errorOnUnknownElements;\n    this._instanceErrorOnUnknownPropertiesOption = moduleDef.errorOnUnknownProperties;\n    // Store the current value of the strict mode option,\n    // so we can restore it later\n    this._previousErrorOnUnknownElementsOption = ɵgetUnknownElementStrictMode$1();\n    ɵsetUnknownElementStrictMode$1(this.shouldThrowErrorOnUnknownElements());\n    this._previousErrorOnUnknownPropertiesOption = ɵgetUnknownPropertyStrictMode$1();\n    ɵsetUnknownPropertyStrictMode$1(this.shouldThrowErrorOnUnknownProperties());\n    this.compiler.configureTestingModule(moduleDef);\n    return this;\n  }\n  compileComponents() {\n    return this.compiler.compileComponents();\n  }\n  inject(token, notFoundValue, flags) {\n    if (token === TestBed) {\n      return this;\n    }\n    const UNDEFINED = {};\n    const result = this.testModuleRef.injector.get(token, UNDEFINED, ɵconvertToBitFlags(flags));\n    return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) : result;\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n    return this.inject(token, notFoundValue, flags);\n  }\n  runInInjectionContext(fn) {\n    return this.inject(EnvironmentInjector$1).runInContext(fn);\n  }\n  execute(tokens, fn, context) {\n    const params = tokens.map(t => this.inject(t));\n    return fn.apply(context, params);\n  }\n  overrideModule(ngModule, override) {\n    this.assertNotInstantiated('overrideModule', 'override module metadata');\n    this.compiler.overrideModule(ngModule, override);\n    return this;\n  }\n  overrideComponent(component, override) {\n    this.assertNotInstantiated('overrideComponent', 'override component metadata');\n    this.compiler.overrideComponent(component, override);\n    return this;\n  }\n  overrideTemplateUsingTestingModule(component, template) {\n    this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n    this.compiler.overrideTemplateUsingTestingModule(component, template);\n    return this;\n  }\n  overrideDirective(directive, override) {\n    this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this.compiler.overrideDirective(directive, override);\n    return this;\n  }\n  overridePipe(pipe, override) {\n    this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this.compiler.overridePipe(pipe, override);\n    return this;\n  }\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token, provider) {\n    this.assertNotInstantiated('overrideProvider', 'override provider');\n    this.compiler.overrideProvider(token, provider);\n    return this;\n  }\n  overrideTemplate(component, template) {\n    return this.overrideComponent(component, {\n      set: {\n        template,\n        templateUrl: null\n      }\n    });\n  }\n  createComponent(type) {\n    const testComponentRenderer = this.inject(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n    const componentDef = type.ɵcmp;\n    if (!componentDef) {\n      throw new Error(`It looks like '${ɵstringify(type)}' has not been compiled.`);\n    }\n    // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n    const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n    // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n    const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n    const ngZone = noNgZone ? null : this.inject(NgZone, null);\n    const componentFactory = new ɵRender3ComponentFactory(componentDef);\n    const initComponent = () => {\n      const componentRef = componentFactory.create(Injector$1.NULL, [], `#${rootElId}`, this.testModuleRef);\n      return new ComponentFixture(componentRef, ngZone, autoDetect);\n    };\n    const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  get compiler() {\n    if (this._compiler === null) {\n      throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n    }\n    return this._compiler;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  get testModuleRef() {\n    if (this._testModuleRef === null) {\n      this._testModuleRef = this.compiler.finalize();\n    }\n    return this._testModuleRef;\n  }\n  assertNotInstantiated(methodName, methodDescription) {\n    if (this._testModuleRef !== null) {\n      throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` + `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n  /**\n   * Check whether the module scoping queue should be flushed, and flush it if needed.\n   *\n   * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n   * in-progress module compilation. This creates a potential hazard - the very first time the\n   * TestBed is initialized (or if it's reset without being initialized), there may be pending\n   * compilations of modules declared in global scope. These compilations should be finished.\n   *\n   * To ensure that globally declared modules have their components scoped properly, this function\n   * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n   * to any other operations, the scoping queue is flushed.\n   */\n  checkGlobalCompilationFinished() {\n    // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n    // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n    if (!this.globalCompilationChecked && this._testModuleRef === null) {\n      ɵflushModuleScopingQueueAsMuchAsPossible();\n    }\n    this.globalCompilationChecked = true;\n  }\n  destroyActiveFixtures() {\n    let errorCount = 0;\n    this._activeFixtures.forEach(fixture => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        errorCount++;\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e\n        });\n      }\n    });\n    this._activeFixtures = [];\n    if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\n      throw Error(`${errorCount} ${errorCount === 1 ? 'component' : 'components'} ` + `threw errors during cleanup`);\n    }\n  }\n  shouldRethrowTeardownErrors() {\n    const instanceOptions = this._instanceTeardownOptions;\n    const environmentOptions = TestBedImpl._environmentTeardownOptions;\n    // If the new teardown behavior hasn't been configured, preserve the old behavior.\n    if (!instanceOptions && !environmentOptions) {\n      return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n    }\n    // Otherwise use the configured behavior or default to rethrowing.\n    return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ?? this.shouldTearDownTestingModule();\n  }\n  shouldThrowErrorOnUnknownElements() {\n    // Check if a configuration has been provided to throw when an unknown element is found\n    return this._instanceErrorOnUnknownElementsOption ?? TestBedImpl._environmentErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT;\n  }\n  shouldThrowErrorOnUnknownProperties() {\n    // Check if a configuration has been provided to throw when an unknown property is found\n    return this._instanceErrorOnUnknownPropertiesOption ?? TestBedImpl._environmentErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT;\n  }\n  shouldTearDownTestingModule() {\n    return this._instanceTeardownOptions?.destroyAfterEach ?? TestBedImpl._environmentTeardownOptions?.destroyAfterEach ?? TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n  }\n  tearDownTestingModule() {\n    // If the module ref has already been destroyed, we won't be able to get a test renderer.\n    if (this._testModuleRef === null) {\n      return;\n    }\n    // Resolve the renderer ahead of time, because we want to remove the root elements as the very\n    // last step, but the injector will be destroyed as a part of the module ref destruction.\n    const testRenderer = this.inject(TestComponentRenderer);\n    try {\n      this._testModuleRef.destroy();\n    } catch (e) {\n      if (this.shouldRethrowTeardownErrors()) {\n        throw e;\n      } else {\n        console.error('Error during cleanup of a testing module', {\n          component: this._testModuleRef.instance,\n          stacktrace: e\n        });\n      }\n    } finally {\n      testRenderer.removeAllRootElements?.();\n    }\n  }\n}\nTestBedImpl._INSTANCE = null;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @publicApi\n */\nconst TestBed = TestBedImpl;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`. Note: this function\n * (imported from the `@angular/core/testing` package) can **only** be used to inject dependencies\n * in tests. To inject dependencies in your application code, use the [`inject`](api/core/inject)\n * function from the `@angular/core` package instead.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * @publicApi\n */\nfunction inject(tokens, fn) {\n  const testBed = TestBedImpl.INSTANCE;\n  // Not using an arrow function to preserve context passed from call site\n  return function () {\n    return testBed.execute(tokens, fn, this);\n  };\n}\n/**\n * @publicApi\n */\nclass InjectSetupWrapper {\n  constructor(_moduleDef) {\n    this._moduleDef = _moduleDef;\n  }\n  _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      TestBedImpl.configureTestingModule(moduleDef);\n    }\n  }\n  inject(tokens, fn) {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\nfunction withModule(moduleDef, fn) {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      const testBed = TestBedImpl.INSTANCE;\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}\n\n/**\n * Public Test Library for unit testing Angular applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\nconst _global = typeof window === 'undefined' ? global : window;\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n  _global.beforeEach(getCleanupHook(false));\n}\n// We provide both a `beforeEach` and `afterEach`, because the updated behavior for\n// tearing down the module is supposed to run after the test so that we can associate\n// teardown errors with the correct test.\nif (_global.afterEach) {\n  _global.afterEach(getCleanupHook(true));\n}\nfunction getCleanupHook(expectedTeardownValue) {\n  return () => {\n    const testBed = TestBedImpl.INSTANCE;\n    if (testBed.shouldTearDownTestingModule() === expectedTeardownValue) {\n      testBed.resetTestingModule();\n      resetFakeAsyncZone();\n    }\n  };\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\nconst __core_private_testing_placeholder__ = '';\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\n\n/// <reference types=\"jasmine\" />\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };","map":{"version":3,"names":["getDebugNode","RendererFactory2","RendererFactory2$1","InjectionToken","InjectionToken$1","ɵstringify","ɵReflectionCapabilities","Directive","Component","Pipe","NgModule","ɵgetInjectableDef","resolveForwardRef","resolveForwardRef$1","ɵNG_COMP_DEF","ɵRender3NgModuleRef","ApplicationInitStatus","LOCALE_ID","LOCALE_ID$1","ɵDEFAULT_LOCALE_ID","ɵsetLocaleId","ɵRender3ComponentFactory","ɵcompileComponent","ɵNG_DIR_DEF","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","ɵNG_MOD_DEF","ɵtransitiveScopesFor","ɵpatchComponentDefWithScope","ɵNG_INJ_DEF","ɵcompileNgModuleDefs","NgZone","Compiler","COMPILER_OPTIONS","ɵNgModuleFactory","ɵisEnvironmentProviders","ModuleWithComponentFactories","ɵconvertToBitFlags","Injector","Injector$1","InjectFlags","InjectFlags$1","ɵsetAllowDuplicateNgModuleIdsForTest","ɵresetCompiledComponents","ɵsetUnknownElementStrictMode","ɵsetUnknownElementStrictMode$1","ɵsetUnknownPropertyStrictMode","ɵsetUnknownPropertyStrictMode$1","ɵgetUnknownElementStrictMode","ɵgetUnknownElementStrictMode$1","ɵgetUnknownPropertyStrictMode","ɵgetUnknownPropertyStrictMode$1","EnvironmentInjector","EnvironmentInjector$1","ɵflushModuleScopingQueueAsMuchAsPossible","ResourceLoader","Subject","Subscription","waitForAsync","fn","_Zone","Zone","Promise","reject","asyncTest","__symbol__","async","ComponentFixture","constructor","componentRef","ngZone","_autoDetect","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","error","_tick","checkNoChanges","run","autoDetectChanges","autoDetect","Error","isStable","whenStable","resolve","res","_getRenderer","_renderer","undefined","injector","get","whenRenderingDone","renderer","destroy","unsubscribe","current","fakeAsyncTestModule","fakeAsyncTestModuleNotLoadedErrorMessage","resetFakeAsyncZone","fakeAsync","tick","millis","tickOptions","processNewMacroTasksSynchronously","flush","maxTurns","discardPeriodicTasks","flushMicrotasks","TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT","THROW_ON_UNKNOWN_ELEMENTS_DEFAULT","THROW_ON_UNKNOWN_PROPERTIES_DEFAULT","TestComponentRenderer","insertRootElement","rootElementId","removeAllRootElements","ComponentFixtureAutoDetect","ComponentFixtureNoNgZone","resolveComponentResources","resourceResolver","componentResolved","urlMap","Map","cachedResourceResolve","url","promise","resp","set","then","unwrapResponse","componentResourceResolutionQueue","forEach","component","type","promises","templateUrl","push","template","styleUrls","styles","styleOffset","length","styleUrl","index","style","splice","indexOf","fullyResolved","all","componentDefResolved","clearResolutionOfComponentResourcesQueue","componentDefPendingResolution","Set","maybeQueueResolutionOfComponentResources","metadata","componentNeedsResolution","add","isComponentDefPendingResolution","has","hasOwnProperty","old","restoreComponentResolutionQueue","queue","clear","_","isComponentResourceResolutionQueueEmpty","size","response","text","delete","_global$1","globalThis","global","window","self","WorkerGlobalScope","FactoryTarget","R3TemplateDependencyKind","ViewEncapsulation$1","ViewEncapsulation","getCompilerFacade","request","globalNg","ɵcompilerFacade","ngDevMode","console","kind","message","name","usage","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","source","stringify","token","Array","isArray","map","join","overriddenName","toString","newLineIndex","substring","concatStringsWithSpace","before","after","__forward_ref__","forwardRef","forwardRefFn","isForwardRef","ɵɵdefineInjectable","opts","providedIn","factory","value","defineInjectable","ɵɵdefineInjector","options","providers","imports","getInjectableDef","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","isInjectable","field","getInheritedInjectableDef","def","warn","getInjectorDef","NG_INJ_DEF","NG_INJECTOR_DEF","ɵprov","ɵinj","ngInjectableDef","ngInjectorDef","ERROR_DETAILS_PAGE_BASE_URL","XSS_SECURITY_URL","RuntimeError","code","formatRuntimeError","fullCode","Math","abs","errorMessage","trim","addPeriodSeparator","match","separator","Type","Function","isType","v","assertNumber","actual","msg","throwError","assertNumberInRange","minInclusive","maxInclusive","assertLessThanOrEqual","assertGreaterThanOrEqual","assertString","assertFunction","assertEqual","expected","assertNotEqual","assertSame","assertNotSame","assertLessThan","assertGreaterThan","assertNotDefined","assertDefined","comparison","assertDomNode","node","Node","assertIndexInRange","arr","maxLen","assertOneOf","validValues","JSON","arrayEquals","a","b","identityAccessor","i","valueA","valueB","flatten$1","list","flat","Number","POSITIVE_INFINITY","deepForEach","input","addToArray","removeFromArray","pop","newArray","arraySplice","array","count","arrayInsert","end","previousEnd","arrayInsert2","value1","value2","arrayIndexOfSorted","_arrayIndexOfSorted","keyValueArraySet","keyValueArray","keyValueArrayIndexOf","keyValueArrayGet","keyValueArrayDelete","shift","start","middle","noSideEffects","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","call","annotationInstance","TypeDecorator","cls","annotations","Object","defineProperty","prototype","create","ngMetadataName","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","meta","unshift","ES5_DELEGATE_CTOR","ES2015_INHERITED_CLASS","ES2015_INHERITED_CLASS_WITH_CTOR","ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR","isDelegateCtor","typeStr","test","ReflectionCapabilities","reflect","_reflect","t","_zipTypesAndAnnotations","paramTypes","paramAnnotations","result","concat","_ownParameters","parentCtor","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","getParentCtor","_ownAnnotations","typeOrFunc","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","propDecorators","keys","prop","parentPropMetadata","ownPropMetadata","hasLifecycleHook","lcProperty","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","parentProto","getPrototypeOf","ngDevModeResetPerfCounters","locationString","newCounters","namedConstructors","firstCreatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","rendererMoveNode","rendererRemoveNode","rendererAppendChild","rendererInsertBefore","rendererCreateComment","allowNgDevModeTrue","initNgDevMode","isEnvironmentProviders","ɵproviders","renderStringify","String","stringifyForError","throwCyclicDependencyError","path","depPath","throwMixedMultiProviderError","throwInvalidProviderError","ngModuleType","provider","providerDetail","ɵfromNgModule","throwProviderNotFoundError","injectorName","injectorDetails","_injectImplementation","getInjectImplementation","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","flags","injectableDef","Optional","assertInjectImplementationNotEqual","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","_currentInjector","setCurrentInjector","former","injectInjectorOnly","Default","ɵɵinject","ɵɵinvalidFactoryDep","inject$1","convertToBitFlags","optional","host","skipSelf","injectArgs","types","arg","j","flag","getInjectFlag","attachInjectFlag","decorator","catchInjectorError","e","injectorErrorName","tokenPath","formatError","obj","charAt","slice","context","parts","replace","Inject","Self","SkipSelf","Host","ChangeDetectionStrategy","EMPTY_OBJ","EMPTY_ARRAY","freeze","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","__NG_ELEMENT_ID__","componentDefCount","ɵɵdefineComponent","componentDefinition","baseDef","getNgDirectiveDef","decls","vars","consts","ngContentSelectors","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","dependencies","standalone","getStandaloneInjector","data","encapsulation","Emulated","id","schemas","initFeatures","extractDefListOrFactory","ɵɵsetComponentScope","directives","pipes","extractDirectiveDef","getComponentDef$1","getDirectiveDef","nonNull","ɵɵdefineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","ɵɵsetNgModuleScope","scope","ngModuleDef","getNgModuleDef","invertObject","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineDirective","directiveDefinition","ɵɵdefinePipe","pipeDef","pure","onDestroy","ngOnDestroy","getPipeDef$1","isStandalone","throwNotFound","declaredInputs","providersResolver","hostBindings","hostVars","hostAttrs","contentQueries","exportAs","selectors","viewQuery","features","setInput","findHostDirectiveDefs","hostDirectives","inputs","outputs","definition","defExtractor","dep","filter","HOST","TVIEW","FLAGS","PARENT","NEXT","TRANSPLANTED_VIEWS_TO_REFRESH","T_HOST","CLEANUP","CONTEXT","INJECTOR$1","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","QUERIES","ID","EMBEDDED_VIEW_INJECTOR","HEADER_OFFSET","unusedValueExportToPlacateAjd$4","TYPE","HAS_TRANSPLANTED_VIEWS","NATIVE","VIEW_REFS","MOVED_VIEWS","CONTAINER_HEADER_OFFSET","unusedValueExportToPlacateAjd$3","isLView","isLContainer","isContentQueryHost","isComponentHost","componentOffset","isDirectiveHost","isComponentDef","isRootView","assertTNodeForLView","lView","assertTNodeForTView","assertTNode","tView_","assertTIcu","tIcu","currentCaseLViewIndex","assertComponentType","assertNgModuleType","assertCurrentTNodeIsParent","isParent","assertHasParent","parent","assertLContainer","assertLViewOrUndefined","assertLView","assertFirstCreatePass","errMessage","assertFirstUpdatePass","firstUpdatePass","assertDirectiveDef","assertIndexInDeclRange","assertBetween","bindingStartIndex","assertIndexInExpandoRange","expandoStartIndex","lower","upper","assertProjectionSlots","projection","assertParentView","assertNodeInjector","injectorIndex","getFactoryDef","hasFactoryDef","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","ngOnChanges","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","ngInherit","simpleChangesStore","getSimpleChangesStore","privateName","setSimpleChangesStore","previousChange","SIMPLE_CHANGES_STORE","store","profilerCallback","setProfiler","profiler","event","hookOrListener","SVG_NAMESPACE","MATH_ML_NAMESPACE","unwrapRNode","unwrapLView","getNativeByIndex","getNativeByTNode","getNativeByTNodeOrNull","getTNode","load","view","getComponentLViewByIndex","nodeIndex","hostView","slotValue","isCreationMode","viewAttachedToChangeDetector","viewAttachedToContainer","getConstant","resetPreOrderHookFlags","updateTransplantedViewCount","lContainer","amount","viewOrContainer","instructionState","lFrame","createLFrame","bindingsEnabled","_isInCheckNoChangesMode","specOnlyIsInstructionStateEmpty","getElementDepthCount","elementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","getBindingsEnabled","ɵɵenableBindings","ɵɵdisableBindings","getLView","getTView","ɵɵrestoreView","viewToRestore","contextLView","ɵɵresetView","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","getCurrentParentTNode","setCurrentTNode","isCurrentTNodeParent","setCurrentTNodeAsNotParent","getContextLView","isInCheckNoChangesMode","setIsInCheckNoChangesMode","mode","getBindingRoot","bindingRootIndex","getBindingIndex","bindingIndex","setBindingIndex","nextBindingIndex","incrementBindingIndex","isInI18nBlock","inI18n","setInI18nBlock","setBindingRootForHostBindings","currentDirectiveIndex","setCurrentDirectiveIndex","getCurrentDirectiveIndex","getCurrentDirectiveDef","tData","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","getDeclarationTNode","declTNode","enterDI","parentTNode","parentLView","allocLFrame","enterView","newView","newLFrame","selectedIndex","currentNamespace","firstChild","currentLFrame","childLFrame","child","leaveViewLight","oldLFrame","leaveDI","leaveView","nextContextImpl","level","walkUpViews","nestingLevel","currentView","getSelectedIndex","setSelectedIndex","getSelectedTNode","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","namespaceHTMLInternal","getNamespace$1","registerPreOrderHooks","directiveIndex","directiveDef","ngOnInit","ngDoCheck","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","directiveStart","directiveEnd","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeCheckHooks","hooks","callHooks","executeInitAndCheckHooks","initPhase","incrementInitPhaseFlags","currentNodeIndex","startIndex","nodeIndexLimit","max","lastNodeIndexFound","hook","isInitHook","callHook","directive","indexWithintInitPhase","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","isFactory","unusedValueExportToPlacateAjd$2","toTNodeTypeAsString","tNodeType","unusedValueExportToPlacateAjd$1","hasClassInput","hasStyleInput","assertTNodeType","expectedTypes","assertPureTNodeType","setUpAttributes","native","attrs","namespaceURI","attrName","attrVal","setAttribute","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","charCodeAt","mergeHostAttrs","dst","src","srcMarker","item","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","hasParentInjector","parentLocation","getParentInjectorIndex","parentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","startView","viewOffset","parentView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_SIZE","BLOOM_MASK","BLOOM_BUCKET_BITS","nextNgElementId","NOT_FOUND","bloomAdd","bloomHash","mask","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentData","footer","declarationViewOffset","lViewCursor","getTNodeFromLView","diPublicInInjector","injectAttributeImpl","attrNameToInject","classes","attrsLength","notFoundValueOrThrow","lookupTokenUsingModuleInjector","moduleInjector","previousInjectImplementation","getOrCreateInjectable","embeddedInjectorValue","lookupTokenUsingEmbeddedInjector","lookupTokenUsingNodeInjector","bloomHashBitOrFactory","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","currentTView","canAccessViewProviders","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","startingIndex","endIndex","providerTokenOrDef","dirDef","previousIncludeViewProviders","success","tokenId","createNodeInjector","injectorView","isFirstHostTNode","NodeInjector","_tNode","_lView","ɵɵgetInheritedFactory","ownConstructor","ownFactory","getFactoryOf","objectPrototype","currentLView","nodeInjectorValue","embeddedViewInjector","embeddedViewInjectorValue","tViewType","ɵɵinjectAttribute","Attribute","attributeName","getReflect","reflectDependencies","convertDependencies","deps","reflectDependency","attribute","param","proto","modules","checkForDuplicateNgModules","assertSameOrNotExisting","incoming","registerNgModuleType","existing","clearModulesForTest","getRegisteredNgModuleType","setAllowDuplicateNgModuleIdsForTest","allowDuplicates","ɵɵresolveWindow","element","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","body","INTERPOLATION_DELIMITER","maybeUnwrapFn$1","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","shouldThrowErrorOnUnknownElement","shouldThrow","shouldThrowErrorOnUnknownProperty","validateElementIsKnown","tagName","hasDirectives","isUnknown","HTMLUnknownElement","customElements","matchingSchemas","isHostStandalone","isHostComponentStandalone","templateLocation","getTemplateLocationDetails","isPropertyValid","handleUnknownPropertyError","nodeType","importLocation","KNOWN_CONTROL_FLOW_DIRECTIVES","correspondingImport","reportUnknownPropertyError","getDeclarationComponentDef","declarationLView","componentDef","hostComponentDef","componentClassName","schema","RendererStyleFlags2","COMMENT_DISALLOWED","COMMENT_DELIMITER","COMMENT_DELIMITER_ESCAPED","escapeCommentText","TRACKED_LVIEWS","uniqueIdCounter","getUniqueLViewId","registerLView","getLViewById","unregisterLView","LContext","lViewId","getLContext","mpValue","readPatchedData","isComponentInstance","findViaComponent","isDirectiveInstance","findViaDirective","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","createLContext","attachPatchData","rElement","parentNode","parentContext","getComponentViewByInstance","patchedData","MONKEY_PATCH_KEY_NAME","readPatchedLView","traverseNextElement","componentIndices","components","elementComponentIndex","componentView","rootComponentView","rootComponent","directiveInstance","directiveIndexStart","directiveIndexEnd","results","getComponentAtNodeIndex","discoverLocalRefs","localNames","localIndex","_icuContainerIterate","icuContainerIterate","tIcuContainerNode","ensureIcuContainerVisitorLoaded","loader","getLViewParent","getRootView","componentOrLView","getRootContext","viewOrComponent","rootView","getFirstLContainer","getNearestLContainer","getNextLContainer","container","applyToElementOrContainer","action","lNodeToHandle","beforeNode","isComponent","rNode","nativeAppendChild","nativeInsertBefore","nativeRemoveNode","destroyNode","applyContainer","createTextNode","createText","updateTextNode","setValue","createCommentNode","createComment","createElementNode","namespace","createElement","removeViewFromContainer","applyView","addViewToContainer","parentNativeNode","renderDetachView","destroyViewTree","lViewOrLContainer","cleanUpView","firstView","insertView","indexInContainer","containerLength","declarationLContainer","trackMovedView","lQueries","declarationContainer","movedViews","insertedLContainer","insertedComponentLView","declaredComponentLView","detachMovedView","declarationViewIndex","insertionLContainer","detachView","removeIndex","viewToDetach","removedLView","destroyLView","executeOnDestroys","processCleanups","tCleanup","cleanup","lCleanup","lastLCleanupIndex","targetIdx","instanceCleanupFn","toCall","callContext","getParentRElement","getClosestRElement","None","isMove","insertBefore","appendChild","nativeAppendOrInsertBefore","nativeRemoveChild","isHostElement","removeChild","isTemplateNode","content","nativeParentNode","nativeNextSibling","nextSibling","getInsertInFrontOfRNode","_getInsertInFrontOfRNodeWithI18n","getInsertInFrontOfRNodeWithNoI18n","_processI18nInsertBefore","setI18nHandling","getInsertInFrontOfRNodeWithI18n","processI18nInsertBefore","childRNode","childTNode","parentRNode","anchorNode","getFirstNativeNode","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","nextRNode","projectionNodes","getProjectionNodes","componentHost","slotIdx","viewIndexInContainer","nextViewIndex","firstTNodeOfView","nativeParent","applyNodes","parentRElement","isProjection","rawSlotValue","applyProjectionRecursive","projectionNext","applyProjection","tProjectionNode","componentLView","componentNode","nodeToProjectOrRNodes","nodeToProject","projectedComponentLView","anchor","applyStyling","isClassBased","removeClass","addClass","DashCase","removeStyle","isImportant","endsWith","Important","setStyle","writeDirectStyle","newValue","writeDirectClass","removeAttribute","setupStaticAttributes","mergedAttrs","policy$1","getPolicy$1","trustedTypes","createPolicy","createHTML","s","createScript","createScriptURL","trustedHTMLFromString","html","trustedScriptFromString","script","trustedScriptURLFromString","newTrustedFunctionForDev","fnArgs","fnBody","bind","ɵɵvalidateIframeAttribute","attrValue","toLowerCase","iframe","srcdoc","DOCUMENT","setDocument","document","getDocument","policy","getPolicy","trustedHTMLFromStringBypass","trustedScriptFromStringBypass","trustedScriptURLFromStringBypass","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","getTypeName","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","allowSanitizationBypassAndThrow","actualType","getSanitizationBypassType","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","getInertBodyHelper","defaultDoc","inertDocumentHelper","InertDocumentHelper","isDOMParserAvailable","DOMParserHelper","getInertBodyElement","DOMParser","parseFromString","inertDocument","implementation","createHTMLDocument","templateEl","innerHTML","SAFE_URL_PATTERN","_sanitizeUrl","tagSet","tags","split","merge","sets","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","el","traverseContent","ELEMENT_NODE","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","nodeName","elAttrs","attributes","elAttr","encodeEntities","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","hi","low","inertBodyHelper","_sanitizeHtml","unsafeHtmlInput","inertBodyElement","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","getTemplateContent","isTemplateElement","SecurityContext","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵtrustConstantHtml","raw","ɵɵtrustConstantResourceUrl","getUrlSanitizer","tag","ɵɵsanitizeUrlOrResourceUrl","validateAgainstEventProperties","startsWith","validateAgainstEventAttributes","_desc","multi","ENVIRONMENT_INITIALIZER","INJECTOR","INJECTOR_DEF_TYPES","NullInjector","makeEnvironmentProviders","importProvidersFrom","sources","internalImportProvidersFrom","checkForStandaloneCmp","providersOut","dedup","injectorTypesWithProviders","cmpDef","internalSource","walkProviderTree","processInjectorTypesWithProviders","typesWithProviders","ngModule","deepForEachProvider","validateProvider","parents","defType","injDef","defName","isDuplicate","importTypesWithProviders","imported","provide","useFactory","useValue","defProviders","injectorType","containerType","isTypeProvider","isValueProvider","isFactoryProvider","isExistingProvider","classRef","useClass","USE_VALUE$1","useExisting","isClassProvider","INJECTOR_SCOPE","NOT_YET","CIRCULAR","NULL_INJECTOR$1","getNullInjector","R3Injector","destroyed","_destroyed","scopes","records","_ngOnDestroyHooks","_onDestroyHooks","forEachSingleProvider","processProvider","makeRecord","record","injectorDefTypes","assertNotDestroyed","service","callback","runInContext","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","nextInjector","resolveInjectorInitializers","initializers","initializer","tokens","providerToRecord","multiRecord","hasOnDestroy","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","providerToFactory","unwrappedProvider","hasDeps","ComponentRef$1","ComponentFactory$1","noComponentFactoryError","ERROR_COMPONENT","getComponent$1","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","NULL","injectElementRef","createElementRef","ElementRef","unwrapElementRef","Renderer2","injectRenderer2","nodeAtIndex","Sanitizer","Version","full","major","minor","patch","VERSION","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ERROR_ORIGINAL_ERROR","wrappedError","originalError","getOriginalError","ErrorHandler","_console","handleError","_findOriginalError","normalizeDebugBindingName","camelCaseToDashCase","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","assertStandaloneComponentType","assertComponentDef","throwMultipleComponentError","first","second","throwErrorIfNoChangesMode","creationMode","currValue","constructDetailsForInterpolation","rootIndex","expressionIndex","changedValue","prefix","chunks","getExpressionChangedErrorDetails","idx","matches","RegExp","classIndexOf","className","classToSearch","foundIndex","NG_TEMPLATE_SELECTOR","isCssClassMatching","cssClassToMatch","isProjectionMode","isImplicitAttrsSection","isInlineTemplate","hasTagAndTypeMatch","currentSelector","tagNameToCompare","isNodeMatchingSelector","selector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","getProjectAsAttrValue","ngProjectAsAttrIdx","nodeAttr","attr","isSelectorInSelectorList","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","stringifyCSSSelector","currentChunk","valueOrMarker","stringifyCSSSelectorList","selectorList","extractAttrsAndClassesFromSelector","NO_CHANGE","__brand__","ɵɵadvance","delta","selectIndexInternal","checkNoChangesMode","hooksInitPhaseCompleted","angularCoreDiEnv","compileInjectable","ngFactoryDef","compiler","getInjectableMetadata","compileFactory","typeArgumentCount","Injectable","configurable","USE_VALUE","isUseClassProvider","isUseValueProvider","isUseFactoryProvider","isUseExistingProvider","srcMeta","compilerMeta","createInjector","additionalProviders","createInjectorWithoutInjectorInstances","findFirstClosedCycle","constructResolvingPath","reversed","reverse","tokenStrs","k","injectionError","constructResolvingMessage","errMsg","addKey","injectors","noProviderError","cyclicDependencyError","instantiationError","originalException","originalStack","invalidProviderError","noAnnotationError","params","signature","ii","parameter","outOfBoundsError","mixingMultiProvidersWithRegularProvidersError","provider1","provider2","ReflectiveKey","displayName","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","ReflectiveDependency","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","multiProvider","resolvedFactory","ResolvedReflectiveFactory","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","constructDependencies","resolveReflectiveProvider","resolveReflectiveProviders","normalized","_normalizeProviders","resolved","resolvedProviderMap","mergeResolvedReflectiveProviders","from","normalizedProvidersMap","resolvedProvider","_extractToken","some","p","_createDependency","paramMetadata","UNDEFINED","ReflectiveInjector","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_providers","_parent","_constructionCounter","len","keyIds","objs","_getByKey","resolveAndCreateChild","createChildFromResolved","inj","resolveAndInstantiate","instantiateResolved","_instantiateProvider","getProviderAtIndex","_new","_getMaxNumberOfObjects","_instantiate","_getByReflectiveDependency","stack","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","inj_","_mapProviders","ɵɵdirectiveInject","ɵɵinvalidFactory","processHostBindingOpCodes","hostBindingOpCodes","opCode","directiveIdx","bindingRootIndx","hostBindingFn","refreshContentQueries","queryStartIdx","directiveDefIdx","refreshChildComponents","hostLView","refreshComponent","renderChildComponents","renderComponent","createLView","tHostNode","rendererFactory","getOrCreateTNode","createTNodeAtIndex","createTNode","prev","allocExpando","numSlotsToAlloc","initialValue","allocIdx","renderView","executeViewQueryFn","templateFn","executeTemplate","staticContentQueries","staticViewQueries","incompleteFirstPass","refreshView","isInCheckNoChangesPass","markTransplantedViewsForRefresh","refreshEmbeddedViews","rf","prevSelectedIndex","isUpdatePhase","preHookType","postHookType","executeContentQueries","createDirectivesInstances","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","viewData","localRefExtractor","getOrCreateComponentTView","createTView","constsOrFactory","initialViewLength","createViewBlueprint","queries","fill","directiveRegistry","pipeRegistry","seal","locateHostElement","elementOrSelector","preserveContent","ShadowDom","selectRootElement","storeCleanupWithContext","cleanupFn","getOrCreateLViewCleanup","getOrCreateTViewCleanup","tParent","insertBeforeIndex","directiveStylingLast","propertyBindings","initialInputs","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","generatePropertyAliases","aliasMap","propertyAliases","hostDirectiveAliasMap","internalName","addPropertyAlias","initializeInputAndOutputAliases","hostDirectiveDefinitionMap","tViewData","tNodeAttrs","inputsFromAttrs","inputsStore","outputsStore","aliasData","aliasedInputs","aliasedOutputs","generateInitialInputs","mapPropName","elementPropertyInternal","nativeOnly","inputData","dataValue","setInputsForProperty","markDirtyIfOnPush","setNgReflectProperties","viewIndex","childComponentLView","setNgReflectProperty","debugValue","textContent","resolveDirectives","localRefs","exportsMap","matchResult","findDirectiveDefMatches","hostDirectiveDefs","initializeDirectives","cacheMatchingLocalNames","initTNodeFlags","preOrderHooksFound","preOrderCheckHooksFound","configureViewWithDirective","saveNameToExportMap","lifeCycleHooks","registerHostBindingOpCodes","directiveVarsIdx","elementIndx","lastSelectedElementIdx","addComponentLogic","setInputsFromAttrs","elementIndex","dirIndex","invokeHostBindingsInCreationMode","registry","find","hostDirectiveMatches","markAsComponentHost","hostTNode","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","createRenderer","elementAttributeInternal","setElementAttribute","strValue","initialInputData","inputsToStore","inputConfig","createLContainer","hostNative","embeddedLView","embeddedTView","movedLView","componentHostIdx","refreshContainsDirtyView","componentTView","syncViewWithBlueprint","markViewDirty","detectChangesInternal","notifyErrorHandler","begin","checkNoChangesInternal","viewQueryFn","storePropertyBindingMetadata","propertyName","interpolationParts","propBindingIdxs","bindingMetadata","loadComponentRenderer","currentDef","errorHandler","textBindingInternal","computeStaticStyling","writeToHost","styleValue","collectNativeNodes","lNode","lViewInAContainer","lViewFirstChildTNode","nodesInSlot","ViewRef","rootNodes","_cdRefInjectingView","_appRef","_attachedToViewContainer","viewRefs","markForCheck","detach","reattach","attachToViewContainerRef","detachFromAppRef","attachToAppRef","appRef","RootViewRef","_view","ComponentFactoryResolver","ComponentFactory","toRefArray","nonMinified","minified","templateName","getNamespace","elementName","ChainedInjector","parentInjector","componentType","isBoundToModule","projectableNodes","rootSelectorOrNode","environmentInjector","realEnvironmentInjector","rootViewInjector","hostRenderer","hostRNode","rootFlags","rootTView","rootLView","tElementNode","rootComponentDef","rootDirectives","createRootComponentTNode","createRootComponentView","setRootNodeAttributes","projectNodes","createRootComponent","LifecycleHooksFeature","ComponentRef","_rootLView","cmpNameForError","NULL_INJECTOR","applyRootComponentStyling","viewRenderer","hostFeatures","rootTNode","feature","nodesforSlot","getSuperType","ɵɵInheritDefinitionFeature","superType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","animation","defData","mergeHostAttrsAcrossInheritance","prevViewQuery","ctx","prevContentQueries","prevHostBindings","COPY_DIRECTIVE_FIELDS","COPY_COMPONENT_FIELDS","ɵɵCopyDefinitionFeature","defAny","ɵɵHostDirectivesFeature","rawHostDirectives","dir","bindingArrayToMap","matchedDefs","hostDirectiveConfig","hostDirectiveDef","validateHostDirective","patchDeclaredInputs","bindings","exposedInputs","remappedPublicName","validateMappings","bindingType","hostDirectiveBindings","isIterable","Symbol","iterator","isListLikeIterable","isJsObject","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","done","iterateListLike","o","devModeEqual","isListLikeIterableA","isListLikeIterableB","isAObject","isBObject","is","updateBinding","getBinding","bindingUpdated","oldValueToCompare","details","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","ɵɵattribute","interpolationV","isBindingUpdated","interpolation1","v0","suffix","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","interpolation5","i3","v4","interpolation6","i4","v5","interpolation7","i5","v6","interpolation8","i6","v7","ɵɵattributeInterpolate1","interpolatedValue","ɵɵattributeInterpolate2","ɵɵattributeInterpolate3","ɵɵattributeInterpolate4","ɵɵattributeInterpolate5","ɵɵattributeInterpolate6","ɵɵattributeInterpolate7","ɵɵattributeInterpolate8","ɵɵattributeInterpolateV","interpolated","interpolationInBetween","templateFirstCreatePass","attrsIndex","localRefsIndex","tViewConsts","ɵɵtemplate","adjustedIndex","comment","ɵɵreference","ɵɵproperty","setDirectiveInputsWhichShadowsStyling","property","elementStartFirstCreatePass","elementStart","ɵɵelementStart","ɵɵelementEnd","elementEnd","ɵɵelement","elementContainerStartFirstCreatePass","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵelementContainer","ɵɵgetCurrentView","isPromise","isSubscribable","isObservable","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵsyntheticHostListener","findExistingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","isTNodeDirectiveHost","processOutputs","lCleanupIndex","idxOrTargetGetter","existingListener","lastListenerFn","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","listen","propsLength","minifiedName","output","subscription","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","ɵɵnextContext","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","ɵɵprojectionDef","numProjectionSlots","projectionHeads","tails","componentChild","slotIndex","ɵɵprojection","selectorIndex","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","toTStylingRange","getTStylingRangePrev","tStylingRange","getTStylingRangePrevDuplicate","setTStylingRangePrev","setTStylingRangePrevDuplicate","getTStylingRangeNext","setTStylingRangeNext","getTStylingRangeNextDuplicate","setTStylingRangeNextDuplicate","getTStylingRangeTail","__unused_const_as_closure_does_not_like_standalone_comment_blocks__","insertTStylingBinding","tStylingKeyWithStatic","isHostBinding","isClassBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","tStylingKey","staticKeyValueArray","hasTemplateBindings","previousNode","markDuplicates","markDuplicateOfResidualStyling","residual","isPrevDir","tStylingAtIndex","isMap","cursor","foundDuplicate","tStylingValueAtCursor","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","parserState","textEnd","keyEnd","valueEnd","getLastParsedKey","getLastParsedValue","parseClassName","resetParserState","parseClassNameNext","consumeWhitespace","consumeClassToken","parseStyle","parseStyleNext","consumeStyleKey","consumeSeparator","consumeStyleValue","ch","malformedStyleError","fromCharCode","ch1","ch2","ch3","lastChIndex","consumeQuotedText","quoteCharCode","expecting","ɵɵstyleProp","checkStylingProperty","ɵɵclassProp","ɵɵstyleMap","checkStylingMap","styleKeyValueArraySet","styleStringParser","ɵɵclassMap","classKeyValueArraySet","classStringParser","stylingFirstUpdatePass","updateStyling","normalizeSuffix","stringParser","hasStylingInputShadow","isInHostBindings","staticPrefix","updateStylingMap","toStylingKeyValueArray","isHostBindings","wrapInStaticStylingKey","stylingKey","isFirstStylingInstructionInTemplate","collectStylingFromDirectives","collectStylingFromTAttrs","isFirstStylingInstructionInHostBinding","templateStylingKey","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","currentDirective","desiredMarker","currentMarker","styleKeyValueArray","unwrappedValue","stringKey","includes","oldKeyValueArray","newKeyValueArray","oldIndex","newIndex","oldKey","setKey","tRange","higherPriorityValue","findStylingValue","isStylingValuePresent","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","ɵɵtext","textNative","ɵɵtextInterpolate","ɵɵtextInterpolate1","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","ɵɵclassMapInterpolate1","ɵɵclassMapInterpolate2","ɵɵclassMapInterpolate3","ɵɵclassMapInterpolate4","ɵɵclassMapInterpolate5","ɵɵclassMapInterpolate6","ɵɵclassMapInterpolate7","ɵɵclassMapInterpolate8","ɵɵclassMapInterpolateV","ɵɵstyleMapInterpolate1","ɵɵstyleMapInterpolate2","ɵɵstyleMapInterpolate3","ɵɵstyleMapInterpolate4","ɵɵstyleMapInterpolate5","ɵɵstyleMapInterpolate6","ɵɵstyleMapInterpolate7","ɵɵstyleMapInterpolate8","ɵɵstyleMapInterpolateV","ɵɵstylePropInterpolate1","valueSuffix","ɵɵstylePropInterpolate2","ɵɵstylePropInterpolate3","ɵɵstylePropInterpolate4","ɵɵstylePropInterpolate5","ɵɵstylePropInterpolate6","ɵɵstylePropInterpolate7","ɵɵstylePropInterpolate8","ɵɵstylePropInterpolateV","ɵɵhostProperty","ɵɵsyntheticHostProperty","ngI18nClosureMode","goog","getMsg","u","plural","val","n","floor","localeEn","LOCALE_DATA","registerLocaleData","localeId","extraData","LocaleDataIndex","LocaleId","ExtraData","findLocaleData","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","getLocaleCurrencyCode","CurrencyCode","getLocalePluralCase","PluralCase","ng","common","locales","unregisterAllLocaleData","pluralMapping","getPluralCase","parseInt","DEFAULT_LOCALE_ID","USD_CURRENCY_CODE","ELEMENT_MARKER","ICU_MARKER","I18nCreateOpCode","unusedValueExportToPlacateAjd","setLocaleId","getLocaleId","tNodeInsertBeforeIndex","i18nParent","anchorRNode","i18nChild","addTNodeAndUpdateInsertBeforeIndex","previousTNodes","newTNode","existingTNode","isI18nText","isNewTNodeCreatedBefore","getInsertBeforeIndex","setInsertBeforeIndex","getTIcu","setTIcu","setTNodeInsertBeforeIndex","createTNodePlaceholder","getCurrentICUCaseIndex","currentCase","getParentFromIcuCreateOpCode","mergedCode","getRefFromIcuCreateOpCode","getInstructionFromIcuCreateOpCode","icuCreateOpCode","parentIdx","refIdx","changeMask","changeMaskCounter","setMaskBit","hasChange","min","applyI18n","tI18n","updateOpCodes","update","bindingsStartIndex","applyUpdateOpCodes","applyCreateOpCodes","createOpCodes","insertInFrontOf","isComment","COMMENT","appendNow","APPEND_EAGERLY","SHIFT","applyMutableOpCodes","mutableOpCodes","rootIdx","rootRNode","textNodeIndex","caseIndex","anchorIdx","elementNodeIndex","commentValue","commentNodeIndex","commentRNode","elementRNode","checkBit","skipCodes","sanitizeFn","tNodeOrTagName","rText","applyIcuSwitchCase","applyIcuUpdateCase","currentIndex","activeCaseIndex","getCaseIndex","applyIcuSwitchCaseRemove","removeCodes","remove","nodeOrIcuIndex","icuExpression","bindingValue","cases","resolvedCase","loadIcuContainerVisitor","_stack","_index","_removes","icuContainerIteratorStart","enterIcu","icuContainerIteratorNext","removeOpCode","tIcuIndex","i18nCreateOpCodesToString","opcodes","lines","i18nUpdateOpCodesToString","parser","OpCodeParser","consumeOpCode","ref","consumeString","sanitizationFn","consumeFunction","hasMore","consumeNumber","statements","statement","consumeNumberOrString","opCodeText","icuCreateOpCodesToString","lastRef","consumeNumberStringOrMarker","line","i18nRemoveOpCodesToString","codes","BINDING_REGEXP","ICU_REGEXP","NESTED_ICU","ICU_BLOCK_REGEXP","MARKER","SUBTEMPLATE_REGEXP","PH_REGEXP","NGSP_UNICODE_REGEXP","replaceNgsp","attachDebugGetter","debugGetter","enumerable","i18nStartFirstCreatePass","parentTNodeIndex","subTemplateIndex","existingTNodeStack","getTranslationForTemplate","msgParts","i18nParseTextIntoPartsAndICU","part","i18nStartFirstCreatePassProcessTextNode","icuContainerTNode","createTNodeAndAddOpCode","mainBinding","icuNodeIndex","icuStart","isClosing","existingTNodes","isICU","i18nNodeIdx","hasBinding","generateBindingUpdateOpCodes","i18nAttributesFirstPass","previousElement","previousElementIndex","countBindings","str","destinationNode","bindingStart","maskIndex","sizeIndex","textParts","textValue","toMaskBit","opCodes","isRootTemplateMessage","removeInnerTemplateTranslation","inTemplate","tagMatched","exec","search","bindingMask","addUpdateIcuSwitch","valueArr","nestedIcus","icuIndex","parseIcuCase","addUpdateIcuUpdate","parseICUBlock","pattern","icuType","binding","pos","blocks","prevPos","braceStack","braces","lastIndex","block","caseName","unsafeCaseHtml","inertRootNode","walkIcuTree","sharedUpdateOpCodes","depth","currentNode","addCreateNodeAndAppend","lowerAttrName","addCreateAttribute","addRemoveNode","COMMENT_NODE","isNestedIcu","nestedIcuIndex","addRemoveNestedIcu","appendToParentIdx","createAtIdx","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","i18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","ɵɵi18nStart","messageIndex","sameViewParentTNode","ɵɵi18nEnd","ɵɵi18n","ɵɵi18nAttributes","ɵɵi18nExp","ɵɵi18nApply","ɵɵi18nPostprocess","viewProviders","resolveProvider","lInjectablesBlueprint","providerFactory","beginIndex","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","indexInFactory","multiFactoryAdd","componentProviders","contextIndex","providerIsTypeProvider","providerIsClassProvider","classToken","existingCallbacksIndex","isComponentProvider","lData","multiResolve","factories","componentCount","multiProviders","f","ɵɵProvidersFeature","processProvidersFn","NgModuleRef$1","NgModuleFactory$1","createNgModule","NgModuleRef","createNgModuleRef","_bootstrapComponents","destroyCbs","componentFactoryResolver","_r3Injector","NgModuleFactory","moduleType","EnvironmentNgModuleRefAdapter","createEnvironmentInjector","debugName","adapter","StandaloneService","_injector","cachedInjectors","getOrCreateStandaloneInjector","standaloneInjector","ɵɵStandaloneFeature","getComponent","assertDomElement","getContext","getOwningComponent","elementOrDir","getRootComponents","getInjector","getInjectionTokens","providerTokens","isDirectiveDefHack","getDirectives","Text","getDirectiveMetadata","directiveOrComponentInstance","getLocalRefs","getHostElement","componentOrDirective","getRenderedText","hostElement","getListeners","lContext","listeners","firstParam","secondParam","listenerElement","useCaptureOrIndx","sort","sortListeners","getComponentLView","nodeIndx","Element","setClassMetadata","clazz","ɵɵpureFunction0","slotOffset","pureFn","thisArg","ɵɵpureFunction1","exp","pureFunction1Internal","ɵɵpureFunction2","pureFunction2Internal","ɵɵpureFunction3","pureFunction3Internal","ɵɵpureFunction4","pureFunction4Internal","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","pureFunctionVInternal","getPureFunctionReturnValue","returnValueIndex","lastReturnValue","bindingRoot","ɵɵpipe","pipeName","getPipeDef","pipeFactory","pipeInstance","getPipeNotFoundErrorMessage","hostIsStandalone","componentInfoMessage","verifyMessage","ɵɵpipeBind1","isPure","transform","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","EventEmitter_","isAsync","__isAsync","emit","observerOrNext","complete","nextFn","errorFn","completeFn","observer","_wrapInTimeout","sink","setTimeout","EventEmitter","symbolIterator","_results","QueryList","changes","_changes","_emitDistinctChangesOnly","dirty","_changesDetected","last","reduce","init","toArray","reset","resultsTree","newResultFlat","notifyOnChanges","setDirty","TemplateRef","injectTemplateRef","ViewEngineTemplateRef","R3TemplateRef","_declarationLView","_declarationTContainer","createEmbeddedView","declarationViewLQueries","createTemplateRef","ViewContainerRef","injectViewContainerRef","previousTNode","createContainerRef","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","indexOrOptions","viewRef","insert","createComponent","componentFactoryOrType","isComponentFactory","ngModuleRef","componentFactory","contextInjector","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","getOrCreateViewRefs","move","viewRefsArr","detachedView","wasDetached","commentNode","parentOfHostNative","LQuery_","queryList","clone","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","parentLQuery","indexInDeclarationView","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","predicate","read","TQueries_","queriesForTemplateRef","childQueryIndex","tqueryClone","track","tquery","TQuery_","crossesNgTemplate","_appliesToNextNode","_declarationNodeIndex","isApplyingToNode","matchTNode","addMatch","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","nodeMatchIdx","directiveOrProviderIdx","matchIdx","createResultByTNodeType","createResultForNode","matchingIdx","createSpecialToken","materializeViewResults","queryIndex","lQuery","tQueryMatches","matchedNodeIdx","collectQueryResults","lViewResults","embeddedLViews","ɵɵqueryRefresh","ɵɵviewQuery","createTQuery","createLQuery","ɵɵcontentQuery","saveContentQueryAndDirectiveIndex","ɵɵloadQuery","loadQueryInternal","tViewContentQueries","lastSavedDirectiveIndex","ɵɵtemplateRefExtractor","angularCoreEnv","patchModuleCompilation","isModuleWithProviders$1","isNgModule$1","moduleQueue","enqueueModuleForDelayedScoping","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","verifySemanticsOfNgModuleDef","compileInjector","generateStandaloneInDeclarationsError","importingModule","verifiedNgModule","errors","unwrapModuleWithProvidersImports","modOrStandaloneCmpt","verifySemanticsOfNgModuleImport","verifyDeclarationsHaveDefinitions","verifyDirectivesHaveSelector","declarationType","verifyNotStandalone","combinedDeclarations","computeCombinedExports","verifyExportsAreDeclaredOrReExported","decl","verifyDeclarationIsUnique","verifyComponentEntryComponentsIsPartOfNgModule","getAnnotation","mod","verifyCorrectBootstrapType","verifyComponentIsPartOfNgModule","entryComponents","lastIndexOf","suppressErrors","existingModule","ownerNgModule","typeOrWithProviders","collect","__annotations__","readAnnotation","WeakMap","resetCompiledComponents","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","compilation","pipe","transitiveScopesForNgModule","exported","importedScope","entry","declared","declaredWithDefs","exportedType","exportedScope","_nextReferenceId","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","_valueProps","setMetadata","removeMetadata","addMetadata","references","removeObjects","removeValue","_propHashKey","propValue","addValue","nextObjectId","objectIds","replacer","_serializeReference","protoProp","desc","getOwnPropertyDescriptor","reflection","OverrideResolver","overrides","addOverride","setOverrides","isKnownType","overrider","DirectiveResolver","ComponentResolver","PipeResolver","NgModuleResolver","TestingModuleOverride","isTestingModuleOverride","DECLARATION","OVERRIDE_TEMPLATE","assertNoStandaloneComponents","resolver","TestBedCompiler","platform","additionalModuleTypes","originalComponentResolutionQueue","pendingComponents","pendingDirectives","pendingPipes","seenComponents","seenDirectives","overriddenModules","existingComponentStyles","resolvers","initResolvers","componentToModuleScope","initialNgDefs","defCleanupOps","compilerProviders","providerOverrides","rootProviderOverrides","providerOverridesByModule","providerOverridesByToken","scopesWithOverriddenProviders","testModuleRef","DynamicTestModule","testModuleType","setCompilerProviders","configureTestingModule","moduleDef","queueTypeArray","queueTypesFromModulesArray","overrideModule","module","invalidTypeError","recompileNgModule","overrideComponent","verifyNoStandaloneFlagOverrides","overrideDirective","overridePipe","overrideProvider","providerDef","overridesBucket","existingOverrides","overrideTemplateUsingTestingModule","hasStyleUrls","overrideStyleUrls","compileComponents","clearComponentResolutionQueue","needsAsyncResources","compileTypesSync","resourceLoader","finalize","compileTestModule","applyTransitiveScopes","applyProviderOverrides","patchComponentsWithExistingStyles","runInitializers","_compileNgModuleSync","applyProviderOverridesInScope","_compileNgModuleAsync","_getModuleResolver","_getComponentFactories","maybeUnwrapFn","maybeStoreNgDef","testingModuleDef","affectedModules","collectModulesAffectedByOverrides","storeFieldOfDefOnType","moduleToScope","getScopeOfModule","isTestingModule","realType","moduleScope","maybeApplyOverrides","hasProviderOverrides","patchDefWithProviderOverrides","hasScope","isStandaloneComponent","isNgModule","injectorDef","getComponentDef","dependency","getOverriddenProviders","importedModule","flatten","isModuleWithProviders","object","fieldName","originalValue","queueType","processedDefs","queueTypesFromModulesArrayRecur","hasNgModuleDef","seenModules","calcAffectedModulesRecur","currentDefs","defField","restoreOriginalState","forEachRight","op","defs","descriptor","RootScopeModule","enableLongStackTrace","R3TestCompiler","compilerOptions","CompilerModule","CompilerModuleFactory","getSingleProviderOverrides","getProviderToken","getProviderOverrides","flattenProviders","flattenedProviders","overriddenProviders","final","seenOverriddenProviders","ngDef","maybeFn","out","identityFn","mapFn","getProviderField","expectedType","testBed","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","_nextRootElementId","getTestBed","TestBedImpl","INSTANCE","_compiler","_testModuleRef","_activeFixtures","globalCompilationChecked","_INSTANCE","initTestEnvironment","resetTestEnvironment","configureCompiler","config","overrideTemplate","inject","runInInjectionContext","resetTestingModule","execute","_environmentTeardownOptions","teardown","_environmentErrorOnUnknownElementsOption","errorOnUnknownElements","_environmentErrorOnUnknownPropertiesOption","errorOnUnknownProperties","checkGlobalCompilationFinished","_previousErrorOnUnknownElementsOption","_previousErrorOnUnknownPropertiesOption","destroyActiveFixtures","shouldTearDownTestingModule","tearDownTestingModule","_instanceTeardownOptions","_instanceErrorOnUnknownElementsOption","_instanceErrorOnUnknownPropertiesOption","useJit","assertNotInstantiated","shouldThrowErrorOnUnknownElements","shouldThrowErrorOnUnknownProperties","TestBed","testComponentRenderer","rootElId","noNgZone","initComponent","fixture","methodName","methodDescription","errorCount","stacktrace","shouldRethrowTeardownErrors","instanceOptions","environmentOptions","rethrowErrors","destroyAfterEach","testRenderer","InjectSetupWrapper","_moduleDef","_addModule","withModule","_global","beforeEach","getCleanupHook","afterEach","expectedTeardownValue","__core_private_testing_placeholder__","ɵMetadataOverrider"],"sources":["C:/Users/hp/Documents/Arcs Infotech/blood-bank-system/node_modules/@angular/core/fesm2020/testing.mjs"],"sourcesContent":["/**\n * @license Angular v15.2.9\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { getDebugNode, RendererFactory2 as RendererFactory2$1, InjectionToken as InjectionToken$1, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, resolveForwardRef as resolveForwardRef$1, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID as LOCALE_ID$1, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ɵisEnvironmentProviders, ModuleWithComponentFactories, ɵconvertToBitFlags, Injector as Injector$1, InjectFlags as InjectFlags$1, ɵsetAllowDuplicateNgModuleIdsForTest, ɵresetCompiledComponents, ɵsetUnknownElementStrictMode as ɵsetUnknownElementStrictMode$1, ɵsetUnknownPropertyStrictMode as ɵsetUnknownPropertyStrictMode$1, ɵgetUnknownElementStrictMode as ɵgetUnknownElementStrictMode$1, ɵgetUnknownPropertyStrictMode as ɵgetUnknownPropertyStrictMode$1, EnvironmentInjector as EnvironmentInjector$1, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nfunction waitForAsync(fn) {\n    const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    if (!_Zone) {\n        return function () {\n            return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js');\n        };\n    }\n    const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n    if (typeof asyncTest === 'function') {\n        return asyncTest(fn);\n    }\n    return function () {\n        return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/testing');\n    };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\nfunction async(fn) {\n    return waitForAsync(fn);\n}\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nclass ComponentFixture {\n    constructor(componentRef, ngZone, _autoDetect) {\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = getDebugNode(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(() => {\n                this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n                    next: () => {\n                        this._isStable = false;\n                    }\n                });\n                this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: () => {\n                        if (this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            this.detectChanges(true);\n                        }\n                    }\n                });\n                this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: () => {\n                        this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(() => {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (this._promise !== null) {\n                                        this._resolve(true);\n                                        this._resolve = null;\n                                        this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                this._onErrorSubscription = ngZone.onError.subscribe({\n                    next: (error) => {\n                        throw error;\n                    }\n                });\n            });\n        }\n    }\n    _tick(checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    }\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    detectChanges(checkNoChanges = true) {\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(() => {\n                this._tick(checkNoChanges);\n            });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    }\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    checkNoChanges() {\n        this.changeDetectorRef.checkNoChanges();\n    }\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    autoDetectChanges(autoDetect = true) {\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    }\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    isStable() {\n        return this._isStable && !this.ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    whenStable() {\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(res => {\n                this._resolve = res;\n            });\n            return this._promise;\n        }\n    }\n    _getRenderer() {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(RendererFactory2$1, null);\n        }\n        return this._renderer;\n    }\n    /**\n     * Get a promise that resolves when the ui state is stable following animations.\n     */\n    whenRenderingDone() {\n        const renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    }\n    /**\n     * Trigger component destruction.\n     */\n    destroy() {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    }\n}\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/testing`;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZone() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.resetFakeAsyncZone();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the `fakeAsync` zone:\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception is thrown.\n *\n * Can be used to wrap `inject()` calls.\n *\n * @param fn The function that you want to wrap in the `fakeAsync` zone.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n *\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\n * Any arguments passed when calling this returned function will be passed through to the `fn`\n * function in the parameters when it is called.\n *\n * @publicApi\n */\nfunction fakeAsync(fn) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.fakeAsync(fn);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @param millis The number of milliseconds to advance the virtual timer.\n * @param tickOptions The options to pass to the `tick()` function.\n *\n * @usageNotes\n *\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\n * which determines whether or not to invoke new macroTasks.\n *\n * If you provide a `tickOptions` object, but do not specify a\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\n * then `processNewMacroTasksSynchronously` defaults to true.\n *\n * If you omit the `tickOptions` parameter (`tick(100))`), then\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\n *\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * The following example includes a nested timeout (new macroTask), and\n * the `tickOptions` parameter is allowed to default. In this case,\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\n * function is executed on each tick.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n * ```\n *\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\n * set to false, so the nested timeout function is not invoked.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n * ```\n *\n *\n * @publicApi\n */\nfunction tick(millis = 0, tickOptions = {\n    processNewMacroTasksSynchronously: true\n}) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.tick(millis, tickOptions);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flushes any pending microtasks and simulates the asynchronous passage of time for the timers in\n * the `fakeAsync` zone by\n * draining the macrotask queue until it is empty.\n *\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\n *     throwing an error.\n * @returns The simulated time elapsed, in milliseconds.\n *\n * @publicApi\n */\nfunction flush(maxTurns) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flush(maxTurns);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.discardPeriodicTasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flushMicrotasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n\n/** Whether test modules should be torn down by default. */\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\n/** Whether unknown elements in templates should throw by default. */\nconst THROW_ON_UNKNOWN_ELEMENTS_DEFAULT = false;\n/** Whether unknown properties in templates should throw by default. */\nconst THROW_ON_UNKNOWN_PROPERTIES_DEFAULT = false;\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nclass TestComponentRenderer {\n    insertRootElement(rootElementId) { }\n    removeAllRootElements() { }\n}\n/**\n * @publicApi\n */\nconst ComponentFixtureAutoDetect = new InjectionToken$1('ComponentFixtureAutoDetect');\n/**\n * @publicApi\n */\nconst ComponentFixtureNoNgZone = new InjectionToken$1('ComponentFixtureNoNgZone');\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    const componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    const urlMap = new Map();\n    function cachedResourceResolve(url) {\n        let promise = urlMap.get(url);\n        if (!promise) {\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((component, type) => {\n        const promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\n                component.template = template;\n            }));\n        }\n        const styleUrls = component.styleUrls;\n        const styles = component.styles || (component.styles = []);\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then((style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            }));\n        });\n        const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n        componentResolved.push(fullyResolved);\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\nfunction isComponentDefPendingResolution(type) {\n    return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n        component.styleUrls && component.styleUrls.length);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n    const old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n    componentDefPendingResolution.clear();\n    queue.forEach((_, type) => componentDefPendingResolution.add(type));\n    componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\n// https://github.com/terser/terser/issues/250.\nconst _global$1 = ( /* @__PURE__ */(() => (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof global !== 'undefined' && global) || (typeof window !== 'undefined' && window) ||\n    (typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self))());\n\nvar FactoryTarget;\n(function (FactoryTarget) {\n    FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n    FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n    FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n    FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n    FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\nvar ViewEncapsulation$1;\n(function (ViewEncapsulation) {\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));\n\nfunction getCompilerFacade(request) {\n    const globalNg = _global$1['ng'];\n    if (globalNg && globalNg.ɵcompilerFacade) {\n        return globalNg.ɵcompilerFacade;\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Log the type as an error so that a developer can easily navigate to the type from the\n        // console.\n        console.error(`JIT compilation failed for ${request.kind}`, request.type);\n        let message = `The ${request.kind} '${request\n            .type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n        if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n            message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n            message +=\n                `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n            message += '\\n';\n            message +=\n                `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n        }\n        else {\n            message +=\n                `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n        }\n        message +=\n            `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n        message +=\n            `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n        throw new Error(message);\n    }\n    else {\n        throw new Error('JIT compiler unavailable');\n    }\n}\n\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (Array.isArray(token)) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nfunction concatStringsWithSpace(before, after) {\n    return (before == null || before === '') ?\n        (after === null ? '' : after) :\n        ((after == null || after === '') ? before : before + ' ' + after);\n}\n\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n    forwardRefFn.__forward_ref__ = forwardRef;\n    forwardRefFn.toString = function () {\n        return stringify(this());\n    };\n    return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n    return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n    return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef;\n}\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nfunction ɵɵdefineInjectable(opts) {\n    return {\n        token: opts.token,\n        providedIn: opts.providedIn || null,\n        factory: opts.factory,\n        value: undefined,\n    };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjector(options) {\n    return { providers: options.providers || [], imports: options.imports || [] };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nfunction getInjectableDef(type) {\n    return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\nfunction isInjectable(type) {\n    return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition(type, field) {\n    return type.hasOwnProperty(field) ? type[field] : null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n    const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n    if (def) {\n        ngDevMode &&\n            console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n                `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\n        return def;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nfunction getInjectorDef(type) {\n    return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?\n        type[NG_INJ_DEF] :\n        null;\n}\nconst NG_PROV_DEF = getClosureSafeProperty({ ɵprov: getClosureSafeProperty });\nconst NG_INJ_DEF = getClosureSafeProperty({ ɵinj: getClosureSafeProperty });\n// We need to keep these around so we can read off old defs if new defs are unavailable\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nconst NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n/**\n * URL for the XSS security documentation.\n */\nconst XSS_SECURITY_URL = 'https://g.co/ng/security#xss';\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.\n */\nclass RuntimeError extends Error {\n    constructor(code, message) {\n        super(formatRuntimeError(code, message));\n        this.code = code;\n    }\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n    // Error code might be a negative number, which is a special marker that instructs the logic to\n    // generate a link to the error details page on angular.io.\n    // We also prepend `0` to non-compile-time errors.\n    const fullCode = `NG0${Math.abs(code)}`;\n    let errorMessage = `${fullCode}${message ? ': ' + message.trim() : ''}`;\n    if (ngDevMode && code < 0) {\n        const addPeriodSeparator = !errorMessage.match(/[.,;!?]$/);\n        const separator = addPeriodSeparator ? '.' : '';\n        errorMessage =\n            `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n    }\n    return errorMessage;\n}\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n    return typeof v === 'function';\n}\n\n// The functions in this file verify that the assumptions we are making\nfunction assertNumber(actual, msg) {\n    if (!(typeof actual === 'number')) {\n        throwError(msg, typeof actual, 'number', '===');\n    }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n    assertNumber(actual, 'Expected a number');\n    assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n    assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n    if (!(typeof actual === 'string')) {\n        throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n    }\n}\nfunction assertFunction(actual, msg) {\n    if (!(typeof actual === 'function')) {\n        throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n    }\n}\nfunction assertEqual(actual, expected, msg) {\n    if (!(actual == expected)) {\n        throwError(msg, actual, expected, '==');\n    }\n}\nfunction assertNotEqual(actual, expected, msg) {\n    if (!(actual != expected)) {\n        throwError(msg, actual, expected, '!=');\n    }\n}\nfunction assertSame(actual, expected, msg) {\n    if (!(actual === expected)) {\n        throwError(msg, actual, expected, '===');\n    }\n}\nfunction assertNotSame(actual, expected, msg) {\n    if (!(actual !== expected)) {\n        throwError(msg, actual, expected, '!==');\n    }\n}\nfunction assertLessThan(actual, expected, msg) {\n    if (!(actual < expected)) {\n        throwError(msg, actual, expected, '<');\n    }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n    if (!(actual <= expected)) {\n        throwError(msg, actual, expected, '<=');\n    }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n    if (!(actual > expected)) {\n        throwError(msg, actual, expected, '>');\n    }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n    if (!(actual >= expected)) {\n        throwError(msg, actual, expected, '>=');\n    }\n}\nfunction assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg, actual, null, '==');\n    }\n}\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg, actual, null, '!=');\n    }\n}\nfunction throwError(msg, actual, expected, comparison) {\n    throw new Error(`ASSERTION ERROR: ${msg}` +\n        (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n    // If we're in a worker, `Node` will not be defined.\n    if (!(typeof Node !== 'undefined' && node instanceof Node) &&\n        !(typeof node === 'object' && node != null &&\n            node.constructor.name === 'WebWorkerRenderNode')) {\n        throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n    }\n}\nfunction assertIndexInRange(arr, index) {\n    assertDefined(arr, 'Array must be defined.');\n    const maxLen = arr.length;\n    if (index < 0 || index >= maxLen) {\n        throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n    }\n}\nfunction assertOneOf(value, ...validValues) {\n    if (validValues.indexOf(value) !== -1)\n        return true;\n    throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nfunction arrayEquals(a, b, identityAccessor) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        let valueA = a[i];\n        let valueB = b[i];\n        if (identityAccessor) {\n            valueA = identityAccessor(valueA);\n            valueB = identityAccessor(valueB);\n        }\n        if (valueB !== valueA) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Flattens an array.\n */\nfunction flatten$1(list) {\n    return list.flat(Number.POSITIVE_INFINITY);\n}\nfunction deepForEach(input, fn) {\n    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        return arr.pop();\n    }\n    else {\n        return arr.splice(index, 1)[0];\n    }\n}\nfunction newArray(size, value) {\n    const list = [];\n    for (let i = 0; i < size; i++) {\n        list.push(value);\n    }\n    return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nfunction arraySplice(array, index, count) {\n    const length = array.length - count;\n    while (index < length) {\n        array[index] = array[index + count];\n        index++;\n    }\n    while (count--) {\n        array.pop(); // shrink the array\n    }\n}\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nfunction arrayInsert(array, index, value) {\n    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n    let end = array.length;\n    while (end > index) {\n        const previousEnd = end - 1;\n        array[end] = array[previousEnd];\n        end = previousEnd;\n    }\n    array[index] = value;\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nfunction arrayInsert2(array, index, value1, value2) {\n    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n    let end = array.length;\n    if (end == index) {\n        // inserting at the end.\n        array.push(value1, value2);\n    }\n    else if (end === 1) {\n        // corner case when we have less items in array than we have items to insert.\n        array.push(value2, array[0]);\n        array[0] = value1;\n    }\n    else {\n        end--;\n        array.push(array[end - 1], array[end]);\n        while (end > index) {\n            const previousEnd = end - 2;\n            array[end] = array[previousEnd];\n            end--;\n        }\n        array[index] = value1;\n        array[index + 1] = value2;\n    }\n}\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nfunction arrayIndexOfSorted(array, value) {\n    return _arrayIndexOfSorted(array, value, 0);\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n    let index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it set it.\n        keyValueArray[index | 1] = value;\n    }\n    else {\n        index = ~index;\n        arrayInsert2(keyValueArray, index, key, value);\n    }\n    return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n    const index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it retrieve it.\n        return keyValueArray[index | 1];\n    }\n    return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n    return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nfunction keyValueArrayDelete(keyValueArray, key) {\n    const index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it remove it.\n        arraySplice(keyValueArray, index, 2);\n    }\n    return index;\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n    ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n    let start = 0;\n    let end = array.length >> shift;\n    while (end !== start) {\n        const middle = start + ((end - start) >> 1); // find the middle.\n        const current = array[middle << shift];\n        if (value === current) {\n            return (middle << shift);\n        }\n        else if (current > value) {\n            end = middle;\n        }\n        else {\n            start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n        }\n    }\n    return ~(end << shift);\n}\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n    return { toString: fn }.toString();\n}\n\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function DecoratorFactory(...args) {\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call(this, ...args);\n                return this;\n            }\n            const annotationInstance = new DecoratorFactory(...args);\n            return function TypeDecorator(cls) {\n                if (typeFn)\n                    typeFn(cls, ...args);\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                    cls[ANNOTATIONS] :\n                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n                annotations.push(annotationInstance);\n                if (additionalProcessing)\n                    additionalProcessing(cls);\n                return cls;\n            };\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.ngMetadataName = name;\n        DecoratorFactory.annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    });\n}\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function ParamDecoratorFactory(...args) {\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            const annotationInstance = new ParamDecoratorFactory(...args);\n            ParamDecorator.annotation = annotationInstance;\n            return ParamDecorator;\n            function ParamDecorator(cls, unusedKey, index) {\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                    cls[PARAMETERS] :\n                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                (parameters[index] = parameters[index] || []).push(annotationInstance);\n                return cls;\n            }\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.ngMetadataName = name;\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function PropDecoratorFactory(...args) {\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            const decoratorInstance = new PropDecoratorFactory(...args);\n            function PropDecorator(target, name) {\n                const constructor = target.constructor;\n                // Use of Object.defineProperty is important because it creates a non-enumerable property\n                // which prevents the property from being copied during subclassing.\n                const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                    constructor[PROP_METADATA] :\n                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                if (additionalProcessing)\n                    additionalProcessing(target, name, ...args);\n            }\n            return PropDecorator;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.ngMetadataName = name;\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    });\n}\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n    return ES5_DELEGATE_CTOR.test(typeStr) ||\n        ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n        (ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr));\n}\nclass ReflectionCapabilities {\n    constructor(reflect) {\n        this._reflect = reflect || _global$1['Reflect'];\n    }\n    factory(t) {\n        return (...args) => new t(...args);\n    }\n    /** @internal */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = newArray(paramAnnotations.length);\n        }\n        else {\n            result = newArray(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] && paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    _ownParameters(type, parentCtor) {\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (isDelegateCtor(typeStr)) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\n            return type.parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        const tsickleCtorParams = type.ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return newArray(type.length);\n    }\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(type);\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n            let annotations = typeOrFunc.annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return typeOrFunc[ANNOTATIONS];\n        }\n        return null;\n    }\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.propMetadata &&\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n            let propMetadata = typeOrFunc.propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.propDecorators &&\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n            const propDecorators = typeOrFunc.propDecorators;\n            const propMetadata = {};\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return typeOrFunc[PROP_METADATA];\n        }\n        return null;\n    }\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    ownPropMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        const decoratorType = decoratorInvocation.type;\n        const annotationCls = decoratorType.annotationCls;\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\nfunction getParentCtor(ctor) {\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\nfunction ngDevModeResetPerfCounters() {\n    const locationString = typeof location !== 'undefined' ? location.toString() : '';\n    const newCounters = {\n        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n        firstCreatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererAppendChild: 0,\n        rendererInsertBefore: 0,\n        rendererCreateComment: 0,\n    };\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n    _global$1['ngDevMode'] = allowNgDevModeTrue && newCounters;\n    return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nfunction initNgDevMode() {\n    // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n    // reset the counters.\n    // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n    // yet.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (typeof ngDevMode !== 'object') {\n            ngDevModeResetPerfCounters();\n        }\n        return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n    }\n    return false;\n}\n\nfunction isEnvironmentProviders(value) {\n    return value && !!value.ɵproviders;\n}\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nfunction renderStringify(value) {\n    if (typeof value === 'string')\n        return value;\n    if (value == null)\n        return '';\n    // Use `String` so that it invokes the `toString` method of the value. Note that this\n    // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n    return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nfunction stringifyForError(value) {\n    if (typeof value === 'function')\n        return value.name || value.toString();\n    if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n        return value.type.name || value.type.toString();\n    }\n    return renderStringify(value);\n}\n\n/** Called when directives inject each other (creating a circular dependency) */\nfunction throwCyclicDependencyError(token, path) {\n    const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n    throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, `Circular dependency in DI detected for ${token}${depPath}`);\n}\nfunction throwMixedMultiProviderError() {\n    throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n    if (ngModuleType && providers) {\n        const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n        throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n    }\n    else if (isEnvironmentProviders(provider)) {\n        if (provider.ɵfromNgModule) {\n            throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n        }\n        else {\n            throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n        }\n    }\n    else {\n        throw new Error('Invalid provider');\n    }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n    const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n    throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for `inject` instead.\n */\nvar InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n    // writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n    return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throwProviderNotFoundError(stringify(token), 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nfunction assertInjectImplementationNotEqual(fn) {\n    ngDevMode &&\n        assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector = undefined;\nfunction setCurrentInjector(injector) {\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode &&\n            `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`EnvironmentInjector#runInContext\\`.`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n    return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactoryDep(index) {\n    throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode &&\n        `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported during instantiation of a dependency by the DI system. It can be used\n * during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction inject$1(token, flags = InjectFlags.Default) {\n    return ɵɵinject(token, convertToBitFlags(flags));\n}\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nfunction convertToBitFlags(flags) {\n    if (typeof flags === 'undefined' || typeof flags === 'number') {\n        return flags;\n    }\n    // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n    // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n    // `InjectOptions` to `InjectFlags`.\n    return (0 /* InternalInjectFlags.Default */ | // comment to force a line break in the formatter\n        (flags.optional && 8 /* InternalInjectFlags.Optional */) |\n        (flags.host && 1 /* InternalInjectFlags.Host */) |\n        (flags.self && 2 /* InternalInjectFlags.Self */) |\n        (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */));\n}\nfunction injectArgs(types) {\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        const arg = resolveForwardRef(types[i]);\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n            }\n            let type = undefined;\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                const meta = arg[j];\n                const flag = getInjectFlag(meta);\n                if (typeof flag === 'number') {\n                    // Special case when we handle @Inject decorator.\n                    if (flag === -1 /* DecoratorFlags.Inject */) {\n                        type = meta.token;\n                    }\n                    else {\n                        flags |= flag;\n                    }\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(ɵɵinject(type, flags));\n        }\n        else {\n            args.push(ɵɵinject(arg));\n        }\n    }\n    return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nfunction attachInjectFlag(decorator, flag) {\n    decorator[DI_DECORATOR_FLAG] = flag;\n    decorator.prototype[DI_DECORATOR_FLAG] = flag;\n    return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nfunction getInjectFlag(token) {\n    return token[DI_DECORATOR_FLAG];\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n    const tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n    let context = stringify(obj);\n    if (Array.isArray(obj)) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        let parts = [];\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Inject = attachInjectFlag(\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nmakeParamDecorator('Inject', (token) => ({ token })), -1 /* DecoratorFlags.Inject */);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Optional = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Self = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst SkipSelf = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Host = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n    // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n    // https://github.com/angular/angular/issues/44119 for additional information.\n    /**\n     * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n     * component's host element and applying the same attribute to all the CSS selectors provided\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n     *\n     * This is the default option.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    /**\n     * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n     * to any HTML element of the application regardless of their host Component.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    /**\n     * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n     * a ShadowRoot for the component's host element which is then used to encapsulate\n     * all the Component's styling.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n    // These property accesses can be ignored because ngDevMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_OBJ);\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_ARRAY);\n}\n\nconst NG_COMP_DEF = getClosureSafeProperty({ ɵcmp: getClosureSafeProperty });\nconst NG_DIR_DEF = getClosureSafeProperty({ ɵdir: getClosureSafeProperty });\nconst NG_PIPE_DEF = getClosureSafeProperty({ ɵpipe: getClosureSafeProperty });\nconst NG_MOD_DEF = getClosureSafeProperty({ ɵmod: getClosureSafeProperty });\nconst NG_FACTORY_DEF = getClosureSafeProperty({ ɵfac: getClosureSafeProperty });\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n/** Counter used to generate unique IDs for component definitions. */\nlet componentDefCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n    return noSideEffects(() => {\n        // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n        // See the `initNgDevMode` docstring for more information.\n        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n        const baseDef = getNgDirectiveDef(componentDefinition);\n        const def = {\n            ...baseDef,\n            decls: componentDefinition.decls,\n            vars: componentDefinition.vars,\n            template: componentDefinition.template,\n            consts: componentDefinition.consts || null,\n            ngContentSelectors: componentDefinition.ngContentSelectors,\n            onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n            directiveDefs: null,\n            pipeDefs: null,\n            dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n            getStandaloneInjector: null,\n            data: componentDefinition.data || {},\n            encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n            id: `c${componentDefCount++}`,\n            styles: componentDefinition.styles || EMPTY_ARRAY,\n            _: null,\n            schemas: componentDefinition.schemas || null,\n            tView: null,\n        };\n        initFeatures(def);\n        const dependencies = componentDefinition.dependencies;\n        def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */ false);\n        def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */ true);\n        return def;\n    });\n}\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n    const def = type.ɵcmp;\n    def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */ false);\n    def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */ true);\n}\nfunction extractDirectiveDef(type) {\n    return getComponentDef$1(type) || getDirectiveDef(type);\n}\nfunction nonNull(value) {\n    return value !== null;\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵdefineNgModule(def) {\n    return noSideEffects(() => {\n        const res = {\n            type: def.type,\n            bootstrap: def.bootstrap || EMPTY_ARRAY,\n            declarations: def.declarations || EMPTY_ARRAY,\n            imports: def.imports || EMPTY_ARRAY,\n            exports: def.exports || EMPTY_ARRAY,\n            transitiveCompileScopes: null,\n            schemas: def.schemas || null,\n            id: def.id || null,\n        };\n        return res;\n    });\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n    return noSideEffects(() => {\n        const ngModuleDef = getNgModuleDef(type, true);\n        ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n        ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n        ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n    });\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY_OBJ;\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            let publicName = obj[minifiedKey];\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = declaredName);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdefineDirective(directiveDefinition) {\n    return noSideEffects(() => {\n        const def = getNgDirectiveDef(directiveDefinition);\n        initFeatures(def);\n        return def;\n    });\n}\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nfunction ɵɵdefinePipe(pipeDef) {\n    return {\n        type: pipeDef.type,\n        name: pipeDef.name,\n        factory: null,\n        pure: pipeDef.pure !== false,\n        standalone: pipeDef.standalone === true,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    };\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef$1(type) {\n    return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDef(type) {\n    return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef$1(type) {\n    return type[NG_PIPE_DEF] || null;\n}\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See this guide for additional information: https://angular.io/guide/standalone-components\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nfunction isStandalone(type) {\n    const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    return def !== null ? def.standalone : false;\n}\nfunction getNgModuleDef(type, throwNotFound) {\n    const ngModuleDef = type[NG_MOD_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n    }\n    return ngModuleDef;\n}\nfunction getNgDirectiveDef(directiveDefinition) {\n    const declaredInputs = {};\n    return {\n        type: directiveDefinition.type,\n        providersResolver: null,\n        factory: null,\n        hostBindings: directiveDefinition.hostBindings || null,\n        hostVars: directiveDefinition.hostVars || 0,\n        hostAttrs: directiveDefinition.hostAttrs || null,\n        contentQueries: directiveDefinition.contentQueries || null,\n        declaredInputs,\n        exportAs: directiveDefinition.exportAs || null,\n        standalone: directiveDefinition.standalone === true,\n        selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n        viewQuery: directiveDefinition.viewQuery || null,\n        features: directiveDefinition.features || null,\n        setInput: null,\n        findHostDirectiveDefs: null,\n        hostDirectives: null,\n        inputs: invertObject(directiveDefinition.inputs, declaredInputs),\n        outputs: invertObject(directiveDefinition.outputs),\n    };\n}\nfunction initFeatures(definition) {\n    definition.features?.forEach((fn) => fn(definition));\n}\nfunction extractDefListOrFactory(dependencies, pipeDef) {\n    if (!dependencies) {\n        return null;\n    }\n    const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;\n    return () => (typeof dependencies === 'function' ? dependencies() : dependencies)\n        .map(dep => defExtractor(dep))\n        .filter(nonNull);\n}\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nconst T_HOST = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR$1 = 9;\nconst RENDERER_FACTORY = 10;\nconst RENDERER = 11;\nconst SANITIZER = 12;\nconst CHILD_HEAD = 13;\nconst CHILD_TAIL = 14;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 15;\nconst DECLARATION_COMPONENT_VIEW = 16;\nconst DECLARATION_LCONTAINER = 17;\nconst PREORDER_HOOK_FLAGS = 18;\nconst QUERIES = 19;\nconst ID = 20;\nconst EMBEDDED_VIEW_INJECTOR = 21;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nconst HEADER_OFFSET = 22;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$4 = 1;\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\nconst HAS_TRANSPLANTED_VIEWS = 2;\n// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$3 = 1;\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n    return tNode.componentOffset > -1;\n}\nfunction isDirectiveHost(tNode) {\n    return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\nfunction isComponentDef(def) {\n    return !!def.template;\n}\nfunction isRootView(target) {\n    return (target[FLAGS] & 256 /* LViewFlags.IsRoot */) !== 0;\n}\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n    assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeForTView(tNode, tView) {\n    assertTNode(tNode);\n    tNode.hasOwnProperty('tView_') &&\n        assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n    assertDefined(tNode, 'TNode must be defined');\n    if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n        throwError('Not of type TNode, got: ' + tNode);\n    }\n}\nfunction assertTIcu(tIcu) {\n    assertDefined(tIcu, 'Expected TIcu to be defined');\n    if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n        throwError('Object is not of TIcu type.');\n    }\n}\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n    if (!getComponentDef$1(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertCurrentTNodeIsParent(isParent) {\n    assertEqual(isParent, true, 'currentTNode should be a parent');\n}\nfunction assertHasParent(tNode) {\n    assertDefined(tNode, 'currentTNode should exist!');\n    assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertLContainer(value) {\n    assertDefined(value, 'LContainer must be defined');\n    assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n    assertDefined(value, 'LView must be defined');\n    assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n    assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n    assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nfunction assertDirectiveDef(obj) {\n    if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n        throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n    }\n}\nfunction assertIndexInDeclRange(lView, index) {\n    const tView = lView[1];\n    assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n    const tView = lView[1];\n    assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n    if (!(lower <= index && index < upper)) {\n        throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n    }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage ||\n        'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n    assertDefined(lView, errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n    assertIndexInExpandoRange(lView, injectorIndex);\n    assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n    assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\n\nfunction getFactoryDef(type, throwNotFound) {\n    const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n    if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n        throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n    }\n    return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nclass SimpleChange {\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange() {\n        return this.firstChange;\n    }\n}\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵNgOnChangesFeature() {\n    return NgOnChangesFeatureImpl;\n}\nfunction NgOnChangesFeatureImpl(definition) {\n    if (definition.type.prototype.ngOnChanges) {\n        definition.setInput = ngOnChangesSetInput;\n    }\n    return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\nɵɵNgOnChangesFeature.ngInherit = true;\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n    const simpleChangesStore = getSimpleChangesStore(this);\n    const current = simpleChangesStore?.current;\n    if (current) {\n        const previous = simpleChangesStore.previous;\n        if (previous === EMPTY_OBJ) {\n            simpleChangesStore.previous = current;\n        }\n        else {\n            // New changes are copied to the previous store, so that we don't lose history for inputs\n            // which were not changed this time\n            for (let key in current) {\n                previous[key] = current[key];\n            }\n        }\n        simpleChangesStore.current = null;\n        this.ngOnChanges(current);\n    }\n}\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n    const declaredName = this.declaredInputs[publicName];\n    ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n    const simpleChangesStore = getSimpleChangesStore(instance) ||\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n    const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n    const previous = simpleChangesStore.previous;\n    const previousChange = previous[declaredName];\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n    instance[privateName] = value;\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n    return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n    return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\nlet profilerCallback = null;\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setProfiler = (profiler) => {\n    profilerCallback = profiler;\n};\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nconst profiler = function (event, instance, hookOrListener) {\n    if (profilerCallback != null /* both `null` and `undefined` */) {\n        profilerCallback(event, instance, hookOrListener);\n    }\n};\n\nconst SVG_NAMESPACE = 'svg';\nconst MATH_ML_NAMESPACE = 'math';\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = value[HOST];\n    }\n    return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLView(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLView()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'object')\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n    ngDevMode && assertIndexInRange(lView, index);\n    ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n    return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNode(tNode, lView) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertIndexInRange(lView, tNode.index);\n    const node = unwrapRNode(lView[tNode.index]);\n    return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n    const index = tNode === null ? -1 : tNode.index;\n    if (index !== -1) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        const node = unwrapRNode(lView[index]);\n        return node;\n    }\n    return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n    const tNode = tView.data[index];\n    ngDevMode && tNode !== null && assertTNode(tNode);\n    return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n    ngDevMode && assertIndexInRange(view, index);\n    return view[index];\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    ngDevMode && assertIndexInRange(hostView, nodeIndex);\n    const slotValue = hostView[nodeIndex];\n    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n    return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 64 /* LViewFlags.Attached */) === 64 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n    if (index === null || index === undefined)\n        return null;\n    ngDevMode && assertIndexInRange(consts, index);\n    return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\nfunction updateTransplantedViewCount(lContainer, amount) {\n    lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    let viewOrContainer = lContainer;\n    let parent = lContainer[PARENT];\n    while (parent !== null &&\n        ((amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1) ||\n            (amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0))) {\n        parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n        viewOrContainer = parent;\n        parent = parent[PARENT];\n    }\n}\n\nconst instructionState = {\n    lFrame: createLFrame(null),\n    bindingsEnabled: true,\n};\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _isInCheckNoChangesMode = false;\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nfunction specOnlyIsInstructionStateEmpty() {\n    return instructionState.lFrame.parent === null;\n}\nfunction getElementDepthCount() {\n    return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n    instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n    instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n    return instructionState.bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵenableBindings() {\n    instructionState.bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdisableBindings() {\n    instructionState.bindingsEnabled = false;\n}\n/**\n * Return the current `LView`.\n */\nfunction getLView() {\n    return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\nfunction getTView() {\n    return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nfunction ɵɵrestoreView(viewToRestore) {\n    instructionState.lFrame.contextLView = viewToRestore;\n    return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nfunction ɵɵresetView(value) {\n    instructionState.lFrame.contextLView = null;\n    return value;\n}\nfunction getCurrentTNode() {\n    let currentTNode = getCurrentTNodePlaceholderOk();\n    while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n        currentTNode = currentTNode.parent;\n    }\n    return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n    return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n    const lFrame = instructionState.lFrame;\n    const currentTNode = lFrame.currentTNode;\n    return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n    ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n    const lFrame = instructionState.lFrame;\n    lFrame.currentTNode = tNode;\n    lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n    return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n    instructionState.lFrame.isParent = false;\n}\nfunction getContextLView() {\n    const contextLView = instructionState.lFrame.contextLView;\n    ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n    return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n    !ngDevMode && throwError('Must never be called in production mode');\n    return _isInCheckNoChangesMode;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    _isInCheckNoChangesMode = mode;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n    const lFrame = instructionState.lFrame;\n    let index = lFrame.bindingRootIndex;\n    if (index === -1) {\n        index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n    }\n    return index;\n}\nfunction getBindingIndex() {\n    return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n    return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n    return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n    const lFrame = instructionState.lFrame;\n    const index = lFrame.bindingIndex;\n    lFrame.bindingIndex = lFrame.bindingIndex + count;\n    return index;\n}\nfunction isInI18nBlock() {\n    return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n    instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n    const lFrame = instructionState.lFrame;\n    lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nfunction getCurrentDirectiveIndex() {\n    return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n    instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nfunction getCurrentDirectiveDef(tData) {\n    const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n    return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n    return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n    instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView) {\n    const tView = lView[TVIEW];\n    // Return the declaration parent for embedded views\n    if (tView.type === 2 /* TViewType.Embedded */) {\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n        return tView.declTNode;\n    }\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    // Falling back to `T_HOST` in case we cross component boundary.\n    if (tView.type === 1 /* TViewType.Component */) {\n        return lView[T_HOST];\n    }\n    // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n    return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nfunction enterDI(lView, tNode, flags) {\n    ngDevMode && assertLViewOrUndefined(lView);\n    if (flags & InjectFlags.SkipSelf) {\n        ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n        let parentTNode = tNode;\n        let parentLView = lView;\n        while (true) {\n            ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n            parentTNode = parentTNode.parent;\n            if (parentTNode === null && !(flags & InjectFlags.Host)) {\n                parentTNode = getDeclarationTNode(parentLView);\n                if (parentTNode === null)\n                    break;\n                // In this case, a parent exists and is definitely an element. So it will definitely\n                // have an existing lView as the declaration view, which is why we can assume it's defined.\n                ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n                parentLView = parentLView[DECLARATION_VIEW];\n                // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n                // We want to skip those and look only at Elements and ElementContainers to ensure\n                // we're looking at true parent nodes, and not content or other types.\n                if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        if (parentTNode === null) {\n            // If we failed to find a parent TNode this means that we should use module injector.\n            return false;\n        }\n        else {\n            tNode = parentTNode;\n            lView = parentLView;\n        }\n    }\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const lFrame = instructionState.lFrame = allocLFrame();\n    lFrame.currentTNode = tNode;\n    lFrame.lView = lView;\n    return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nfunction enterView(newView) {\n    ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n    ngDevMode && assertLViewOrUndefined(newView);\n    const newLFrame = allocLFrame();\n    if (ngDevMode) {\n        assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n        assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n    }\n    const tView = newView[TVIEW];\n    instructionState.lFrame = newLFrame;\n    ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n    newLFrame.currentTNode = tView.firstChild;\n    newLFrame.lView = newView;\n    newLFrame.tView = tView;\n    newLFrame.contextLView = newView;\n    newLFrame.bindingIndex = tView.bindingStartIndex;\n    newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n    const currentLFrame = instructionState.lFrame;\n    const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n    const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n    return newLFrame;\n}\nfunction createLFrame(parent) {\n    const lFrame = {\n        currentTNode: null,\n        isParent: true,\n        lView: null,\n        tView: null,\n        selectedIndex: -1,\n        contextLView: null,\n        elementDepthCount: 0,\n        currentNamespace: null,\n        currentDirectiveIndex: -1,\n        bindingRootIndex: -1,\n        bindingIndex: -1,\n        currentQueryIndex: 0,\n        parent: parent,\n        child: null,\n        inI18n: false,\n    };\n    parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n    return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight() {\n    const oldLFrame = instructionState.lFrame;\n    instructionState.lFrame = oldLFrame.parent;\n    oldLFrame.currentTNode = null;\n    oldLFrame.lView = null;\n    return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nfunction leaveView() {\n    const oldLFrame = leaveViewLight();\n    oldLFrame.isParent = true;\n    oldLFrame.tView = null;\n    oldLFrame.selectedIndex = -1;\n    oldLFrame.contextLView = null;\n    oldLFrame.elementDepthCount = 0;\n    oldLFrame.currentDirectiveIndex = -1;\n    oldLFrame.currentNamespace = null;\n    oldLFrame.bindingRootIndex = -1;\n    oldLFrame.bindingIndex = -1;\n    oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n    const contextLView = instructionState.lFrame.contextLView =\n        walkUpViews(level, instructionState.lFrame.contextLView);\n    return contextLView[CONTEXT];\n}\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode &&\n            assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = currentView[DECLARATION_VIEW];\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nfunction getSelectedIndex() {\n    return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nfunction setSelectedIndex(index) {\n    ngDevMode && index !== -1 &&\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n    ngDevMode &&\n        assertLessThan(index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n    instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nfunction getSelectedTNode() {\n    const lFrame = instructionState.lFrame;\n    return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceSVG() {\n    instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceMathML() {\n    instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceHTML() {\n    namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTMLInternal() {\n    instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace$1() {\n    return instructionState.lFrame.currentNamespace;\n}\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;\n    if (ngOnChanges) {\n        const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n        (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);\n        (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);\n    }\n    if (ngOnInit) {\n        (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);\n    }\n    if (ngDoCheck) {\n        (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);\n        (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    // It's necessary to loop through the directives at elementEnd() (rather than processing in\n    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n    // hooks for projected components and directives must be called *before* their hosts.\n    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n        const directiveDef = tView.data[i];\n        ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n        const lifecycleHooks = directiveDef.type.prototype;\n        const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy } = lifecycleHooks;\n        if (ngAfterContentInit) {\n            (tView.contentHooks ?? (tView.contentHooks = [])).push(-i, ngAfterContentInit);\n        }\n        if (ngAfterContentChecked) {\n            (tView.contentHooks ?? (tView.contentHooks = [])).push(i, ngAfterContentChecked);\n            (tView.contentCheckHooks ?? (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);\n        }\n        if (ngAfterViewInit) {\n            (tView.viewHooks ?? (tView.viewHooks = [])).push(-i, ngAfterViewInit);\n        }\n        if (ngAfterViewChecked) {\n            (tView.viewHooks ?? (tView.viewHooks = [])).push(i, ngAfterViewChecked);\n            (tView.viewCheckHooks ?? (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);\n        }\n        if (ngOnDestroy != null) {\n            (tView.destroyHooks ?? (tView.destroyHooks = [])).push(i, ngOnDestroy);\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n    callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n    ngDevMode &&\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n    if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n        callHooks(lView, hooks, initPhase, nodeIndex);\n    }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n    ngDevMode &&\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n    let flags = lView[FLAGS];\n    if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n        flags &= 2047 /* LViewFlags.IndexWithinInitPhaseReset */;\n        flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n        lView[FLAGS] = flags;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    ngDevMode &&\n        assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n    const startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n    let lastNodeIndexFound = 0;\n    for (let i = startIndex; i < max; i++) {\n        const hook = arr[i + 1];\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = arr[i];\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            const isInitHook = arr[i] < 0;\n            if (isInitHook)\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    const isInitHook = arr[i] < 0;\n    const hook = arr[i + 1];\n    const directiveIndex = isInitHook ? -arr[i] : arr[i];\n    const directive = currentView[directiveIndex];\n    if (isInitHook) {\n        const indexWithintInitPhase = currentView[FLAGS] >> 11 /* LViewFlags.IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively updated.\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 2048 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n            profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n            try {\n                hook.call(directive);\n            }\n            finally {\n                profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n            }\n        }\n    }\n    else {\n        profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n        try {\n            hook.call(directive);\n        }\n        finally {\n            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n        }\n    }\n}\n\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n    constructor(\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        ngDevMode && assertDefined(factory, 'Factory not specified');\n        ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\nfunction isFactory(obj) {\n    return obj instanceof NodeInjectorFactory;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$2 = 1;\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nfunction toTNodeTypeAsString(tNodeType) {\n    let text = '';\n    (tNodeType & 1 /* TNodeType.Text */) && (text += '|Text');\n    (tNodeType & 2 /* TNodeType.Element */) && (text += '|Element');\n    (tNodeType & 4 /* TNodeType.Container */) && (text += '|Container');\n    (tNodeType & 8 /* TNodeType.ElementContainer */) && (text += '|ElementContainer');\n    (tNodeType & 16 /* TNodeType.Projection */) && (text += '|Projection');\n    (tNodeType & 32 /* TNodeType.Icu */) && (text += '|IcuContainer');\n    (tNodeType & 64 /* TNodeType.Placeholder */) && (text += '|Placeholder');\n    return text.length > 0 ? text.substring(1) : text;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$1 = 1;\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasClassInput(tNode) {\n    return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasStyleInput(tNode) {\n    return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\n}\n\nfunction assertTNodeType(tNode, expectedTypes, message) {\n    assertDefined(tNode, 'should be called with a TNode');\n    if ((tNode.type & expectedTypes) === 0) {\n        throwError(message ||\n            `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n    }\n}\nfunction assertPureTNodeType(type) {\n    if (!(type === 2 /* TNodeType.Element */ || //\n        type === 1 /* TNodeType.Text */ || //\n        type === 4 /* TNodeType.Container */ || //\n        type === 8 /* TNodeType.ElementContainer */ || //\n        type === 32 /* TNodeType.Icu */ || //\n        type === 16 /* TNodeType.Projection */ || //\n        type === 64 /* TNodeType.Placeholder */)) {\n        throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n    }\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(renderer, native, attrs) {\n    let i = 0;\n    while (i < attrs.length) {\n        const value = attrs[i];\n        if (typeof value === 'number') {\n            // only namespaces are supported. Other value types (such as style/class\n            // entries) are not supported in this function.\n            if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n                break;\n            }\n            // we just landed on the marker value ... therefore\n            // we should skip to the next entry\n            i++;\n            const namespaceURI = attrs[i++];\n            const attrName = attrs[i++];\n            const attrVal = attrs[i++];\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n        }\n        else {\n            // attrName is string;\n            const attrName = value;\n            const attrVal = attrs[++i];\n            // Standard attributes\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (isAnimationProp(attrName)) {\n                renderer.setProperty(native, attrName, attrVal);\n            }\n            else {\n                renderer.setAttribute(native, attrName, attrVal);\n            }\n            i++;\n        }\n    }\n    // another piece of code may iterate over the same attributes array. Therefore\n    // it may be helpful to return the exact spot where the attributes array exited\n    // whether by running into an unsupported marker or if all the static values were\n    // iterated over.\n    return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n    return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ ||\n        marker === 6 /* AttributeMarker.I18n */;\n}\nfunction isAnimationProp(name) {\n    // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n    // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n    // charCodeAt doesn't allocate memory to return a substring.\n    return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nfunction mergeHostAttrs(dst, src) {\n    if (src === null || src.length === 0) {\n        // do nothing\n    }\n    else if (dst === null || dst.length === 0) {\n        // We have source, but dst is empty, just make a copy.\n        dst = src.slice();\n    }\n    else {\n        let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n        for (let i = 0; i < src.length; i++) {\n            const item = src[i];\n            if (typeof item === 'number') {\n                srcMarker = item;\n            }\n            else {\n                if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) {\n                    // Case where we need to consume `key1`, `key2`, `value` items.\n                }\n                else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ ||\n                    srcMarker === 2 /* AttributeMarker.Styles */) {\n                    // Case where we have to consume `key1` and `value` only.\n                    mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n                }\n                else {\n                    // Case where we have to consume `key1` only.\n                    mergeHostAttribute(dst, srcMarker, item, null, null);\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n    let i = 0;\n    // Assume that new markers will be inserted at the end.\n    let markerInsertPosition = dst.length;\n    // scan until correct type.\n    if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n        markerInsertPosition = -1;\n    }\n    else {\n        while (i < dst.length) {\n            const dstValue = dst[i++];\n            if (typeof dstValue === 'number') {\n                if (dstValue === marker) {\n                    markerInsertPosition = -1;\n                    break;\n                }\n                else if (dstValue > marker) {\n                    // We need to save this as we want the markers to be inserted in specific order.\n                    markerInsertPosition = i - 1;\n                    break;\n                }\n            }\n        }\n    }\n    // search until you find place of insertion\n    while (i < dst.length) {\n        const item = dst[i];\n        if (typeof item === 'number') {\n            // since `i` started as the index after the marker, we did not find it if we are at the next\n            // marker\n            break;\n        }\n        else if (item === key1) {\n            // We already have same token\n            if (key2 === null) {\n                if (value !== null) {\n                    dst[i + 1] = value;\n                }\n                return;\n            }\n            else if (key2 === dst[i + 1]) {\n                dst[i + 2] = value;\n                return;\n            }\n        }\n        // Increment counter.\n        i++;\n        if (key2 !== null)\n            i++;\n        if (value !== null)\n            i++;\n    }\n    // insert at location.\n    if (markerInsertPosition !== -1) {\n        dst.splice(markerInsertPosition, 0, marker);\n        i = markerInsertPosition + 1;\n    }\n    dst.splice(i++, 0, key1);\n    if (key2 !== null) {\n        dst.splice(i++, 0, key2);\n    }\n    if (value !== null) {\n        dst.splice(i++, 0, value);\n    }\n}\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n    ngDevMode && assertNumber(parentLocation, 'Number expected');\n    ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');\n    const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n    ngDevMode &&\n        assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n    return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\nfunction getParentInjectorViewOffset(parentLocation) {\n    return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    let viewOffset = getParentInjectorViewOffset(location);\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = parentView[DECLARATION_VIEW];\n        viewOffset--;\n    }\n    return parentView;\n}\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n    let id;\n    if (typeof type === 'string') {\n        id = type.charCodeAt(0) || 0;\n    }\n    else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n        id = type[NG_ELEMENT_ID];\n    }\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = type[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    const bloomHash = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    const mask = 1 << bloomHash;\n    // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n    // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n    // should be written to.\n    tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n    const existingInjectorIndex = getInjectorIndex(tNode, lView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    const tView = lView[TVIEW];\n    if (tView.firstCreatePass) {\n        tNode.injectorIndex = lView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(lView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n    }\n    const parentLoc = getParentInjectorLocation(tNode, lView);\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        const parentIndex = getParentInjectorIndex(parentLoc);\n        const parentLView = getParentInjectorView(parentLoc, lView);\n        const parentData = parentLView[TVIEW].data;\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n            lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n    return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n        return -1;\n    }\n    else {\n        ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nfunction getParentInjectorLocation(tNode, lView) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        // If we have a parent `TNode` and there is an injector associated with it we are done, because\n        // the parent injector is within the current `LView`.\n        return tNode.parent.injectorIndex; // ViewOffset is 0\n    }\n    // When parent injector location is computed it may be outside of the current view. (ie it could\n    // be pointing to a declared parent location). This variable stores number of declaration parents\n    // we need to walk up in order to find the parent injector location.\n    let declarationViewOffset = 0;\n    let parentTNode = null;\n    let lViewCursor = lView;\n    // The parent injector is not in the current `LView`. We will have to walk the declared parent\n    // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n    // `NodeInjector`.\n    while (lViewCursor !== null) {\n        parentTNode = getTNodeFromLView(lViewCursor);\n        if (parentTNode === null) {\n            // If we have no parent, than we are done.\n            return NO_PARENT_INJECTOR;\n        }\n        ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n        // Every iteration of the loop requires that we go to the declared parent.\n        declarationViewOffset++;\n        lViewCursor = lViewCursor[DECLARATION_VIEW];\n        if (parentTNode.injectorIndex !== -1) {\n            // We found a NodeInjector which points to something.\n            return (parentTNode.injectorIndex |\n                (declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */));\n        }\n    }\n    return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n    bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    if (attrNameToInject === 'class') {\n        return tNode.classes;\n    }\n    if (attrNameToInject === 'style') {\n        return tNode.styles;\n    }\n    const attrs = tNode.attrs;\n    if (attrs) {\n        const attrsLength = attrs.length;\n        let i = 0;\n        while (i < attrsLength) {\n            const value = attrs[i];\n            // If we hit a `Bindings` or `Template` marker then we are done.\n            if (isNameOnlyAttributeMarker(value))\n                break;\n            // Skip namespaced attributes\n            if (value === 0 /* AttributeMarker.NamespaceURI */) {\n                // we skip the next two values\n                // as namespaced attributes looks like\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                // 'existValue', ...]\n                i = i + 2;\n            }\n            else if (typeof value === 'number') {\n                // Skip to the first value of the marked attribute.\n                i++;\n                while (i < attrsLength && typeof attrs[i] === 'string') {\n                    i++;\n                }\n            }\n            else if (value === attrNameToInject) {\n                return attrs[i + 1];\n            }\n            else {\n                i = i + 2;\n            }\n        }\n    }\n    return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n    if ((flags & InjectFlags.Optional) || notFoundValue !== undefined) {\n        return notFoundValue;\n    }\n    else {\n        throwProviderNotFoundError(token, 'NodeInjector');\n    }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n    if ((flags & InjectFlags.Optional) && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        const moduleInjector = lView[INJECTOR$1];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode !== null) {\n        // If the view or any of its ancestors have an embedded\n        // view injector, we have to look it up there first.\n        if (lView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) {\n            const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n            if (embeddedInjectorValue !== NOT_FOUND) {\n                return embeddedInjectorValue;\n            }\n        }\n        // Otherwise try the node injector.\n        const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n        if (value !== NOT_FOUND) {\n            return value;\n        }\n    }\n    // Finally, fall back to the module injector.\n    return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n    const bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n        if (!enterDI(lView, tNode, flags)) {\n            // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n            // flag, the module injector is not searched for that token in Ivy.\n            return (flags & InjectFlags.Host) ?\n                notFoundValueOrThrow(notFoundValue, token, flags) :\n                lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n        }\n        try {\n            const value = bloomHash(flags);\n            if (value == null && !(flags & InjectFlags.Optional)) {\n                throwProviderNotFoundError(token);\n            }\n            else {\n                return value;\n            }\n        }\n        finally {\n            leaveDI();\n        }\n    }\n    else if (typeof bloomHash === 'number') {\n        // A reference to the previous injector TView that was found while climbing the element\n        // injector tree. This is used to know if viewProviders can be accessed on the current\n        // injector.\n        let previousTView = null;\n        let injectorIndex = getInjectorIndex(tNode, lView);\n        let parentLocation = NO_PARENT_INJECTOR;\n        let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n        // If we should skip this injector, or if there is no injector on this node, start by\n        // searching the parent injector.\n        if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n            parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n            if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n                injectorIndex = -1;\n            }\n            else {\n                previousTView = lView[TVIEW];\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n        }\n        // Traverse up the injector tree until we find a potential match or until we know there\n        // *isn't* a match.\n        while (injectorIndex !== -1) {\n            ngDevMode && assertNodeInjector(lView, injectorIndex);\n            // Check the current injector. If it matches, see if it contains token.\n            const tView = lView[TVIEW];\n            ngDevMode &&\n                assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n            if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                // At this point, we have an injector which *may* contain the token, so we step through\n                // the providers and directives associated with the injector's corresponding node to get\n                // the instance.\n                const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                if (instance !== NOT_FOUND) {\n                    return instance;\n                }\n            }\n            parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n            if (parentLocation !== NO_PARENT_INJECTOR &&\n                shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) &&\n                bloomHasToken(bloomHash, injectorIndex, lView)) {\n                // The def wasn't found anywhere on this node, so it was a false positive.\n                // Traverse up the tree and continue searching.\n                previousTView = tView;\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n            else {\n                // If we should not search parent OR If the ancestor bloom filter value does not have the\n                // bit corresponding to the directive we can give up on traversing up to find the specific\n                // injector.\n                injectorIndex = -1;\n            }\n        }\n    }\n    return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    const currentTView = lView[TVIEW];\n    const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibilities\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponentHost(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && ((tNode.type & 3 /* TNodeType.AnyRNode */) !== 0));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n    const nodeProviderIndexes = tNode.providerIndexes;\n    const tInjectables = tView.data;\n    const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const directivesStart = tNode.directiveStart;\n    const directiveEnd = tNode.directiveEnd;\n    const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        const providerTokenOrDef = tInjectables[i];\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && providerTokenOrDef.type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        const dirDef = tInjectables[directivesStart];\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nfunction getNodeInjectable(lView, tView, index, tNode) {\n    let value = lView[index];\n    const tData = tView.data;\n    if (isFactory(value)) {\n        const factory = value;\n        if (factory.resolving) {\n            throwCyclicDependencyError(stringifyForError(tData[index]));\n        }\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n        const success = enterDI(lView, tNode, InjectFlags.Default);\n        ngDevMode &&\n            assertEqual(success, true, 'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n        try {\n            value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n            // This code path is hit for both directives and providers.\n            // For perf reasons, we want to avoid searching for hooks on providers.\n            // It does no harm to try (the hooks just won't exist), but the extra\n            // checks are unnecessary and this is a hot path. So we check to see\n            // if the index of the dependency is in the directive range for this\n            // tNode. If it's not, we know it's a provider and skip hook registration.\n            if (tView.firstCreatePass && index >= tNode.directiveStart) {\n                ngDevMode && assertDirectiveDef(tData[index]);\n                registerPreOrderHooks(index, tData[index], tView);\n            }\n        }\n        finally {\n            previousInjectImplementation !== null &&\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            leaveDI();\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    const tokenId = \n    // First check with `hasOwnProperty` so we don't get an inherited ID.\n    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n    // Negative token IDs are used for special objects such as `Injector`\n    if (typeof tokenId === 'number') {\n        if (tokenId >= 0) {\n            return tokenId & BLOOM_MASK;\n        }\n        else {\n            ngDevMode &&\n                assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n            return createNodeInjector;\n        }\n    }\n    else {\n        return tokenId;\n    }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    const mask = 1 << bloomHash;\n    // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n    // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n    // that should be used.\n    const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nclass NodeInjector {\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    get(token, notFoundValue, flags) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n    }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n    return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵgetInheritedFactory(type) {\n    return noSideEffects(() => {\n        const ownConstructor = type.prototype.constructor;\n        const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n        const objectPrototype = Object.prototype;\n        let parent = Object.getPrototypeOf(type.prototype).constructor;\n        // Go up the prototype until we hit `Object`.\n        while (parent && parent !== objectPrototype) {\n            const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n            // If we hit something that has a factory and the factory isn't the same as the type,\n            // we've found the inherited factory. Note the check that the factory isn't the type's\n            // own factory is redundant in most cases, but if the user has custom decorators on the\n            // class, this lookup will start one level down in the prototype chain, causing us to\n            // find the own factory first and potentially triggering an infinite loop downstream.\n            if (factory && factory !== ownFactory) {\n                return factory;\n            }\n            parent = Object.getPrototypeOf(parent);\n        }\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return t => new t();\n    });\n}\nfunction getFactoryOf(type) {\n    if (isForwardRef(type)) {\n        return () => {\n            const factory = getFactoryOf(resolveForwardRef(type));\n            return factory && factory();\n        };\n    }\n    return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n    let currentTNode = tNode;\n    let currentLView = lView;\n    // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n    // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n    // Since the bloom filters for the node injectors have already been constructed and we don't\n    // have a way of extracting the records from an injector, the only way to maintain the correct\n    // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n    // the token at each level.\n    while (currentTNode !== null && currentLView !== null &&\n        (currentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) &&\n        !(currentLView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n        ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n        // Note that this lookup on the node injector is using the `Self` flag, because\n        // we don't want the node injector to look at any parent injectors since we\n        // may hit the embedded view injector first.\n        const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n        if (nodeInjectorValue !== NOT_FOUND) {\n            return nodeInjectorValue;\n        }\n        // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n        let parentTNode = currentTNode.parent;\n        // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n        // it means that we've hit the view boundary and we need to go up to the next view.\n        if (!parentTNode) {\n            // Before we go to the next LView, check if the token exists on the current embedded injector.\n            const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n            if (embeddedViewInjector) {\n                const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n                if (embeddedViewInjectorValue !== NOT_FOUND) {\n                    return embeddedViewInjectorValue;\n                }\n            }\n            // Otherwise keep going up the tree.\n            parentTNode = getTNodeFromLView(currentLView);\n            currentLView = currentLView[DECLARATION_VIEW];\n        }\n        currentTNode = parentTNode;\n    }\n    return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n    const tView = lView[TVIEW];\n    const tViewType = tView.type;\n    // The parent pointer differs based on `TView.type`.\n    if (tViewType === 2 /* TViewType.Embedded */) {\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n        return tView.declTNode;\n    }\n    else if (tViewType === 1 /* TViewType.Component */) {\n        // Components don't have `TView.declTNode` because each instance of component could be\n        // inserted in different location, hence `TView.declTNode` is meaningless.\n        return lView[T_HOST];\n    }\n    return null;\n}\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName, __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName) }));\n\nlet _reflect = null;\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n    return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n    const meta = {\n        token: null,\n        attribute: null,\n        host: false,\n        optional: false,\n        self: false,\n        skipSelf: false,\n    };\n    if (Array.isArray(dep) && dep.length > 0) {\n        for (let j = 0; j < dep.length; j++) {\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            const proto = Object.getPrototypeOf(param);\n            if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n                }\n                meta.attribute = param.attributeName;\n            }\n            else {\n                meta.token = param;\n            }\n        }\n    }\n    else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {\n        meta.token = null;\n    }\n    else {\n        meta.token = dep;\n    }\n    return meta;\n}\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n    if (type && type !== incoming && checkForDuplicateNgModules) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nfunction registerNgModuleType(ngModuleType, id) {\n    const existing = modules.get(id) || null;\n    assertSameOrNotExisting(id, existing, ngModuleType);\n    modules.set(id, ngModuleType);\n}\nfunction clearModulesForTest() {\n    modules.clear();\n}\nfunction getRegisteredNgModuleType(id) {\n    return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n    checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveWindow(element) {\n    return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveDocument(element) {\n    return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveBody(element) {\n    return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn$1(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n    shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownElementStrictMode() {\n    return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n    shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n    return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n    // execute the check below.\n    if (schemas === null)\n        return;\n    // If the element matches any directive, it's considered as valid.\n    if (!hasDirectives && tagName !== null) {\n        // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n        // as a custom element. Note that unknown elements with a dash in their name won't be instances\n        // of HTMLUnknownElement in browsers that support web components.\n        const isUnknown = \n        // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n        // Domino doesn't expose HTMLUnknownElement globally.\n        (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&\n            element instanceof HTMLUnknownElement) ||\n            (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&\n                !customElements.get(tagName));\n        if (isUnknown && !matchingSchemas(schemas, tagName)) {\n            const isHostStandalone = isHostComponentStandalone(lView);\n            const templateLocation = getTemplateLocationDetails(lView);\n            const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n            let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n            message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n                'a part of an @NgModule where this component is declared'}.\\n`;\n            if (tagName && tagName.indexOf('-') > -1) {\n                message +=\n                    `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n            }\n            else {\n                message +=\n                    `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n            }\n            if (shouldThrowErrorOnUnknownElement) {\n                throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n            }\n            else {\n                console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n            }\n        }\n    }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n    // execute the check below.\n    if (schemas === null)\n        return true;\n    // The property is considered valid if the element matches the schema, it exists on the element,\n    // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n    if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n        return true;\n    }\n    // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n    return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n    // Special-case a situation when a structural directive is applied to\n    // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n    // In this case the compiler generates the `ɵɵtemplate` instruction with\n    // the `null` as the tagName. The directive matching logic at runtime relies\n    // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n    // a default value of the `tNode.value` is not feasible at this moment.\n    if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n        tagName = 'ng-template';\n    }\n    const isHostStandalone = isHostComponentStandalone(lView);\n    const templateLocation = getTemplateLocationDetails(lView);\n    let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n    const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n    const importLocation = isHostStandalone ?\n        'included in the \\'@Component.imports\\' of this component' :\n        'a part of an @NgModule where this component is declared';\n    if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n        // Most likely this is a control flow directive (such as `*ngIf`) used in\n        // a template, but the directive or the `CommonModule` is not imported.\n        const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n        message += `\\nIf the '${propName}' is an Angular control flow directive, ` +\n            `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n    }\n    else {\n        // May be an Angular component, which is not imported/declared?\n        message += `\\n1. If '${tagName}' is an Angular component and it has the ` +\n            `'${propName}' input, then verify that it is ${importLocation}.`;\n        // May be a Web Component?\n        if (tagName && tagName.indexOf('-') > -1) {\n            message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` +\n                `to the ${schemas} of this component to suppress this message.`;\n            message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n                `the ${schemas} of this component.`;\n        }\n        else {\n            // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n            message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n                `the ${schemas} of this component.`;\n        }\n    }\n    reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n    if (shouldThrowErrorOnUnknownProperty) {\n        throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n    }\n    else {\n        console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n    }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    // Unable to obtain a context.\n    if (!context)\n        return null;\n    return context.constructor ? getComponentDef$1(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction isHostComponentStandalone(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const componentDef = getDeclarationComponentDef(lView);\n    // Treat host component as non-standalone if we can't obtain the def.\n    return !!componentDef?.standalone;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getTemplateLocationDetails(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const hostComponentDef = getDeclarationComponentDef(lView);\n    const componentClassName = hostComponentDef?.type?.name;\n    return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([\n    ['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'],\n    ['ngSwitchDefault', 'NgSwitchDefault']\n]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nfunction matchingSchemas(schemas, tagName) {\n    if (schemas !== null) {\n        for (let i = 0; i < schemas.length; i++) {\n            const schema = schemas[i];\n            if (schema === NO_ERRORS_SCHEMA ||\n                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n    // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n    // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n    // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n    /**\n     * Marks a style as important.\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nfunction escapeCommentText(value) {\n    return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n    return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n    ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n    TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n    ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n    return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n    ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n    TRACKED_LVIEWS.delete(lView[ID]);\n}\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nclass LContext {\n    /** Component's parent view data. */\n    get lView() {\n        return getLViewById(this.lViewId);\n    }\n    constructor(\n    /**\n     * ID of the component's parent view data.\n     */\n    lViewId, \n    /**\n     * The index instance of the node.\n     */\n    nodeIndex, \n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     */\n    native) {\n        this.lViewId = lViewId;\n        this.nodeIndex = nodeIndex;\n        this.native = native;\n    }\n}\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (isLView(mpValue)) {\n            const lView = mpValue;\n            let nodeIndex;\n            let component = undefined;\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, target);\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            const native = unwrapRNode(lView[nodeIndex]);\n            const existingCtx = readPatchedData(native);\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        const rElement = target;\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        let parent = rElement;\n        while (parent = parent.parentNode) {\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    const native = unwrapRNode(lView[index]);\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    let patchedData = readPatchedData(componentInstance);\n    let lView;\n    if (isLView(patchedData)) {\n        const contextLView = patchedData;\n        const nodeIndex = findViaComponent(contextLView, componentInstance);\n        lView = getComponentLViewByIndex(nodeIndex, contextLView);\n        const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        const context = patchedData;\n        const contextLView = context.lView;\n        ngDevMode && assertLView(contextLView);\n        lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n    }\n    return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n    // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n    // we can't know when to remove an `LContext`.\n    if (isLView(data)) {\n        target[MONKEY_PATCH_KEY_NAME] = data[ID];\n        registerLView(data);\n    }\n    else {\n        target[MONKEY_PATCH_KEY_NAME] = data;\n    }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    const data = target[MONKEY_PATCH_KEY_NAME];\n    return (typeof data === 'number') ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n    const value = readPatchedData(target);\n    if (value) {\n        return (isLView(value) ? value : value.lView);\n    }\n    return null;\n}\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n    const tView = lView[TVIEW];\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n        if (unwrapRNode(lView[i]) === target) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            const elementComponentIndex = componentIndices[i];\n            const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        const directiveIndexStart = tNode.directiveStart;\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    if (tNode.directiveStart === 0)\n        return EMPTY_ARRAY;\n    const results = [];\n    for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n        const directiveInstance = lView[i];\n        if (!isComponentInstance(directiveInstance)) {\n            results.push(directiveInstance);\n        }\n    }\n    return results;\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    const { directiveStart, componentOffset } = tNode;\n    return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    if (tNode && tNode.localNames) {\n        const result = {};\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n    return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n    if (_icuContainerIterate === undefined) {\n        // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n        // can be inlined into call-site.\n        _icuContainerIterate = loader();\n    }\n}\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    const parent = lView[PARENT];\n    return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n    while (lView && !(lView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n        lView = getLViewParent(lView);\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n    return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nfunction getFirstLContainer(lView) {\n    return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nfunction getNextLContainer(container) {\n    return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n    while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n        viewOrContainer = viewOrContainer[NEXT];\n    }\n    return viewOrContainer;\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n    // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n    // won't be created until i18nApply() in the update block, so this node should be skipped.\n    // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n    // in `i18n_spec.ts`.\n    if (lNodeToHandle != null) {\n        let lContainer;\n        let isComponent = false;\n        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n        // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n        // it has LContainer so that we can process all of those cases appropriately.\n        if (isLContainer(lNodeToHandle)) {\n            lContainer = lNodeToHandle;\n        }\n        else if (isLView(lNodeToHandle)) {\n            isComponent = true;\n            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n            lNodeToHandle = lNodeToHandle[HOST];\n        }\n        const rNode = unwrapRNode(lNodeToHandle);\n        if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n            if (beforeNode == null) {\n                nativeAppendChild(renderer, parent, rNode);\n            }\n            else {\n                nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n            }\n        }\n        else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n            nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n        }\n        else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n            nativeRemoveNode(renderer, rNode, isComponent);\n        }\n        else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n            ngDevMode && ngDevMode.rendererDestroyNode++;\n            renderer.destroyNode(rNode);\n        }\n        if (lContainer != null) {\n            applyContainer(renderer, action, lContainer, parent, beforeNode);\n        }\n    }\n}\nfunction createTextNode(renderer, value) {\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    ngDevMode && ngDevMode.rendererSetText++;\n    return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n    ngDevMode && ngDevMode.rendererSetText++;\n    renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nfunction createElementNode(renderer, name, namespace) {\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    return renderer.createElement(name, namespace);\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nfunction removeViewFromContainer(tView, lView) {\n    const renderer = lView[RENDERER];\n    applyView(tView, lView, renderer, 2 /* WalkTNodeTreeAction.Detach */, null, null);\n    lView[HOST] = null;\n    lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nfunction addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n    lView[HOST] = parentNativeNode;\n    lView[T_HOST] = parentTNode;\n    applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nfunction renderDetachView(tView, lView) {\n    applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    let lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView[TVIEW], rootView);\n    }\n    while (lViewOrLContainer) {\n        let next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n            if (firstView)\n                next = firstView;\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                if (isLView(lViewOrLContainer)) {\n                    cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n                }\n                lViewOrLContainer = lViewOrLContainer[PARENT];\n            }\n            if (lViewOrLContainer === null)\n                lViewOrLContainer = rootView;\n            if (isLView(lViewOrLContainer)) {\n                cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n            }\n            next = lViewOrLContainer && lViewOrLContainer[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView, lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n    const containerLength = lContainer.length;\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        lContainer[indexInContainer - 1][NEXT] = lView;\n    }\n    if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n        lView[NEXT] = lContainer[indexInContainer];\n        addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n    }\n    else {\n        lContainer.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // track views where declaration and insertion points are different\n    const declarationLContainer = lView[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n        trackMovedView(declarationLContainer, lView);\n    }\n    // notify query that a new view has been added\n    const lQueries = lView[QUERIES];\n    if (lQueries !== null) {\n        lQueries.insertView(tView);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer, lView) {\n    ngDevMode && assertDefined(lView, 'LView required');\n    ngDevMode && assertLContainer(declarationContainer);\n    const movedViews = declarationContainer[MOVED_VIEWS];\n    const insertedLContainer = lView[PARENT];\n    ngDevMode && assertLContainer(insertedLContainer);\n    const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n    if (declaredComponentLView !== insertedComponentLView) {\n        // At this point the declaration-component is not same as insertion-component; this means that\n        // this is a transplanted view. Mark the declared lView as having transplanted views so that\n        // those views can participate in CD.\n        declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n    }\n    if (movedViews === null) {\n        declarationContainer[MOVED_VIEWS] = [lView];\n    }\n    else {\n        movedViews.push(lView);\n    }\n}\nfunction detachMovedView(declarationContainer, lView) {\n    ngDevMode && assertLContainer(declarationContainer);\n    ngDevMode &&\n        assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n    const movedViews = declarationContainer[MOVED_VIEWS];\n    const declarationViewIndex = movedViews.indexOf(lView);\n    const insertionLContainer = lView[PARENT];\n    ngDevMode && assertLContainer(insertionLContainer);\n    // If the view was marked for refresh but then detached before it was checked (where the flag\n    // would be cleared and the counter decremented), we need to decrement the view counter here\n    // instead.\n    if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n        lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n        updateTransplantedViewCount(insertionLContainer, -1);\n    }\n    movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n    if (lContainer.length <= CONTAINER_HEADER_OFFSET)\n        return;\n    const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n    const viewToDetach = lContainer[indexInContainer];\n    if (viewToDetach) {\n        const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n        if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n            detachMovedView(declarationLContainer, viewToDetach);\n        }\n        if (removeIndex > 0) {\n            lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n        }\n        const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n        removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);\n        // notify query that a view has been removed\n        const lQueries = removedLView[QUERIES];\n        if (lQueries !== null) {\n            lQueries.detachView(removedLView[TVIEW]);\n        }\n        viewToDetach[PARENT] = null;\n        viewToDetach[NEXT] = null;\n        // Unsets the attached flag\n        viewToDetach[FLAGS] &= ~64 /* LViewFlags.Attached */;\n    }\n    return viewToDetach;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nfunction destroyLView(tView, lView) {\n    if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n        const renderer = lView[RENDERER];\n        if (renderer.destroyNode) {\n            applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n        }\n        destroyViewTree(lView);\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView, lView) {\n    if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        lView[FLAGS] |= 128 /* LViewFlags.Destroyed */;\n        executeOnDestroys(tView, lView);\n        processCleanups(tView, lView);\n        // For component views only, the local renderer is destroyed at clean up time.\n        if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            lView[RENDERER].destroy();\n        }\n        const declarationContainer = lView[DECLARATION_LCONTAINER];\n        // we are dealing with an embedded view that is still inserted into a container\n        if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n            // and this is a projected view\n            if (declarationContainer !== lView[PARENT]) {\n                detachMovedView(declarationContainer, lView);\n            }\n            // For embedded views still attached to a container: remove query result from this view.\n            const lQueries = lView[QUERIES];\n            if (lQueries !== null) {\n                lQueries.detachView(tView);\n            }\n        }\n        // Unregister the view once everything else has been cleaned up.\n        unregisterLView(lView);\n    }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n    const tCleanup = tView.cleanup;\n    const lCleanup = lView[CLEANUP];\n    // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n    // information appended at the end. We need to know where the end of the `TCleanup` information\n    // is, and we track this with `lastLCleanupIndex`.\n    let lastLCleanupIndex = -1;\n    if (tCleanup !== null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n                // 2 at the end of this block).\n                const targetIdx = tCleanup[i + 3];\n                ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n                if (targetIdx >= 0) {\n                    // unregister\n                    lCleanup[lastLCleanupIndex = targetIdx]();\n                }\n                else {\n                    // Subscription\n                    lCleanup[lastLCleanupIndex = -targetIdx].unsubscribe();\n                }\n                i += 2;\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n    }\n    if (lCleanup !== null) {\n        for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n            const instanceCleanupFn = lCleanup[i];\n            ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n            instanceCleanupFn();\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (let i = 0; i < destroyHooks.length; i += 2) {\n            const context = lView[destroyHooks[i]];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                const toCall = destroyHooks[i + 1];\n                if (Array.isArray(toCall)) {\n                    for (let j = 0; j < toCall.length; j += 2) {\n                        const callContext = context[toCall[j]];\n                        const hook = toCall[j + 1];\n                        profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n                        try {\n                            hook.call(callContext);\n                        }\n                        finally {\n                            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n                        }\n                    }\n                }\n                else {\n                    profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n                    try {\n                        toCall.call(context);\n                    }\n                    finally {\n                        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nfunction getParentRElement(tView, tNode, lView) {\n    return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nfunction getClosestRElement(tView, tNode, lView) {\n    let parentTNode = tNode;\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    while (parentTNode !== null &&\n        (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */))) {\n        tNode = parentTNode;\n        parentTNode = tNode.parent;\n    }\n    // If the parent tNode is null, then we are inserting across views: either into an embedded view\n    // or a component view.\n    if (parentTNode === null) {\n        // We are inserting a root element of the component view into the component host element and\n        // it should always be eager.\n        return lView[HOST];\n    }\n    else {\n        ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        const { componentOffset } = parentTNode;\n        if (componentOffset > -1) {\n            ngDevMode && assertTNodeForLView(parentTNode, lView);\n            const { encapsulation } = tView.data[parentTNode.directiveStart + componentOffset];\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation === ViewEncapsulation.None ||\n                encapsulation === ViewEncapsulation.Emulated) {\n                return null;\n            }\n        }\n        return getNativeByTNode(parentTNode, lView);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n    ngDevMode && ngDevMode.rendererInsertBefore++;\n    renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n    ngDevMode && ngDevMode.rendererAppendChild++;\n    ngDevMode && assertDefined(parent, 'parent node must be defined');\n    renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n    if (beforeNode !== null) {\n        nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    renderer.removeChild(parent, child, isHostElement);\n}\n/** Checks if an element is a `<template>` node. */\nfunction isTemplateNode(node) {\n    return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n/**\n * Returns a native parent of a given native node.\n */\nfunction nativeParentNode(renderer, node) {\n    return renderer.parentNode(node);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nfunction nativeNextSibling(renderer, node) {\n    return renderer.nextSibling(node);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n    return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n    if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n    _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n    _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n    const parentRNode = getParentRElement(tView, childTNode, lView);\n    const renderer = lView[RENDERER];\n    const parentTNode = childTNode.parent || lView[T_HOST];\n    const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n    if (parentRNode != null) {\n        if (Array.isArray(childRNode)) {\n            for (let i = 0; i < childRNode.length; i++) {\n                nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n        }\n    }\n    _processI18nInsertBefore !== undefined &&\n        _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView, tNode) {\n    if (tNode !== null) {\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */);\n        const tNodeType = tNode.type;\n        if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n            return getNativeByTNode(tNode, lView);\n        }\n        else if (tNodeType & 4 /* TNodeType.Container */) {\n            return getBeforeNodeForView(-1, lView[tNode.index]);\n        }\n        else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n            const elIcuContainerChild = tNode.child;\n            if (elIcuContainerChild !== null) {\n                return getFirstNativeNode(lView, elIcuContainerChild);\n            }\n            else {\n                const rNodeOrLContainer = lView[tNode.index];\n                if (isLContainer(rNodeOrLContainer)) {\n                    return getBeforeNodeForView(-1, rNodeOrLContainer);\n                }\n                else {\n                    return unwrapRNode(rNodeOrLContainer);\n                }\n            }\n        }\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\n            let nextRNode = icuContainerIterate(tNode, lView);\n            let rNode = nextRNode();\n            // If the ICU container has no nodes, than we use the ICU anchor as the node.\n            return rNode || unwrapRNode(lView[tNode.index]);\n        }\n        else {\n            const projectionNodes = getProjectionNodes(lView, tNode);\n            if (projectionNodes !== null) {\n                if (Array.isArray(projectionNodes)) {\n                    return projectionNodes[0];\n                }\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n                ngDevMode && assertParentView(parentView);\n                return getFirstNativeNode(parentView, projectionNodes);\n            }\n            else {\n                return getFirstNativeNode(lView, tNode.next);\n            }\n        }\n    }\n    return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n    if (tNode !== null) {\n        const componentView = lView[DECLARATION_COMPONENT_VIEW];\n        const componentHost = componentView[T_HOST];\n        const slotIdx = tNode.projection;\n        ngDevMode && assertProjectionSlots(lView);\n        return componentHost.projection[slotIdx];\n    }\n    return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n    const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n    if (nextViewIndex < lContainer.length) {\n        const lView = lContainer[nextViewIndex];\n        const firstTNodeOfView = lView[TVIEW].firstChild;\n        if (firstTNodeOfView !== null) {\n            return getFirstNativeNode(lView, firstTNodeOfView);\n        }\n    }\n    return lContainer[NATIVE];\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n    const nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n    while (tNode != null) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n        const rawSlotValue = lView[tNode.index];\n        const tNodeType = tNode.type;\n        if (isProjection) {\n            if (action === 0 /* WalkTNodeTreeAction.Create */) {\n                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n                tNode.flags |= 2 /* TNodeFlags.isProjected */;\n            }\n        }\n        if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n            if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n                applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n            else if (tNodeType & 32 /* TNodeType.Icu */) {\n                const nextRNode = icuContainerIterate(tNode, lView);\n                let rNode;\n                while (rNode = nextRNode()) {\n                    applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n                }\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n            else if (tNodeType & 16 /* TNodeType.Projection */) {\n                applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n            }\n            else {\n                ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n        }\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\n    }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n    applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n    const renderer = lView[RENDERER];\n    const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n    const parentTNode = tProjectionNode.parent || lView[T_HOST];\n    let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n    applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentNode = componentLView[T_HOST];\n    ngDevMode &&\n        assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n    const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n    if (Array.isArray(nodeToProjectOrRNodes)) {\n        // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n        // need to support passing projectable nodes, so we cheat and put them in the TNode\n        // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n        // because we know that that TView is not shared and therefore it will not be a problem.\n        // This should be refactored and cleaned up.\n        for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n            const rNode = nodeToProjectOrRNodes[i];\n            applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n    }\n    else {\n        let nodeToProject = nodeToProjectOrRNodes;\n        const projectedComponentLView = componentLView[PARENT];\n        applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n    }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n    ngDevMode && assertLContainer(lContainer);\n    const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n    const native = unwrapRNode(lContainer);\n    // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n    // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n    // node (comment in the DOM) that will be different from the LContainer's host node. In this\n    // particular case we need to execute action on 2 nodes:\n    // - container's host node (this is done in the executeActionOnElementOrContainer)\n    // - container's host node (this is done here)\n    if (anchor !== native) {\n        // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n        // don't see a reason why they should be different, but they are.\n        //\n        // If they are we need to process the second anchor as well.\n        applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n    }\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        const lView = lContainer[i];\n        applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n    }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n    if (isClassBased) {\n        // We actually want JS true/false here because any truthy value should add the class\n        if (!value) {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            renderer.removeClass(rNode, prop);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            renderer.addClass(rNode, prop);\n        }\n    }\n    else {\n        let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n        if (value == null /** || value === undefined */) {\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\n            renderer.removeStyle(rNode, prop, flags);\n        }\n        else {\n            // A value is important if it ends with `!important`. The style\n            // parser strips any semicolons at the end of the value.\n            const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n            if (isImportant) {\n                // !important has to be stripped from the value for it to be valid.\n                value = value.slice(0, -10);\n                flags |= RendererStyleFlags2.Important;\n            }\n            ngDevMode && ngDevMode.rendererSetStyle++;\n            renderer.setStyle(rNode, prop, value, flags);\n        }\n    }\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n    ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n    renderer.setAttribute(element, 'style', newValue);\n    ngDevMode && ngDevMode.rendererSetStyle++;\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer, element, newValue) {\n    ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n    if (newValue === '') {\n        // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n        renderer.removeAttribute(element, 'class');\n    }\n    else {\n        renderer.setAttribute(element, 'class', newValue);\n    }\n    ngDevMode && ngDevMode.rendererSetClassName++;\n}\n/** Sets up the static DOM attributes on an `RNode`. */\nfunction setupStaticAttributes(renderer, element, tNode) {\n    const { mergedAttrs, classes, styles } = tNode;\n    if (mergedAttrs !== null) {\n        setUpAttributes(renderer, element, mergedAttrs);\n    }\n    if (classes !== null) {\n        writeDirectClass(renderer, element, classes);\n    }\n    if (styles !== null) {\n        writeDirectStyle(renderer, element, styles);\n    }\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy$1() {\n    if (policy$1 === undefined) {\n        policy$1 = null;\n        if (_global$1.trustedTypes) {\n            try {\n                policy$1 = _global$1.trustedTypes.createPolicy('angular', {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s,\n                });\n            }\n            catch {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy$1()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n    return getPolicy$1()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nfunction trustedScriptURLFromString(url) {\n    return getPolicy$1()?.createScriptURL(url) || url;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nfunction newTrustedFunctionForDev(...args) {\n    if (typeof ngDevMode === 'undefined') {\n        throw new Error('newTrustedFunctionForDev should never be called in production');\n    }\n    if (!_global$1.trustedTypes) {\n        // In environments that don't support Trusted Types, fall back to the most\n        // straightforward implementation:\n        return new Function(...args);\n    }\n    // Chrome currently does not support passing TrustedScript to the Function\n    // constructor. The following implements the workaround proposed on the page\n    // below, where the Chromium bug is also referenced:\n    // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n    const fnArgs = args.slice(0, -1).join(',');\n    const fnBody = args[args.length - 1];\n    const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n    // Using eval directly confuses the compiler and prevents this module from\n    // being stripped out of JS binaries even if not used. The global['eval']\n    // indirection fixes that.\n    const fn = _global$1['eval'](trustedScriptFromString(body));\n    if (fn.bind === undefined) {\n        // Workaround for a browser bug that only exists in Chrome 83, where passing\n        // a TrustedScript to eval just returns the TrustedScript back without\n        // evaluating it. In that case, fall back to the most straightforward\n        // implementation:\n        return new Function(...args);\n    }\n    // To completely mimic the behavior of calling \"new Function\", two more\n    // things need to happen:\n    // 1. Stringifying the resulting function should return its source code\n    fn.toString = () => body;\n    // 2. When calling the resulting function, `this` should refer to `global`\n    return fn.bind(_global$1);\n    // When Trusted Types support in Function constructors is widely available,\n    // the implementation of this function can be simplified to:\n    // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * Validation function invoked at runtime for each binding that might potentially\n * represent a security-sensitive attribute of an <iframe>.\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\n * of such attributes.\n *\n * @codeGenApi\n */\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\n    const lView = getLView();\n    const tNode = getSelectedTNode();\n    const element = getNativeByTNode(tNode, lView);\n    // Restrict any dynamic bindings of security-sensitive attributes/properties\n    // on an <iframe> for security reasons.\n    if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\n        const iframe = element;\n        // Unset previously applied `src` and `srcdoc` if we come across a situation when\n        // a security-sensitive attribute is set later via an attribute/property binding.\n        iframe.src = '';\n        iframe.srcdoc = trustedHTMLFromString('');\n        // Also remove the <iframe> from the document.\n        nativeRemoveNode(lView[RENDERER], iframe);\n        const errorMessage = ngDevMode &&\n            `Angular has detected that the \\`${attrName}\\` was applied ` +\n                `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` +\n                `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` +\n                `as a static attribute only. \\n` +\n                `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` +\n                `in a template or in host bindings section.`;\n        throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\n    }\n    return attrValue;\n}\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nfunction setDocument(document) {\n    DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nfunction getDocument() {\n    if (DOCUMENT !== undefined) {\n        return DOCUMENT;\n    }\n    else if (typeof document !== 'undefined') {\n        return document;\n    }\n    // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n    // the current platform is not a browser. Since this is not a supported scenario at the moment\n    // this should not happen in Angular apps.\n    // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n    // public API. Meanwhile we just return `undefined` and let the application fail.\n    return undefined;\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (_global$1.trustedTypes) {\n            try {\n                policy = _global$1.trustedTypes\n                    .createPolicy('angular#unsafe-bypass', {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s,\n                });\n            }\n            catch {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedHTMLFromStringBypass(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptFromStringBypass(script) {\n    return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptURLFromStringBypass(url) {\n    return getPolicy()?.createScriptURL(url) || url;\n}\n\nclass SafeValueImpl {\n    constructor(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n    }\n    toString() {\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n            ` (see ${XSS_SECURITY_URL})`;\n    }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"HTML\" /* BypassType.Html */;\n    }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"Style\" /* BypassType.Style */;\n    }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"Script\" /* BypassType.Script */;\n    }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"URL\" /* BypassType.Url */;\n    }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"ResourceURL\" /* BypassType.ResourceUrl */;\n    }\n}\nfunction unwrapSafeValue(value) {\n    return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity :\n        value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n    const actualType = getSanitizationBypassType(value);\n    if (actualType != null && actualType !== type) {\n        // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n        if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */)\n            return true;\n        throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n    }\n    return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n    return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nfunction getInertBodyHelper(defaultDoc) {\n    const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n    return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper {\n    constructor(inertDocumentHelper) {\n        this.inertDocumentHelper = inertDocumentHelper;\n    }\n    getInertBodyElement(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n        // in `html` from consuming the otherwise explicit `</body>` tag.\n        html = '<body><remove></remove>' + html;\n        try {\n            const body = new window.DOMParser()\n                .parseFromString(trustedHTMLFromString(html), 'text/html')\n                .body;\n            if (body === null) {\n                // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n                // becomes available in the following tick of the JS engine. In that case we fall back to\n                // the `inertDocumentHelper` instead.\n                return this.inertDocumentHelper.getInertBodyElement(html);\n            }\n            body.removeChild(body.firstChild);\n            return body;\n        }\n        catch {\n            return null;\n        }\n    }\n}\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper {\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n    }\n    getInertBodyElement(html) {\n        const templateEl = this.inertDocument.createElement('template');\n        templateEl.innerHTML = trustedHTMLFromString(html);\n        return templateEl;\n    }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n    }\n    catch {\n        return false;\n    }\n}\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN))\n        return url;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n    }\n    return 'unsafe:' + url;\n}\n\nfunction tagSet(tags) {\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\nfunction merge(...sets) {\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        let current = el.firstChild;\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement(current);\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(current.nodeValue);\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = current.firstChild;\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(current);\n                }\n                let next = this.checkClobberedElement(current, current.nextSibling);\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, current.parentNode);\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @param element The element to sanitize.\n     * @return True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            const elAttr = elAttrs.item(i);\n            const attrName = elAttr.name;\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            let value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    endElement(current) {\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    chars(chars) {\n        this.buf.push(encodeEntities(chars));\n    }\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n        }\n        return nextNode;\n    }\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        const hi = match.charCodeAt(0);\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n        return '&#' + match.charCodeAt(0) + ';';\n    })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        let mXSSAttempts = 5;\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = inertBodyElement.innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        const sanitizer = new SanitizingHtmlSerializer();\n        const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n            console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n        }\n        return trustedHTMLFromString(safeHtml);\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\nfunction getTemplateContent(el) {\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n        el.content :\n        null;\n}\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n        return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n    }\n    return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n        return unwrapSafeValue(unsafeStyle);\n    }\n    return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n        return unwrapSafeValue(unsafeUrl);\n    }\n    return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n        return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n    }\n    throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n        return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n    }\n    throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantHtml(html) {\n    // The following runtime check ensures that the function was called as a\n    // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n    // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n    // is an array with a `raw` property that is also an array. The associated\n    // template literal has no interpolation if and only if the length of the\n    // TemplateStringsArray is 1.\n    if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n        throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n    }\n    return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n    // The following runtime check ensures that the function was called as a\n    // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n    // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n    // TemplateStringsArray is an array with a `raw` property that is also an\n    // array. The associated template literal has no interpolation if and only if\n    // the length of the TemplateStringsArray is 1.\n    if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n        throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n    }\n    return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n    if ((prop === 'src' &&\n        (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' ||\n            tag === 'script')) ||\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n        return ɵɵsanitizeResourceUrl;\n    }\n    return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...` +\n            `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n            ` current module.`;\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n    }\n}\nfunction validateAgainstEventAttributes(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...`;\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n    }\n}\nfunction getSanitizer() {\n    const lView = getLView();\n    return lView && lView[SANITIZER];\n}\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nclass InjectionToken {\n    /**\n     * @param _desc   Description for the token,\n     *                used only for debugging purposes,\n     *                it should but does not need to be unique\n     * @param options Options for the token's usage, as described above\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /** @internal */\n        this.ngMetadataName = 'InjectionToken';\n        this.ɵprov = undefined;\n        if (typeof options == 'number') {\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                assertLessThan(options, 0, 'Only negative numbers are supported here');\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // See `InjectorMarkers`\n            this.__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            this.ɵprov = ɵɵdefineInjectable({\n                token: this,\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    /**\n     * @internal\n     */\n    get multi() {\n        return this;\n    }\n    toString() {\n        return `InjectionToken ${this._desc}`;\n    }\n}\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nconst ENVIRONMENT_INITIALIZER = new InjectionToken('ENVIRONMENT_INITIALIZER');\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nconst INJECTOR = new InjectionToken('INJECTOR', \n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\n\nconst INJECTOR_DEF_TYPES = new InjectionToken('INJECTOR_DEF_TYPES');\n\nclass NullInjector {\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component in a component injector.\n */\nfunction makeEnvironmentProviders(providers) {\n    return {\n        ɵproviders: providers,\n    };\n}\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nfunction importProvidersFrom(...sources) {\n    return {\n        ɵproviders: internalImportProvidersFrom(true, sources),\n        ɵfromNgModule: true,\n    };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n    const providersOut = [];\n    const dedup = new Set(); // already seen types\n    let injectorTypesWithProviders;\n    deepForEach(sources, source => {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n            const cmpDef = getComponentDef$1(source);\n            if (cmpDef?.standalone) {\n                throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n            }\n        }\n        // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n        const internalSource = source;\n        if (walkProviderTree(internalSource, providersOut, [], dedup)) {\n            injectorTypesWithProviders || (injectorTypesWithProviders = []);\n            injectorTypesWithProviders.push(internalSource);\n        }\n    });\n    // Collect all providers from `ModuleWithProviders` types.\n    if (injectorTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(injectorTypesWithProviders, providersOut);\n    }\n    return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, providersOut) {\n    for (let i = 0; i < typesWithProviders.length; i++) {\n        const { ngModule, providers } = typesWithProviders[i];\n        deepForEachProvider(providers, provider => {\n            ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n            providersOut.push(provider);\n        });\n    }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nfunction walkProviderTree(container, providersOut, parents, dedup) {\n    container = resolveForwardRef(container);\n    if (!container)\n        return false;\n    // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n    // from `InjectorTypeWithProviders`.\n    let defType = null;\n    let injDef = getInjectorDef(container);\n    const cmpDef = !injDef && getComponentDef$1(container);\n    if (!injDef && !cmpDef) {\n        // `container` is not an injector type or a component type. It might be:\n        //  * An `InjectorTypeWithProviders` that wraps an injector type.\n        //  * A standalone directive or pipe that got pulled in from a standalone component's\n        //    dependencies.\n        // Try to unwrap it as an `InjectorTypeWithProviders` first.\n        const ngModule = container.ngModule;\n        injDef = getInjectorDef(ngModule);\n        if (injDef) {\n            defType = ngModule;\n        }\n        else {\n            // Not a component or injector type, so ignore it.\n            return false;\n        }\n    }\n    else if (cmpDef && !cmpDef.standalone) {\n        return false;\n    }\n    else {\n        defType = container;\n    }\n    // Check for circular dependencies.\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\n        const defName = stringify(defType);\n        const path = parents.map(stringify);\n        throwCyclicDependencyError(defName, path);\n    }\n    // Check for multiple imports of the same module\n    const isDuplicate = dedup.has(defType);\n    if (cmpDef) {\n        if (isDuplicate) {\n            // This component definition has already been processed.\n            return false;\n        }\n        dedup.add(defType);\n        if (cmpDef.dependencies) {\n            const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n            for (const dep of deps) {\n                walkProviderTree(dep, providersOut, parents, dedup);\n            }\n        }\n    }\n    else if (injDef) {\n        // First, include providers from any imports.\n        if (injDef.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedup.add(defType);\n            let importTypesWithProviders;\n            try {\n                deepForEach(injDef.imports, imported => {\n                    if (walkProviderTree(imported, providersOut, parents, dedup)) {\n                        importTypesWithProviders || (importTypesWithProviders = []);\n                        // If the processed import is an injector type with providers, we store it in the\n                        // list of import types with providers, so that we can process those afterwards.\n                        importTypesWithProviders.push(imported);\n                    }\n                });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n            // Imports which are declared with providers (TypeWithProviders) need to be processed\n            // after all imported modules are processed. This is similar to how View Engine\n            // processes/merges module imports in the metadata resolver. See: FW-1349.\n            if (importTypesWithProviders !== undefined) {\n                processInjectorTypesWithProviders(importTypesWithProviders, providersOut);\n            }\n        }\n        if (!isDuplicate) {\n            // Track the InjectorType and add a provider for it.\n            // It's important that this is done after the def's imports.\n            const factory = getFactoryDef(defType) || (() => new defType());\n            // Append extra providers to make more info available for consumers (to retrieve an injector\n            // type), as well as internally (to calculate an injection scope correctly and eagerly\n            // instantiate a `defType` when an injector is created).\n            providersOut.push(\n            // Provider to create `defType` using its factory.\n            { provide: defType, useFactory: factory, deps: EMPTY_ARRAY }, \n            // Make this `defType` available to an internal logic that calculates injector scope.\n            { provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true }, \n            // Provider to eagerly instantiate `defType` via `ENVIRONMENT_INITIALIZER`.\n            { provide: ENVIRONMENT_INITIALIZER, useValue: () => ɵɵinject(defType), multi: true } //\n            );\n        }\n        // Next, include providers listed on the definition itself.\n        const defProviders = injDef.providers;\n        if (defProviders != null && !isDuplicate) {\n            const injectorType = container;\n            deepForEachProvider(defProviders, provider => {\n                ngDevMode && validateProvider(provider, defProviders, injectorType);\n                providersOut.push(provider);\n            });\n        }\n    }\n    else {\n        // Should not happen, but just in case.\n        return false;\n    }\n    return (defType !== container &&\n        container.providers !== undefined);\n}\nfunction validateProvider(provider, providers, containerType) {\n    if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) ||\n        isExistingProvider(provider)) {\n        return;\n    }\n    // Here we expect the provider to be a `useClass` provider (by elimination).\n    const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n    if (!classRef) {\n        throwInvalidProviderError(containerType, providers, provider);\n    }\n}\nfunction deepForEachProvider(providers, fn) {\n    for (let provider of providers) {\n        if (isEnvironmentProviders(provider)) {\n            provider = provider.ɵproviders;\n        }\n        if (Array.isArray(provider)) {\n            deepForEachProvider(provider, fn);\n        }\n        else {\n            fn(provider);\n        }\n    }\n}\nconst USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE$1 in value;\n}\nfunction isExistingProvider(value) {\n    return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n    return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n    return !!value.useClass;\n}\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nconst INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR$1 = undefined;\nfunction getNullInjector() {\n    if (NULL_INJECTOR$1 === undefined) {\n        NULL_INJECTOR$1 = new NullInjector();\n    }\n    return NULL_INJECTOR$1;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n */\nclass EnvironmentInjector {\n}\nclass R3Injector extends EnvironmentInjector {\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     */\n    get destroyed() {\n        return this._destroyed;\n    }\n    constructor(providers, parent, source, scopes) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.scopes = scopes;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n         * to prevent further searches.\n         */\n        this.records = new Map();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this._ngOnDestroyHooks = new Set();\n        this._onDestroyHooks = [];\n        this._destroyed = false;\n        // Start off by creating Records for every provider.\n        forEachSingleProvider(providers, provider => this.processProvider(provider));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n        if (scopes.has('environment')) {\n            this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n        }\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        const record = this.records.get(INJECTOR_SCOPE);\n        if (record != null && typeof record.value === 'string') {\n            this.scopes.add(record.value);\n        }\n        this.injectorDefTypes =\n            new Set(this.get(INJECTOR_DEF_TYPES.multi, EMPTY_ARRAY, InjectFlags.Self));\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            for (const service of this._ngOnDestroyHooks) {\n                service.ngOnDestroy();\n            }\n            for (const hook of this._onDestroyHooks) {\n                hook();\n            }\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this._ngOnDestroyHooks.clear();\n            this.injectorDefTypes.clear();\n            this._onDestroyHooks.length = 0;\n        }\n    }\n    onDestroy(callback) {\n        this._onDestroyHooks.push(callback);\n    }\n    runInContext(fn) {\n        this.assertNotDestroyed();\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            return fn();\n        }\n        finally {\n            setCurrentInjector(previousInjector);\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        flags = convertToBitFlags(flags);\n        // Set the injection context.\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an injectable\n                    // def with a scope matching this injector.\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                    }\n                    else {\n                        record = null;\n                    }\n                    this.records.set(token, record);\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record != null /* NOT null || undefined */) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n            // is undefined, the value is null, otherwise it's the notFoundValue.\n            notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?\n                null :\n                notFoundValue;\n            return nextInjector.get(token, notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, restore the previous injection context.\n            setInjectImplementation(previousInjectImplementation);\n            setCurrentInjector(previousInjector);\n        }\n    }\n    /** @internal */\n    resolveInjectorInitializers() {\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            const initializers = this.get(ENVIRONMENT_INITIALIZER.multi, EMPTY_ARRAY, InjectFlags.Self);\n            if (ngDevMode && !Array.isArray(initializers)) {\n                throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' +\n                    `(expected an array, but got ${typeof initializers}). ` +\n                    'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' +\n                    '`multi: true` provider.');\n            }\n            for (const initializer of initializers) {\n                initializer();\n            }\n        }\n        finally {\n            setCurrentInjector(previousInjector);\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    toString() {\n        const tokens = [];\n        const records = this.records;\n        for (const token of records.keys()) {\n            tokens.push(stringify(token));\n        }\n        return `R3Injector[${tokens.join(', ')}]`;\n    }\n    assertNotDestroyed() {\n        if (this._destroyed) {\n            throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     */\n    processProvider(provider) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        const record = providerToRecord(provider);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (ngDevMode && multiRecord.multi === undefined) {\n                    throwMixedMultiProviderError();\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = () => injectArgs(multiRecord.multi);\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            multiRecord.multi.push(provider);\n        }\n        else {\n            const existing = this.records.get(token);\n            if (ngDevMode && existing && existing.multi !== undefined) {\n                throwMixedMultiProviderError();\n            }\n        }\n        this.records.set(token, record);\n    }\n    hydrate(token, record) {\n        if (ngDevMode && record.value === CIRCULAR) {\n            throwCyclicDependencyError(stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = record.factory();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this._ngOnDestroyHooks.add(record.value);\n        }\n        return record.value;\n    }\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        const providedIn = resolveForwardRef(def.providedIn);\n        if (typeof providedIn === 'string') {\n            return providedIn === 'any' || (this.scopes.has(providedIn));\n        }\n        else {\n            return this.injectorDefTypes.has(providedIn);\n        }\n    }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n    // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n    const injectableDef = getInjectableDef(token);\n    const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n    if (factory !== null) {\n        return factory;\n    }\n    // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n    // If it's missing that, it's an error.\n    if (token instanceof InjectionToken) {\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n    }\n    // Undecorated types can sometimes be created if they have no constructor arguments.\n    if (token instanceof Function) {\n        return getUndecoratedInjectableFactory(token);\n    }\n    // There was no way to resolve a factory for this token.\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n    // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n    const paramLength = token.length;\n    if (paramLength > 0) {\n        const args = newArray(paramLength, '?');\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n    }\n    // The constructor function appears to have no parameters.\n    // This might be because it inherits from a super-class. In which case, use an injectable\n    // def from an ancestor if there is one.\n    // Otherwise this really is a simple class with no dependencies, so return a factory that\n    // just instantiates the zero-arg constructor.\n    const inheritedInjectableDef = getInheritedInjectableDef(token);\n    if (inheritedInjectableDef !== null) {\n        return () => inheritedInjectableDef.factory(token);\n    }\n    else {\n        return () => new token();\n    }\n}\nfunction providerToRecord(provider) {\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        const factory = providerToFactory(provider);\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    let factory = undefined;\n    if (ngDevMode && isEnvironmentProviders(provider)) {\n        throwInvalidProviderError(undefined, providers, provider);\n    }\n    if (isTypeProvider(provider)) {\n        const unwrappedProvider = resolveForwardRef(provider);\n        return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = () => resolveForwardRef(provider.useValue);\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n        }\n        else if (isExistingProvider(provider)) {\n            factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n        }\n        else {\n            const classRef = resolveForwardRef(provider &&\n                (provider.useClass || provider.provide));\n            if (ngDevMode && !classRef) {\n                throwInvalidProviderError(ngModuleType, providers, provider);\n            }\n            if (hasDeps(provider)) {\n                factory = () => new (classRef)(...injectArgs(provider.deps));\n            }\n            else {\n                return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\nfunction hasDeps(value) {\n    return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\nfunction forEachSingleProvider(providers, fn) {\n    for (const provider of providers) {\n        if (Array.isArray(provider)) {\n            forEachSingleProvider(provider, fn);\n        }\n        else if (provider && isEnvironmentProviders(provider)) {\n            forEachSingleProvider(provider.ɵproviders, fn);\n        }\n        else {\n            fn(provider);\n        }\n    }\n}\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nclass ComponentRef$1 {\n}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactory$1 {\n}\n\nfunction noComponentFactoryError(component) {\n    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n    error[ERROR_COMPONENT] = component;\n    return error;\n}\nconst ERROR_COMPONENT = 'ngComponent';\nfunction getComponent$1(error) {\n    return error[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactoryResolver$1 {\n}\nComponentFactoryResolver$1.NULL = ( /* @__PURE__ */new _NullComponentFactoryResolver());\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nfunction injectElementRef() {\n    return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(tNode, lView) {\n    return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n    constructor(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n}\n/**\n * @internal\n * @nocollapse\n */\nElementRef.__NG_ELEMENT_ID__ = injectElementRef;\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nfunction unwrapElementRef(value) {\n    return value instanceof ElementRef ? value.nativeElement : value;\n}\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nclass RendererFactory2 {\n}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nclass Renderer2 {\n}\n/**\n * @internal\n * @nocollapse\n */\nRenderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();\n/** Injects a Renderer2 for the current component. */\nfunction injectRenderer2() {\n    // We need the Renderer to be based on the component that it's being injected into, however since\n    // DI happens before we've entered its view, `getLView` will return the parent view instead.\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n    return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nclass Sanitizer {\n}\n/** @nocollapse */\nSanitizer.ɵprov = ɵɵdefineInjectable({\n    token: Sanitizer,\n    providedIn: 'root',\n    factory: () => null,\n});\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nclass Version {\n    constructor(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n}\n/**\n * @publicApi\n */\nconst VERSION = new Version('15.2.9');\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nfunction wrappedError(message, originalError) {\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    const error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\nfunction getOriginalError(error) {\n    return error[ERROR_ORIGINAL_ERROR];\n}\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nclass ErrorHandler {\n    constructor() {\n        /**\n         * @internal\n         */\n        this._console = console;\n    }\n    handleError(error) {\n        const originalError = this._findOriginalError(error);\n        this._console.error('ERROR', error);\n        if (originalError) {\n            this._console.error('ORIGINAL ERROR', originalError);\n        }\n    }\n    /** @internal */\n    _findOriginalError(error) {\n        let e = error && getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e || null;\n    }\n}\n\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n    assertComponentDef(type);\n    const componentDef = getComponentDef$1(type);\n    if (!componentDef.standalone) {\n        throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` +\n            `but Angular expects to have a standalone component here. ` +\n            `Please make sure the ${stringifyForError(type)} component has ` +\n            `the \\`standalone: true\\` flag in the decorator.`);\n    }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n    if (!getComponentDef$1(type)) {\n        throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` +\n            `make sure it has the \\`@Component\\` decorator.`);\n    }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n    throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` +\n        `${stringifyForError(first)} and ` +\n        `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {\n    const field = propName ? ` for '${propName}'` : '';\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook?`;\n    }\n    throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n    const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n    let oldValue = prefix, newValue = prefix;\n    for (let i = 0; i < chunks.length; i++) {\n        const slotIdx = rootIndex + i;\n        oldValue += `${lView[slotIdx]}${chunks[i]}`;\n        newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n    }\n    return { propName, oldValue, newValue };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n    const tData = lView[TVIEW].data;\n    const metadata = tData[bindingIndex];\n    if (typeof metadata === 'string') {\n        // metadata for property interpolation\n        if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n            return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n        }\n        // metadata for property binding\n        return { propName: metadata, oldValue, newValue };\n    }\n    // metadata is not available for this expression, check if this expression is a part of the\n    // property interpolation by going from the current binding index left and look for a string that\n    // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n    // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n    if (metadata === null) {\n        let idx = bindingIndex - 1;\n        while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n            idx--;\n        }\n        const meta = tData[idx];\n        if (typeof meta === 'string') {\n            const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n            // first interpolation delimiter separates property name from interpolation parts (in case of\n            // property interpolations), so we subtract one from total number of found delimiters\n            if (matches && (matches.length - 1) > bindingIndex - idx) {\n                return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n            }\n        }\n    }\n    return { propName: undefined, oldValue, newValue };\n}\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n    ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n    let end = className.length;\n    while (true) {\n        const foundIndex = className.indexOf(classToSearch, startingIndex);\n        if (foundIndex === -1)\n            return foundIndex;\n        if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n            // Ensure that it has leading whitespace\n            const length = classToSearch.length;\n            if (foundIndex + length === end ||\n                className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n                // Ensure that it has trailing whitespace\n                return foundIndex;\n            }\n        }\n        // False positive, keep searching from where we left off.\n        startingIndex = foundIndex + 1;\n    }\n}\n\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {\n    // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n    // It is strange to me that sometimes the class information comes in form of `class` attribute\n    // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n    // if that is the right behavior.\n    ngDevMode &&\n        assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n    let i = 0;\n    // Indicates whether we are processing value from the implicit\n    // attribute section (i.e. before the first marker in the array).\n    let isImplicitAttrsSection = true;\n    while (i < attrs.length) {\n        let item = attrs[i++];\n        if (typeof item === 'string' && isImplicitAttrsSection) {\n            const value = attrs[i++];\n            if (isProjectionMode && item === 'class') {\n                // We found a `class` attribute in the implicit attribute section,\n                // check if it matches the value of the `cssClassToMatch` argument.\n                if (classIndexOf(value.toLowerCase(), cssClassToMatch, 0) !== -1) {\n                    return true;\n                }\n            }\n        }\n        else if (item === 1 /* AttributeMarker.Classes */) {\n            // We found the classes section. Start searching for the class.\n            while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n                // while we have strings\n                if (item.toLowerCase() === cssClassToMatch)\n                    return true;\n            }\n            return false;\n        }\n        else if (typeof item === 'number') {\n            // We've came across a first marker, which indicates\n            // that the implicit attribute section is over.\n            isImplicitAttrsSection = false;\n        }\n    }\n    return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nfunction isInlineTemplate(tNode) {\n    return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n    return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    let mode = 4 /* SelectorFlags.ELEMENT */;\n    const nodeAttrs = tNode.attrs || [];\n    // Find the index of first attribute that has no value, only a name.\n    const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = current | (mode & 1 /* SelectorFlags.NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* SelectorFlags.ELEMENT */) {\n            mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            const selectorAttrValue = mode & 8 /* SelectorFlags.CLASS */ ? current : selector[++i];\n            // special case for matching against classes when a tNode has been instantiated with\n            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n            if ((mode & 8 /* SelectorFlags.CLASS */) && tNode.attrs !== null) {\n                if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n                continue;\n            }\n            const attrName = (mode & 8 /* SelectorFlags.CLASS */) ? 'class' : current;\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            if (selectorAttrValue !== '') {\n                let nodeAttrValue;\n                if (attrIndexInNode > nameOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode &&\n                        assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    // we lowercase the attribute value to be able to match\n                    // selectors without case-sensitivity\n                    // (selectors are already in lowercase when generated)\n                    nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n                }\n                const compareAgainstClassName = mode & 8 /* SelectorFlags.CLASS */ ? nodeAttrValue : null;\n                if (compareAgainstClassName &&\n                    classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 ||\n                    mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n    return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n    if (attrs === null)\n        return -1;\n    let i = 0;\n    if (isProjectionMode || !isInlineTemplate) {\n        let bindingsMode = false;\n        while (i < attrs.length) {\n            const maybeAttrName = attrs[i];\n            if (maybeAttrName === name) {\n                return i;\n            }\n            else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n                bindingsMode = true;\n            }\n            else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n                let value = attrs[++i];\n                // We should skip classes here because we have a separate mechanism for\n                // matching classes in projection mode.\n                while (typeof value === 'string') {\n                    value = attrs[++i];\n                }\n                continue;\n            }\n            else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n                // We do not care about Template attributes in this scenario.\n                break;\n            }\n            else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n                // Skip the whole namespaced attribute and value. This is by design.\n                i += 4;\n                continue;\n            }\n            // In binding mode there are only names, rather than name-value pairs.\n            i += bindingsMode ? 1 : 2;\n        }\n        // We did not match the attribute\n        return -1;\n    }\n    else {\n        return matchTemplateAttribute(attrs, name);\n    }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\n        }\n    }\n    return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n    for (let i = 0; i < nodeAttrs.length; i++) {\n        const nodeAttr = nodeAttrs[i];\n        if (isNameOnlyAttributeMarker(nodeAttr)) {\n            return i;\n        }\n    }\n    return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n    let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n    if (i > -1) {\n        i++;\n        while (i < attrs.length) {\n            const attr = attrs[i];\n            // Return in case we checked all template attrs and are switching to the next section in the\n            // attrs array (that starts with a number that represents an attribute marker).\n            if (typeof attr === 'number')\n                return -1;\n            if (attr === name)\n                return i;\n            i++;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nfunction isSelectorInSelectorList(selector, list) {\n    selectorListLoop: for (let i = 0; i < list.length; i++) {\n        const currentSelectorInList = list[i];\n        if (selector.length !== currentSelectorInList.length) {\n            continue;\n        }\n        for (let j = 0; j < selector.length; j++) {\n            if (selector[j] !== currentSelectorInList[j]) {\n                continue selectorListLoop;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n    return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n    let result = selector[0];\n    let i = 1;\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n    let currentChunk = '';\n    let isNegativeMode = false;\n    while (i < selector.length) {\n        let valueOrMarker = selector[i];\n        if (typeof valueOrMarker === 'string') {\n            if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n                const attrValue = selector[++i];\n                currentChunk +=\n                    '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n            }\n            else if (mode & 8 /* SelectorFlags.CLASS */) {\n                currentChunk += '.' + valueOrMarker;\n            }\n            else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n                currentChunk += ' ' + valueOrMarker;\n            }\n        }\n        else {\n            //\n            // Append current chunk to the final result in case we come across SelectorFlag, which\n            // indicates that the previous section of a selector is over. We need to accumulate content\n            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n            // ```\n            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n            // ```\n            // should be transformed to `.classA :not(.classB .classC)`.\n            //\n            // Note: for negative selector part, we accumulate content between flags until we find the\n            // next negative flag. This is needed to support a case where `:not()` rule contains more than\n            // one chunk, e.g. the following selector:\n            // ```\n            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n            // ```\n            // should be stringified to `:not(p.foo) :not(.bar)`\n            //\n            if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n                result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n                currentChunk = '';\n            }\n            mode = valueOrMarker;\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n            // mode is maintained for remaining chunks of a selector.\n            isNegativeMode = isNegativeMode || !isPositive(mode);\n        }\n        i++;\n    }\n    if (currentChunk !== '') {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n    }\n    return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nfunction stringifyCSSSelectorList(selectorList) {\n    return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n    const attrs = [];\n    const classes = [];\n    let i = 1;\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n    while (i < selector.length) {\n        let valueOrMarker = selector[i];\n        if (typeof valueOrMarker === 'string') {\n            if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n                if (valueOrMarker !== '') {\n                    attrs.push(valueOrMarker, selector[++i]);\n                }\n            }\n            else if (mode === 8 /* SelectorFlags.CLASS */) {\n                classes.push(valueOrMarker);\n            }\n        }\n        else {\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n            // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n            // extracted only for \"positive\" part of the selector, we can stop here.\n            if (!isPositive(mode))\n                break;\n            mode = valueOrMarker;\n        }\n        i++;\n    }\n    return { attrs, classes };\n}\n\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = (typeof ngDevMode === 'undefined' || ngDevMode) ? { __brand__: 'NO_CHANGE' } : {};\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nfunction ɵɵadvance(delta) {\n    ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n    selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n    ngDevMode && assertIndexInDeclRange(lView, index);\n    // Flush the initial hooks for elements in the view that have been added up to this point.\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!checkNoChangesMode) {\n        const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n        if (hooksInitPhaseCompleted) {\n            const preOrderCheckHooks = tView.preOrderCheckHooks;\n            if (preOrderCheckHooks !== null) {\n                executeCheckHooks(lView, preOrderCheckHooks, index);\n            }\n        }\n        else {\n            const preOrderHooks = tView.preOrderHooks;\n            if (preOrderHooks !== null) {\n                executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n            }\n        }\n    }\n    // We must set the selected index *after* running the hooks, because hooks may have side-effects\n    // that cause other template functions to run, thus updating the selected index, which is global\n    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n    // will be altered by the time we leave the `ɵɵadvance` instruction.\n    setSelectedIndex(index);\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreDiEnv = {\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n    'resolveForwardRef': resolveForwardRef,\n};\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nfunction compileInjectable(type, meta) {\n    let ngInjectableDef = null;\n    let ngFactoryDef = null;\n    // if NG_PROV_DEF is already defined on this class then don't overwrite it\n    if (!type.hasOwnProperty(NG_PROV_DEF)) {\n        Object.defineProperty(type, NG_PROV_DEF, {\n            get: () => {\n                if (ngInjectableDef === null) {\n                    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'injectable', type });\n                    ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n                }\n                return ngInjectableDef;\n            },\n        });\n    }\n    // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n    if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n        Object.defineProperty(type, NG_FACTORY_DEF, {\n            get: () => {\n                if (ngFactoryDef === null) {\n                    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'injectable', type });\n                    ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n                        name: type.name,\n                        type,\n                        typeArgumentCount: 0,\n                        deps: reflectDependencies(type),\n                        target: compiler.FactoryTarget.Injectable\n                    });\n                }\n                return ngFactoryDef;\n            },\n            // Leave this configurable so that the factories from directives or pipes can take precedence.\n            configurable: true\n        });\n    }\n}\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nfunction isUseClassProvider(meta) {\n    return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n    return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n    return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n    // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n    const meta = srcMeta || { providedIn: null };\n    const compilerMeta = {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        providedIn: meta.providedIn,\n    };\n    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n        compilerMeta.deps = convertDependencies(meta.deps);\n    }\n    // Check to see if the user explicitly provided a `useXxxx` property.\n    if (isUseClassProvider(meta)) {\n        compilerMeta.useClass = meta.useClass;\n    }\n    else if (isUseValueProvider(meta)) {\n        compilerMeta.useValue = meta.useValue;\n    }\n    else if (isUseFactoryProvider(meta)) {\n        compilerMeta.useFactory = meta.useFactory;\n    }\n    else if (isUseExistingProvider(meta)) {\n        compilerMeta.useExisting = meta.useExisting;\n    }\n    return compilerMeta;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n    const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n    injector.resolveInjectorInitializers();\n    return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n    const providers = [\n        additionalProviders || EMPTY_ARRAY,\n        importProvidersFrom(defType),\n    ];\n    name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n    return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nclass Injector {\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return createInjector({ name: '' }, parent, options, '');\n        }\n        else {\n            const name = options.name ?? '';\n            return createInjector({ name }, options.parent, options.providers, name);\n        }\n    }\n}\nInjector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\nInjector.NULL = ( /* @__PURE__ */new NullInjector());\n/** @nocollapse */\nInjector.ɵprov = ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any',\n    factory: () => ɵɵinject(INJECTOR),\n});\n/**\n * @internal\n * @nocollapse\n */\nInjector.__NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\n\nfunction findFirstClosedCycle(keys) {\n    const res = [];\n    for (let i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        const reversed = findFirstClosedCycle(keys.slice().reverse());\n        const tokenStrs = reversed.map(k => stringify(k.token));\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    const keys = [key];\n    const errMsg = constructResolvingMessage(keys);\n    const error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nfunction noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        const first = stringify(keys[0].token);\n        return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nfunction cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        const first = stringify(keys[0].token);\n        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n    }, originalException);\n}\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nfunction invalidProviderError(provider) {\n    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\nfunction noAnnotationError(typeOrFunc, params) {\n    const signature = [];\n    for (let i = 0, ii = params.length; i < ii; i++) {\n        const parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\nfunction outOfBoundsError(index) {\n    return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nclass ReflectiveKey {\n    /**\n     * Private\n     */\n    constructor(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new RuntimeError(208 /* RuntimeErrorCode.MISSING_INJECTION_TOKEN */, ngDevMode && 'Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    static get(token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    }\n    /**\n     * @returns the number of keys registered in the system.\n     */\n    static get numberOfKeys() {\n        return _globalKeyRegistry.numberOfKeys;\n    }\n}\nclass KeyRegistry {\n    constructor() {\n        this._allKeys = new Map();\n    }\n    get(token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return this._allKeys.get(token);\n        }\n        const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    }\n    get numberOfKeys() {\n        return this._allKeys.size;\n    }\n}\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n    constructor(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    static fromKey(key) {\n        return new ReflectiveDependency(key, false, null);\n    }\n}\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n    constructor(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\nclass ResolvedReflectiveFactory {\n    constructor(\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    factory, \n    /**\n     * Arguments (dependencies) to the `factory` function.\n     */\n    dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n}\n/**\n * Resolve a single provider.\n */\nfunction resolveReflectiveFactory(provider) {\n    let factoryFn;\n    let resolvedDeps;\n    if (provider.useClass) {\n        const useClass = resolveForwardRef(provider.useClass);\n        factoryFn = getReflect().factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = (aliasInstance) => aliasInstance;\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = () => provider.useValue;\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n */\nfunction resolveReflectiveProviders(providers) {\n    const normalized = _normalizeProviders(providers, []);\n    const resolved = normalized.map(resolveReflectiveProvider);\n    const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (let i = 0; i < providers.length; i++) {\n        const provider = providers[i];\n        const existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (let j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            let resolvedProvider;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(b => {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && b.provide !== undefined) {\n            res.push(b);\n        }\n        else if (Array.isArray(b)) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\nfunction constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        const params = dependencies.map(t => [t]);\n        return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n    }\n}\nfunction _dependenciesFor(typeOrFunc) {\n    const params = getReflect().parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(p => p == null)) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(p => _extractToken(typeOrFunc, p, params));\n}\nfunction _extractToken(typeOrFunc, metadata, params) {\n    let token = null;\n    let optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    let visibility = null;\n    for (let i = 0; i < metadata.length; ++i) {\n        const paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n// Threshold for the dynamic version\nconst UNDEFINED = {};\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * TODO: delete in v14.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\nclass ReflectiveInjector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    static resolve(providers) {\n        return resolveReflectiveProviders(providers);\n    }\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    static resolveAndCreate(providers, parent) {\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    }\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    static fromResolvedProviders(providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    }\n}\nclass ReflectiveInjector_ {\n    /**\n     * Private\n     */\n    constructor(_providers, _parent) {\n        /** @internal */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        const len = _providers.length;\n        this.keyIds = [];\n        this.objs = [];\n        for (let i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    }\n    resolveAndCreateChild(providers) {\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    }\n    createChildFromResolved(providers) {\n        const inj = new ReflectiveInjector_(providers);\n        inj.parent = this;\n        return inj;\n    }\n    resolveAndInstantiate(provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    }\n    instantiateResolved(provider) {\n        return this._instantiateProvider(provider);\n    }\n    getProviderAtIndex(index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    }\n    /** @internal */\n    _new(provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    }\n    _getMaxNumberOfObjects() {\n        return this.objs.length;\n    }\n    _instantiateProvider(provider) {\n        if (provider.multiProvider) {\n            const res = [];\n            for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    }\n    _instantiate(provider, ResolvedReflectiveFactory) {\n        const factory = ResolvedReflectiveFactory.factory;\n        let deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        let obj;\n        try {\n            obj = factory(...deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    }\n    _getByReflectiveDependency(dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    }\n    _getByKey(key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    }\n    _getObjByKeyId(keyId) {\n        for (let i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    }\n    /** @internal */\n    _throwOrNull(key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    }\n    /** @internal */\n    _getByKeySelf(key, notFoundValue) {\n        const obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    }\n    /** @internal */\n    _getByKeyDefault(key, notFoundValue, visibility) {\n        let inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            const inj_ = inj;\n            const obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    }\n    get displayName() {\n        const providers = _mapProviders(this, (b) => ' \"' + b.key.displayName + '\" ')\n            .join(', ');\n        return `ReflectiveInjector(providers: [${providers}])`;\n    }\n    toString() {\n        return this.displayName;\n    }\n}\nReflectiveInjector_.INJECTOR_KEY = ( /* @__PURE__ */ReflectiveKey.get(Injector));\nfunction _mapProviders(injector, fn) {\n    const res = [];\n    for (let i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\n/**\n * This file should not be necessary because node resolution should just default to `./di/index`!\n *\n * However it does not seem to work and it breaks:\n *  - //packages/animations/browser/test:test_web_chromium-local\n *  - //packages/compiler-cli/test:extract_i18n\n *  - //packages/compiler-cli/test:ngc\n *  - //packages/compiler-cli/test:perform_watch\n *  - //packages/compiler-cli/test/diagnostics:check_types\n *  - //packages/compiler-cli/test/transformers:test\n *  - //packages/compiler/test:test\n *  - //tools/public_api_guard:core_api\n *\n * Remove this file once the above is solved or wait until `ngc` is deleted and then it should be\n * safe to delete this file.\n */\n\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n    const lView = getLView();\n    // Fall back to inject() if view hasn't been created. This situation can happen in tests\n    // if inject utilities are used before bootstrapping.\n    if (lView === null) {\n        // Verify that we will not get into infinite loop.\n        ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n        return ɵɵinject(token, flags);\n    }\n    const tNode = getCurrentTNode();\n    return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactory() {\n    const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n    throw new Error(msg);\n}\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView, lView) {\n    const hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null)\n        return;\n    try {\n        for (let i = 0; i < hostBindingOpCodes.length; i++) {\n            const opCode = hostBindingOpCodes[i];\n            if (opCode < 0) {\n                // Negative numbers are element indexes.\n                setSelectedIndex(~opCode);\n            }\n            else {\n                // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n                const directiveIdx = opCode;\n                const bindingRootIndx = hostBindingOpCodes[++i];\n                const hostBindingFn = hostBindingOpCodes[++i];\n                setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n                const context = lView[directiveIdx];\n                hostBindingFn(2 /* RenderFlags.Update */, context);\n            }\n        }\n    }\n    finally {\n        setSelectedIndex(-1);\n    }\n}\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n    const contentQueries = tView.contentQueries;\n    if (contentQueries !== null) {\n        for (let i = 0; i < contentQueries.length; i += 2) {\n            const queryStartIdx = contentQueries[i];\n            const directiveDefIdx = contentQueries[i + 1];\n            if (directiveDefIdx !== -1) {\n                const directiveDef = tView.data[directiveDefIdx];\n                ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n                ngDevMode &&\n                    assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n                setCurrentQueryIndex(queryStartIdx);\n                directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n            }\n        }\n    }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction refreshChildComponents(hostLView, components) {\n    for (let i = 0; i < components.length; i++) {\n        refreshComponent(hostLView, components[i]);\n    }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n    for (let i = 0; i < components.length; i++) {\n        renderComponent(hostLView, components[i]);\n    }\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector, embeddedViewInjector) {\n    const lView = tView.blueprint.slice();\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 64 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */;\n    if (embeddedViewInjector !== null ||\n        (parentLView && (parentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */))) {\n        lView[FLAGS] |= 1024 /* LViewFlags.HasEmbeddedViewInjector */;\n    }\n    resetPreOrderHookFlags(lView);\n    ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n    lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n    lView[T_HOST] = tHostNode;\n    lView[ID] = getUniqueLViewId();\n    lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n    ngDevMode &&\n        assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n    lView[DECLARATION_COMPONENT_VIEW] =\n        tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n    return lView;\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n        // `view_engine_compatibility` for additional context.\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n    // Keep this function short, so that the VM will inline it.\n    ngDevMode && assertPureTNodeType(type);\n    let tNode = tView.data[index];\n    if (tNode === null) {\n        tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n        if (isInI18nBlock()) {\n            // If we are in i18n block then all elements should be pre declared through `Placeholder`\n            // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n            // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n            // removed, so we mark it as detached.\n            tNode.flags |= 32 /* TNodeFlags.isDetached */;\n        }\n    }\n    else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n        tNode.type = type;\n        tNode.value = name;\n        tNode.attrs = attrs;\n        const parent = getCurrentParentTNode();\n        tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n        ngDevMode && assertTNodeForTView(tNode, tView);\n        ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n    }\n    setCurrentTNode(tNode, true);\n    return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n    const currentTNode = getCurrentTNodePlaceholderOk();\n    const isParent = isCurrentTNodeParent();\n    const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n    // Parents cannot cross component boundaries because components will be used in multiple places.\n    const tNode = tView.data[index] =\n        createTNode(tView, parent, type, index, name, attrs);\n    // Assign a pointer to the first child node of a given view. The first node is not always the one\n    // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n    // the index 1 or more, so we can't just check node index.\n    if (tView.firstChild === null) {\n        tView.firstChild = tNode;\n    }\n    if (currentTNode !== null) {\n        if (isParent) {\n            // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n            if (currentTNode.child == null && tNode.parent !== null) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                currentTNode.child = tNode;\n            }\n        }\n        else {\n            if (currentTNode.next === null) {\n                // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n                // to break the links which i18n created.\n                currentTNode.next = tNode;\n                tNode.prev = currentTNode;\n            }\n        }\n    }\n    return tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n    if (numSlotsToAlloc === 0)\n        return -1;\n    if (ngDevMode) {\n        assertFirstCreatePass(tView);\n        assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n        assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n        assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n        assertFirstUpdatePass(tView);\n    }\n    const allocIdx = lView.length;\n    for (let i = 0; i < numSlotsToAlloc; i++) {\n        lView.push(initialValue);\n        tView.blueprint.push(initialValue);\n        tView.data.push(null);\n    }\n    return allocIdx;\n}\n//////////////////////////\n//// Render\n//////////////////////////\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nfunction renderView(tView, lView, context) {\n    ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n    enterView(lView);\n    try {\n        const viewQuery = tView.viewQuery;\n        if (viewQuery !== null) {\n            executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n        }\n        // Execute a template associated with this view, if it exists. A template function might not be\n        // defined for the root component views.\n        const templateFn = tView.template;\n        if (templateFn !== null) {\n            executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n        }\n        // This needs to be set before children are processed to support recursive components.\n        // This must be set to false immediately after the first creation run because in an\n        // ngFor loop, all the views will be created together before update mode runs and turns\n        // off firstCreatePass. If we don't set it here, instances will perform directive\n        // matching, etc again and again.\n        if (tView.firstCreatePass) {\n            tView.firstCreatePass = false;\n        }\n        // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n        // content queries are resolved during change detection (i.e. update mode), after embedded\n        // views are refreshed (see block above).\n        if (tView.staticContentQueries) {\n            refreshContentQueries(tView, lView);\n        }\n        // We must materialize query results before child components are processed\n        // in case a child component has projected a container. The LContainer needs\n        // to exist so the embedded views are properly attached by the container.\n        if (tView.staticViewQueries) {\n            executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n        }\n        // Render child component views.\n        const components = tView.components;\n        if (components !== null) {\n            renderChildComponents(lView, components);\n        }\n    }\n    catch (error) {\n        // If we didn't manage to get past the first template pass due to\n        // an error, mark the view as corrupted so we can try to recover.\n        if (tView.firstCreatePass) {\n            tView.incompleteFirstPass = true;\n            tView.firstCreatePass = false;\n        }\n        throw error;\n    }\n    finally {\n        lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n        leaveView();\n    }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nfunction refreshView(tView, lView, templateFn, context) {\n    ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n    const flags = lView[FLAGS];\n    if ((flags & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */)\n        return;\n    enterView(lView);\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\n    // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n    try {\n        resetPreOrderHookFlags(lView);\n        setBindingIndex(tView.bindingStartIndex);\n        if (templateFn !== null) {\n            executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n        }\n        const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n        // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const preOrderCheckHooks = tView.preOrderCheckHooks;\n                if (preOrderCheckHooks !== null) {\n                    executeCheckHooks(lView, preOrderCheckHooks, null);\n                }\n            }\n            else {\n                const preOrderHooks = tView.preOrderHooks;\n                if (preOrderHooks !== null) {\n                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n                }\n                incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n            }\n        }\n        // First mark transplanted views that are declared in this lView as needing a refresh at their\n        // insertion points. This is needed to avoid the situation where the template is defined in this\n        // `LView` but its declaration appears after the insertion component.\n        markTransplantedViewsForRefresh(lView);\n        refreshEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        if (tView.contentQueries !== null) {\n            refreshContentQueries(tView, lView);\n        }\n        // execute content hooks (AfterContentInit, AfterContentChecked)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const contentCheckHooks = tView.contentCheckHooks;\n                if (contentCheckHooks !== null) {\n                    executeCheckHooks(lView, contentCheckHooks);\n                }\n            }\n            else {\n                const contentHooks = tView.contentHooks;\n                if (contentHooks !== null) {\n                    executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n                }\n                incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n            }\n        }\n        processHostBindingOpCodes(tView, lView);\n        // Refresh child component views.\n        const components = tView.components;\n        if (components !== null) {\n            refreshChildComponents(lView, components);\n        }\n        // View queries must execute after refreshing child components because a template in this view\n        // could be inserted in a child component. If the view query executes before child component\n        // refresh, the template might not yet be inserted.\n        const viewQuery = tView.viewQuery;\n        if (viewQuery !== null) {\n            executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n        }\n        // execute view hooks (AfterViewInit, AfterViewChecked)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const viewCheckHooks = tView.viewCheckHooks;\n                if (viewCheckHooks !== null) {\n                    executeCheckHooks(lView, viewCheckHooks);\n                }\n            }\n            else {\n                const viewHooks = tView.viewHooks;\n                if (viewHooks !== null) {\n                    executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n                }\n                incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n            }\n        }\n        if (tView.firstUpdatePass === true) {\n            // We need to make sure that we only flip the flag on successful `refreshView` only\n            // Don't do this in `finally` block.\n            // If we did this in `finally` block then an exception could block the execution of styling\n            // instructions which in turn would be unable to insert themselves into the styling linked\n            // list. The result of this would be that if the exception would not be throw on subsequent CD\n            // the styling would be unable to process it data and reflect to the DOM.\n            tView.firstUpdatePass = false;\n        }\n        // Do not reset the dirty state when running in check no changes mode. We don't want components\n        // to behave differently depending on whether check no changes is enabled or not. For example:\n        // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n        // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n        // no changes cycle, the component would be not be dirty for the next update pass. This would\n        // be different in production mode where the component dirty state is not reset.\n        if (!isInCheckNoChangesPass) {\n            lView[FLAGS] &= ~(32 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n        }\n        if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n            lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n            updateTransplantedViewCount(lView[PARENT], -1);\n        }\n    }\n    finally {\n        leaveView();\n    }\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n    const prevSelectedIndex = getSelectedIndex();\n    const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n    try {\n        setSelectedIndex(-1);\n        if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n            // When we're updating, inherently select 0 so we don't\n            // have to generate that instruction for most update blocks.\n            selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n        }\n        const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n        profiler(preHookType, context);\n        templateFn(rf, context);\n    }\n    finally {\n        setSelectedIndex(prevSelectedIndex);\n        const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n        profiler(postHookType, context);\n    }\n}\n//////////////////////////\n//// Element\n//////////////////////////\nfunction executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        const start = tNode.directiveStart;\n        const end = tNode.directiveEnd;\n        for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n            const def = tView.data[directiveIndex];\n            if (def.contentQueries) {\n                def.contentQueries(1 /* RenderFlags.Create */, lView[directiveIndex], directiveIndex);\n            }\n        }\n    }\n}\n/**\n * Creates directive instances.\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n    if (!getBindingsEnabled())\n        return;\n    instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n    if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\n        invokeDirectivesHostBindings(tView, lView, tNode);\n    }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n    const localNames = tNode.localNames;\n    if (localNames !== null) {\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            const index = localNames[i + 1];\n            const value = index === -1 ?\n                localRefExtractor(tNode, viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nfunction getOrCreateComponentTView(def) {\n    const tView = def.tView;\n    // Create a TView if there isn't one, or recreate it if the first create pass didn't\n    // complete successfully since we can't know for sure whether it's in a usable shape.\n    if (tView === null || tView.incompleteFirstPass) {\n        // Declaration node here is null since this function is called when we dynamically create a\n        // component and hence there is no declaration.\n        const declTNode = null;\n        return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n    }\n    return tView;\n}\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {\n    ngDevMode && ngDevMode.tView++;\n    const bindingStartIndex = HEADER_OFFSET + decls;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    const initialViewLength = bindingStartIndex + vars;\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n    const tView = blueprint[TVIEW] = {\n        type: type,\n        blueprint: blueprint,\n        template: templateFn,\n        queries: null,\n        viewQuery: viewQuery,\n        declTNode: declTNode,\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        hostBindingOpCodes: null,\n        firstCreatePass: true,\n        firstUpdatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n        consts: consts,\n        incompleteFirstPass: false\n    };\n    if (ngDevMode) {\n        // For performance reasons it is important that the tView retains the same shape during runtime.\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n        // prevent class transitions.\n        Object.seal(tView);\n    }\n    return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    const blueprint = [];\n    for (let i = 0; i < initialViewLength; i++) {\n        blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n    }\n    return blueprint;\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation) {\n    // When using native Shadow DOM, do not clear host element to allow native slot projection\n    const preserveContent = encapsulation === ViewEncapsulation.ShadowDom;\n    return renderer.selectRootElement(elementOrSelector, preserveContent);\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n    const lCleanup = getOrCreateLViewCleanup(lView);\n    if (context === null) {\n        // If context is null that this is instance specific callback. These callbacks can only be\n        // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n        if (ngDevMode) {\n            Object.freeze(getOrCreateTViewCleanup(tView));\n        }\n        lCleanup.push(cleanupFn);\n    }\n    else {\n        lCleanup.push(context);\n        if (tView.firstCreatePass) {\n            getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n        }\n    }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n        // `view_engine_compatibility` for additional context.\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n    ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n    ngDevMode && ngDevMode.tNode++;\n    ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n    let injectorIndex = tParent ? tParent.injectorIndex : -1;\n    const tNode = {\n        type,\n        index,\n        insertBeforeIndex: null,\n        injectorIndex,\n        directiveStart: -1,\n        directiveEnd: -1,\n        directiveStylingLast: -1,\n        componentOffset: -1,\n        propertyBindings: null,\n        flags: 0,\n        providerIndexes: 0,\n        value: value,\n        attrs: attrs,\n        mergedAttrs: null,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: null,\n        outputs: null,\n        tView: null,\n        next: null,\n        prev: null,\n        projectionNext: null,\n        child: null,\n        parent: tParent,\n        projection: null,\n        styles: null,\n        stylesWithoutHost: null,\n        residualStyles: undefined,\n        classes: null,\n        classesWithoutHost: null,\n        residualClasses: undefined,\n        classBindings: 0,\n        styleBindings: 0,\n    };\n    if (ngDevMode) {\n        // For performance reasons it is important that the tNode retains the same shape during runtime.\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n        // prevent class transitions.\n        Object.seal(tNode);\n    }\n    return tNode;\n}\n/**\n * Generates the `PropertyAliases` data structure from the provided input/output mapping.\n * @param aliasMap Input/output mapping from the directive definition.\n * @param directiveIndex Index of the directive.\n * @param propertyAliases Object in which to store the results.\n * @param hostDirectiveAliasMap Object used to alias or filter out properties for host directives.\n * If the mapping is provided, it'll act as an allowlist, as well as a mapping of what public\n * name inputs/outputs should be exposed under.\n */\nfunction generatePropertyAliases(aliasMap, directiveIndex, propertyAliases, hostDirectiveAliasMap) {\n    for (let publicName in aliasMap) {\n        if (aliasMap.hasOwnProperty(publicName)) {\n            propertyAliases = propertyAliases === null ? {} : propertyAliases;\n            const internalName = aliasMap[publicName];\n            // If there are no host directive mappings, we want to remap using the alias map from the\n            // definition itself. If there is an alias map, it has two functions:\n            // 1. It serves as an allowlist of bindings that are exposed by the host directives. Only the\n            // ones inside the host directive map will be exposed on the host.\n            // 2. The public name of the property is aliased using the host directive alias map, rather\n            // than the alias map from the definition.\n            if (hostDirectiveAliasMap === null) {\n                addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName);\n            }\n            else if (hostDirectiveAliasMap.hasOwnProperty(publicName)) {\n                addPropertyAlias(propertyAliases, directiveIndex, hostDirectiveAliasMap[publicName], internalName);\n            }\n        }\n    }\n    return propertyAliases;\n}\nfunction addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName) {\n    if (propertyAliases.hasOwnProperty(publicName)) {\n        propertyAliases[publicName].push(directiveIndex, internalName);\n    }\n    else {\n        propertyAliases[publicName] = [directiveIndex, internalName];\n    }\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    const tViewData = tView.data;\n    const tNodeAttrs = tNode.attrs;\n    const inputsFromAttrs = [];\n    let inputsStore = null;\n    let outputsStore = null;\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n        const directiveDef = tViewData[directiveIndex];\n        const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;\n        const aliasedInputs = aliasData ? aliasData.inputs : null;\n        const aliasedOutputs = aliasData ? aliasData.outputs : null;\n        inputsStore =\n            generatePropertyAliases(directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);\n        outputsStore =\n            generatePropertyAliases(directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);\n        // Do not use unbound attributes as inputs to structural directives, since structural\n        // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n        // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n        // should be set for inline templates.\n        const initialInputs = (inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode)) ?\n            generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) :\n            null;\n        inputsFromAttrs.push(initialInputs);\n    }\n    if (inputsStore !== null) {\n        if (inputsStore.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\n        }\n        if (inputsStore.hasOwnProperty('style')) {\n            tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\n        }\n    }\n    tNode.initialInputs = inputsFromAttrs;\n    tNode.inputs = inputsStore;\n    tNode.outputs = outputsStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name) {\n    if (name === 'class')\n        return 'className';\n    if (name === 'for')\n        return 'htmlFor';\n    if (name === 'formaction')\n        return 'formAction';\n    if (name === 'innerHtml')\n        return 'innerHTML';\n    if (name === 'readonly')\n        return 'readOnly';\n    if (name === 'tabindex')\n        return 'tabIndex';\n    return name;\n}\nfunction elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    const element = getNativeByTNode(tNode, lView);\n    let inputData = tNode.inputs;\n    let dataValue;\n    if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n        setInputsForProperty(tView, lView, dataValue, propName, value);\n        if (isComponentHost(tNode))\n            markDirtyIfOnPush(lView, tNode.index);\n        if (ngDevMode) {\n            setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n        }\n    }\n    else if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n        propName = mapPropName(propName);\n        if (ngDevMode) {\n            validateAgainstEventProperties(propName);\n            if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n                handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n            }\n            ngDevMode.rendererSetProperty++;\n        }\n        // It is assumed that the sanitizer is only added when the compiler determines that the\n        // property is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n        renderer.setProperty(element, propName, value);\n    }\n    else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n        // If the node is a container and the property didn't\n        // match any of the inputs or schemas we should throw.\n        if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n            handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n        }\n    }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    ngDevMode && assertLView(lView);\n    const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n        childComponentLView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n    }\n}\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n    const renderer = lView[RENDERER];\n    attrName = normalizeDebugBindingName(attrName);\n    const debugValue = normalizeDebugBindingValue(value);\n    if (type & 3 /* TNodeType.AnyRNode */) {\n        if (value == null) {\n            renderer.removeAttribute(element, attrName);\n        }\n        else {\n            renderer.setAttribute(element, attrName, debugValue);\n        }\n    }\n    else {\n        const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);\n        renderer.setValue(element, textContent);\n    }\n}\nfunction setNgReflectProperties(lView, element, type, dataValue, value) {\n    if (type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */)) {\n        /**\n         * dataValue is an array containing runtime input or output names for the directives:\n         * i+0: directive instance index\n         * i+1: privateName\n         *\n         * e.g. [0, 'change', 'change-minified']\n         * we want to set the reflected property with the privateName: dataValue[i+1]\n         */\n        for (let i = 0; i < dataValue.length; i += 2) {\n            setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n        }\n    }\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n    // tsickle.\n    ngDevMode && assertFirstCreatePass(tView);\n    if (getBindingsEnabled()) {\n        const exportsMap = localRefs === null ? null : { '': -1 };\n        const matchResult = findDirectiveDefMatches(tView, tNode);\n        let directiveDefs;\n        let hostDirectiveDefs;\n        if (matchResult === null) {\n            directiveDefs = hostDirectiveDefs = null;\n        }\n        else {\n            [directiveDefs, hostDirectiveDefs] = matchResult;\n        }\n        if (directiveDefs !== null) {\n            initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);\n        }\n        if (exportsMap)\n            cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n    }\n    // Merge the template attrs last so that they have the highest priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n}\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {\n    ngDevMode && assertFirstCreatePass(tView);\n    // Publishes the directive types to DI so they can be injected. Needs to\n    // happen in a separate pass before the TNode flags have been initialized.\n    for (let i = 0; i < directives.length; i++) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);\n    }\n    initTNodeFlags(tNode, tView.data.length, directives.length);\n    // When the same token is provided by several directives on the same node, some rules apply in\n    // the viewEngine:\n    // - viewProviders have priority over providers\n    // - the last directive in NgModule.declarations has priority over the previous one\n    // So to match these rules, the order in which providers are added in the arrays is very\n    // important.\n    for (let i = 0; i < directives.length; i++) {\n        const def = directives[i];\n        if (def.providersResolver)\n            def.providersResolver(def);\n    }\n    let preOrderHooksFound = false;\n    let preOrderCheckHooksFound = false;\n    let directiveIdx = allocExpando(tView, lView, directives.length, null);\n    ngDevMode &&\n        assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n    for (let i = 0; i < directives.length; i++) {\n        const def = directives[i];\n        // Merge the attrs in the order of matches. This assumes that the first directive is the\n        // component itself, so that the component has the least priority.\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n        configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n        saveNameToExportMap(directiveIdx, def, exportsMap);\n        if (def.contentQueries !== null)\n            tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\n        if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\n            tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\n        const lifeCycleHooks = def.type.prototype;\n        // Only push a node index into the preOrderHooks array if this is the first\n        // pre-order hook found on this node.\n        if (!preOrderHooksFound &&\n            (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n            // We will push the actual hook function into this array later during dir instantiation.\n            // We cannot do it now because we must ensure hooks are registered in the same\n            // order that directives are created (i.e. injection order).\n            (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(tNode.index);\n            preOrderHooksFound = true;\n        }\n        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n            (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(tNode.index);\n            preOrderCheckHooksFound = true;\n        }\n        directiveIdx++;\n    }\n    initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const hostBindings = def.hostBindings;\n    if (hostBindings) {\n        let hostBindingOpCodes = tView.hostBindingOpCodes;\n        if (hostBindingOpCodes === null) {\n            hostBindingOpCodes = tView.hostBindingOpCodes = [];\n        }\n        const elementIndx = ~tNode.index;\n        if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n            // Conditionally add select element so that we are more efficient in execution.\n            // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n            // (We could just always add it.)\n            hostBindingOpCodes.push(elementIndx);\n        }\n        hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n    }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n    let i = hostBindingOpCodes.length;\n    while (i > 0) {\n        const value = hostBindingOpCodes[--i];\n        if (typeof value === 'number' && value < 0) {\n            return value;\n        }\n    }\n    return 0;\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode, native) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    // The component view needs to be created before creating the node injector\n    // since it is used to inject some special symbols like `ChangeDetectorRef`.\n    if (isComponentHost(tNode)) {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n        addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);\n    }\n    if (!tView.firstCreatePass) {\n        getOrCreateNodeInjectorForNode(tNode, lView);\n    }\n    attachPatchData(native, lView);\n    const initialInputs = tNode.initialInputs;\n    for (let i = start; i < end; i++) {\n        const def = tView.data[i];\n        const directive = getNodeInjectable(lView, tView, i, tNode);\n        attachPatchData(directive, lView);\n        if (initialInputs !== null) {\n            setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n        }\n        if (isComponentDef(def)) {\n            const componentView = getComponentLViewByIndex(tNode.index, lView);\n            componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n        }\n    }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    const elementIndex = tNode.index;\n    const currentDirectiveIndex = getCurrentDirectiveIndex();\n    try {\n        setSelectedIndex(elementIndex);\n        for (let dirIndex = start; dirIndex < end; dirIndex++) {\n            const def = tView.data[dirIndex];\n            const directive = lView[dirIndex];\n            setCurrentDirectiveIndex(dirIndex);\n            if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n                invokeHostBindingsInCreationMode(def, directive);\n            }\n        }\n    }\n    finally {\n        setSelectedIndex(-1);\n        setCurrentDirectiveIndex(currentDirectiveIndex);\n    }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n    if (def.hostBindings !== null) {\n        def.hostBindings(1 /* RenderFlags.Create */, directive);\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    const registry = tView.directiveRegistry;\n    let matches = null;\n    let hostDirectiveDefs = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            const def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                if (isComponentDef(def)) {\n                    if (ngDevMode) {\n                        assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` +\n                            `Please use a different tag to activate the ${stringify(def.type)} component.`);\n                        if (isComponentHost(tNode)) {\n                            throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\n                        }\n                    }\n                    // Components are inserted at the front of the matches array so that their lifecycle\n                    // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n                    // compatibility. This logic doesn't make sense with host directives, because it\n                    // would allow the host directives to undo any overrides the host may have made.\n                    // To handle this case, the host directives of components are inserted at the beginning\n                    // of the array, followed by the component. As such, the insertion order is as follows:\n                    // 1. Host directives belonging to the selector-matched component.\n                    // 2. Selector-matched component.\n                    // 3. Host directives belonging to selector-matched directives.\n                    // 4. Selector-matched directives.\n                    if (def.findHostDirectiveDefs !== null) {\n                        const hostDirectiveMatches = [];\n                        hostDirectiveDefs = hostDirectiveDefs || new Map();\n                        def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);\n                        // Add all host directives declared on this component, followed by the component itself.\n                        // Host directives should execute first so the host has a chance to override changes\n                        // to the DOM made by them.\n                        matches.unshift(...hostDirectiveMatches, def);\n                        // Component is offset starting from the beginning of the host directives array.\n                        const componentOffset = hostDirectiveMatches.length;\n                        markAsComponentHost(tView, tNode, componentOffset);\n                    }\n                    else {\n                        // No host directives on this component, just add the\n                        // component def to the beginning of the matches.\n                        matches.unshift(def);\n                        markAsComponentHost(tView, tNode, 0);\n                    }\n                }\n                else {\n                    // Append any host directives to the matches first.\n                    hostDirectiveDefs = hostDirectiveDefs || new Map();\n                    def.findHostDirectiveDefs?.(def, matches, hostDirectiveDefs);\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches === null ? null : [matches, hostDirectiveDefs];\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n    hostTNode.componentOffset = componentOffset;\n    (tView.components ?? (tView.components = [])).push(hostTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        const localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (let i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = directiveIdx;\n            }\n        }\n        if (isComponentDef(def))\n            exportsMap[''] = directiveIdx;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n    ngDevMode &&\n        assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n    // When the first directive is created on a node, save the index\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n    ngDevMode &&\n        assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n    tView.data[directiveIndex] = def;\n    const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n    // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n    // we also want to support `inject()` directly from the directive constructor context so we set\n    // `ɵɵdirectiveInject` as the inject implementation here too.\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n    tView.blueprint[directiveIndex] = nodeInjectorFactory;\n    lView[directiveIndex] = nodeInjectorFactory;\n    registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\nfunction addComponentLogic(lView, hostTNode, def) {\n    const native = getNativeByTNode(hostTNode, lView);\n    const tView = getOrCreateComponentTView(def);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    const rendererFactory = lView[RENDERER_FACTORY];\n    const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null, null));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[hostTNode.index] = componentView;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n    if (ngDevMode) {\n        assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        validateAgainstEventAttributes(name);\n        assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` +\n            `Host bindings are not valid on ng-container or ng-template.`);\n    }\n    const element = getNativeByTNode(tNode, lView);\n    setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n    if (value == null) {\n        ngDevMode && ngDevMode.rendererRemoveAttribute++;\n        renderer.removeAttribute(element, name, namespace);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererSetAttribute++;\n        const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n        renderer.setAttribute(element, name, strValue, namespace);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs !== null) {\n        const setInput = def.setInput;\n        for (let i = 0; i < initialInputs.length;) {\n            const publicName = initialInputs[i++];\n            const privateName = initialInputs[i++];\n            const value = initialInputs[i++];\n            if (setInput !== null) {\n                def.setInput(instance, value, publicName, privateName);\n            }\n            else {\n                instance[privateName] = value;\n            }\n            if (ngDevMode) {\n                const nativeElement = getNativeByTNode(tNode, lView);\n                setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n            }\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs Input alias map that was generated from the directive def inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n * @param attrs Static attrs on this node.\n */\nfunction generateInitialInputs(inputs, directiveIndex, attrs) {\n    let inputsToStore = null;\n    let i = 0;\n    while (i < attrs.length) {\n        const attrName = attrs[i];\n        if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n            // Skip over the `ngProjectAs` value.\n            i += 2;\n            continue;\n        }\n        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n        if (typeof attrName === 'number')\n            break;\n        if (inputs.hasOwnProperty(attrName)) {\n            if (inputsToStore === null)\n                inputsToStore = [];\n            // Find the input's public name from the input store. Note that we can be found easier\n            // through the directive def, but we want to do it using the inputs store so that it can\n            // account for host directive aliases.\n            const inputConfig = inputs[attrName];\n            for (let j = 0; j < inputConfig.length; j += 2) {\n                if (inputConfig[j] === directiveIndex) {\n                    inputsToStore.push(attrName, inputConfig[j + 1], attrs[i + 1]);\n                    // A directive can't have multiple inputs with the same name so we can break here.\n                    break;\n                }\n            }\n        }\n        i += 2;\n    }\n    return inputsToStore;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n    ngDevMode && assertLView(currentView);\n    const lContainer = [\n        hostNative,\n        true,\n        false,\n        currentView,\n        null,\n        0,\n        tNode,\n        native,\n        null,\n        null, // moved views\n    ];\n    ngDevMode &&\n        assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n    return lContainer;\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction refreshEmbeddedViews(lView) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            const embeddedLView = lContainer[i];\n            const embeddedTView = embeddedLView[TVIEW];\n            ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n            if (viewAttachedToChangeDetector(embeddedLView)) {\n                refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n            }\n        }\n    }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        if (!lContainer[HAS_TRANSPLANTED_VIEWS])\n            continue;\n        const movedViews = lContainer[MOVED_VIEWS];\n        ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n        for (let i = 0; i < movedViews.length; i++) {\n            const movedLView = movedViews[i];\n            const insertionLContainer = movedLView[PARENT];\n            ngDevMode && assertLContainer(insertionLContainer);\n            // We don't want to increment the counter if the moved LView was already marked for\n            // refresh.\n            if ((movedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) === 0) {\n                updateTransplantedViewCount(insertionLContainer, 1);\n            }\n            // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n            // those that aren't (declaration component === insertion component). In the latter case,\n            // it's fine to add the flag, as we will clear it immediately in\n            // `refreshEmbeddedViews` for the view currently being refreshed.\n            movedLView[FLAGS] |= 512 /* LViewFlags.RefreshTransplantedView */;\n        }\n    }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction refreshComponent(hostLView, componentHostIdx) {\n    ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n    // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n    if (viewAttachedToChangeDetector(componentView)) {\n        const tView = componentView[TVIEW];\n        if (componentView[FLAGS] & (16 /* LViewFlags.CheckAlways */ | 32 /* LViewFlags.Dirty */)) {\n            refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n        }\n        else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n            refreshContainsDirtyView(componentView);\n        }\n    }\n}\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\nfunction refreshContainsDirtyView(lView) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            const embeddedLView = lContainer[i];\n            if (viewAttachedToChangeDetector(embeddedLView)) {\n                if (embeddedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n                    const embeddedTView = embeddedLView[TVIEW];\n                    ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n                    refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n                }\n                else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n                    refreshContainsDirtyView(embeddedLView);\n                }\n            }\n        }\n    }\n    const tView = lView[TVIEW];\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n        for (let i = 0; i < components.length; i++) {\n            const componentView = getComponentLViewByIndex(components[i], lView);\n            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n            if (viewAttachedToChangeDetector(componentView) &&\n                componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n                refreshContainsDirtyView(componentView);\n            }\n        }\n    }\n}\nfunction renderComponent(hostLView, componentHostIdx) {\n    ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n    const componentTView = componentView[TVIEW];\n    syncViewWithBlueprint(componentTView, componentView);\n    renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView, lView) {\n    for (let i = lView.length; i < tView.blueprint.length; i++) {\n        lView.push(tView.blueprint[i]);\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n    // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n    // of order, the change detection will run out of order, as the act of retrieving the the\n    // LContainer from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView) {\n    while (lView) {\n        lView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n        const parent = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent) {\n            return lView;\n        }\n        // continue otherwise\n        lView = parent;\n    }\n    return null;\n}\nfunction detectChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n    const rendererFactory = lView[RENDERER_FACTORY];\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\n    // since they were assigned. We do not want to invoke renderer factory functions in that mode\n    // to avoid any possible side-effects.\n    const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n    if (!checkNoChangesMode && rendererFactory.begin)\n        rendererFactory.begin();\n    try {\n        refreshView(tView, lView, tView.template, context);\n    }\n    catch (error) {\n        if (notifyErrorHandler) {\n            handleError(lView, error);\n        }\n        throw error;\n    }\n    finally {\n        if (!checkNoChangesMode && rendererFactory.end)\n            rendererFactory.end();\n    }\n}\nfunction checkNoChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n    setIsInCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(tView, lView, context, notifyErrorHandler);\n    }\n    finally {\n        setIsInCheckNoChangesMode(false);\n    }\n}\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n    ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n    setCurrentQueryIndex(0);\n    viewQueryFn(flags, component);\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n    // Binding meta-data are stored only the first time a given property instruction is processed.\n    // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n    // binding meta-data to decide if one should be stored (or if was stored already).\n    if (tData[bindingIndex] === null) {\n        if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n            const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n            propBindingIdxs.push(bindingIndex);\n            let bindingMetadata = propertyName;\n            if (interpolationParts.length > 0) {\n                bindingMetadata +=\n                    INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n            }\n            tData[bindingIndex] = bindingMetadata;\n        }\n    }\n}\nfunction getOrCreateLViewCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\nfunction getOrCreateTViewCleanup(tView) {\n    return tView.cleanup || (tView.cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n    // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n    // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n    // of creating inner components, when current directive index is available in the state. In order\n    // to avoid relying on current def being `null` (thus special-casing root component creation), the\n    // process of creating root component should be unified with the process of creating inner\n    // components.\n    if (currentDef === null || isComponentDef(currentDef)) {\n        lView = unwrapLView(lView[tNode.index]);\n    }\n    return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleError(lView, error) {\n    const injector = lView[INJECTOR$1];\n    const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nfunction setInputsForProperty(tView, lView, inputs, publicName, value) {\n    for (let i = 0; i < inputs.length;) {\n        const index = inputs[i++];\n        const privateName = inputs[i++];\n        const instance = lView[index];\n        ngDevMode && assertIndexInRange(lView, index);\n        const def = tView.data[index];\n        if (def.setInput !== null) {\n            def.setInput(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView, index, value) {\n    ngDevMode && assertString(value, 'Value should be a string');\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n    ngDevMode && assertIndexInRange(lView, index);\n    const element = getNativeByIndex(index, lView);\n    ngDevMode && assertDefined(element, 'native element should exist');\n    updateTextNode(lView[RENDERER], element, value);\n}\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n    ngDevMode &&\n        assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n    let styles = writeToHost ? tNode.styles : null;\n    let classes = writeToHost ? tNode.classes : null;\n    let mode = 0;\n    if (attrs !== null) {\n        for (let i = 0; i < attrs.length; i++) {\n            const value = attrs[i];\n            if (typeof value === 'number') {\n                mode = value;\n            }\n            else if (mode == 1 /* AttributeMarker.Classes */) {\n                classes = concatStringsWithSpace(classes, value);\n            }\n            else if (mode == 2 /* AttributeMarker.Styles */) {\n                const style = value;\n                const styleValue = attrs[++i];\n                styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n            }\n        }\n    }\n    writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n    writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\n\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n    while (tNode !== null) {\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n        const lNode = lView[tNode.index];\n        if (lNode !== null) {\n            result.push(unwrapRNode(lNode));\n        }\n        // A given lNode can represent either a native node or a LContainer (when it is a host of a\n        // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n        // from the views in this container.\n        if (isLContainer(lNode)) {\n            for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n                const lViewInAContainer = lNode[i];\n                const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n                if (lViewFirstChildTNode !== null) {\n                    collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n                }\n            }\n        }\n        const tNodeType = tNode.type;\n        if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n            collectNativeNodes(tView, lView, tNode.child, result);\n        }\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\n            const nextRNode = icuContainerIterate(tNode, lView);\n            let rNode;\n            while (rNode = nextRNode()) {\n                result.push(rNode);\n            }\n        }\n        else if (tNodeType & 16 /* TNodeType.Projection */) {\n            const nodesInSlot = getProjectionNodes(lView, tNode);\n            if (Array.isArray(nodesInSlot)) {\n                result.push(...nodesInSlot);\n            }\n            else {\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n                ngDevMode && assertParentView(parentView);\n                collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n            }\n        }\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\n    }\n    return result;\n}\n\nclass ViewRef {\n    get rootNodes() {\n        const lView = this._lView;\n        const tView = lView[TVIEW];\n        return collectNativeNodes(tView, lView, tView.firstChild, []);\n    }\n    constructor(\n    /**\n     * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n     *\n     * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n     * component.\n     *\n     * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n     * view.\n     *\n     * @internal\n     */\n    _lView, \n    /**\n     * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n     * requested.\n     *\n     * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n     */\n    _cdRefInjectingView) {\n        this._lView = _lView;\n        this._cdRefInjectingView = _cdRefInjectingView;\n        this._appRef = null;\n        this._attachedToViewContainer = false;\n    }\n    get context() {\n        return this._lView[CONTEXT];\n    }\n    set context(value) {\n        this._lView[CONTEXT] = value;\n    }\n    get destroyed() {\n        return (this._lView[FLAGS] & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */;\n    }\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._attachedToViewContainer) {\n            const parent = this._lView[PARENT];\n            if (isLContainer(parent)) {\n                const viewRefs = parent[VIEW_REFS];\n                const index = viewRefs ? viewRefs.indexOf(this) : -1;\n                if (index > -1) {\n                    ngDevMode &&\n                        assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n                    detachView(parent, index);\n                    removeFromArray(viewRefs, index);\n                }\n            }\n            this._attachedToViewContainer = false;\n        }\n        destroyLView(this._lView[TVIEW], this._lView);\n    }\n    onDestroy(callback) {\n        storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n    }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'app-root',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    markForCheck() {\n        markViewDirty(this._cdRefInjectingView || this._lView);\n    }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    detach() {\n        this._lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n    }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app-root',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    reattach() {\n        this._lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n    }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    detectChanges() {\n        detectChangesInternal(this._lView[TVIEW], this._lView, this.context);\n    }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    checkNoChanges() {\n        if (ngDevMode) {\n            checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);\n        }\n    }\n    attachToViewContainerRef() {\n        if (this._appRef) {\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n        }\n        this._attachedToViewContainer = true;\n    }\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView(this._lView[TVIEW], this._lView);\n    }\n    attachToAppRef(appRef) {\n        if (this._attachedToViewContainer) {\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n}\n/** @internal */\nclass RootViewRef extends ViewRef {\n    constructor(_view) {\n        super(_view);\n        this._view = _view;\n    }\n    detectChanges() {\n        const lView = this._view;\n        const tView = lView[TVIEW];\n        const context = lView[CONTEXT];\n        detectChangesInternal(tView, lView, context, false);\n    }\n    checkNoChanges() {\n        if (ngDevMode) {\n            const lView = this._view;\n            const tView = lView[TVIEW];\n            const context = lView[CONTEXT];\n            checkNoChangesInternal(tView, lView, context, false);\n        }\n    }\n    get context() {\n        return null;\n    }\n}\n\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n    /**\n     * @param ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        const componentDef = getComponentDef$1(component);\n        return new ComponentFactory(componentDef, this.ngModule);\n    }\n}\nfunction toRefArray(map) {\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\nfunction getNamespace(elementName) {\n    const name = elementName.toLowerCase();\n    return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);\n}\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector {\n    constructor(injector, parentInjector) {\n        this.injector = injector;\n        this.parentInjector = parentInjector;\n    }\n    get(token, notFoundValue, flags) {\n        flags = convertToBitFlags(flags);\n        const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            // Return the value from the root element injector when\n            // - it provides it\n            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            // - the module injector should not be checked\n            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            return value;\n        }\n        return this.parentInjector.get(token, notFoundValue, flags);\n    }\n}\n/**\n * ComponentFactory interface implementation.\n */\nclass ComponentFactory extends ComponentFactory$1 {\n    get inputs() {\n        return toRefArray(this.componentDef.inputs);\n    }\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    /**\n     * @param componentDef The component definition.\n     * @param ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        this.selector = stringifyCSSSelectorList(componentDef.selectors);\n        this.ngContentSelectors =\n            componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n        this.isBoundToModule = !!ngModule;\n    }\n    create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {\n        environmentInjector = environmentInjector || this.ngModule;\n        let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ?\n            environmentInjector :\n            environmentInjector?.injector;\n        if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n            realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) ||\n                realEnvironmentInjector;\n        }\n        const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n        const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n        if (rendererFactory === null) {\n            throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode &&\n                'Angular was not able to inject a renderer (RendererFactory2). ' +\n                    'Likely this is due to a broken DI hierarchy. ' +\n                    'Make sure that any injector used to create this component has a correct parent.');\n        }\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n        // Determine a tag name used for creating host elements when this component is created\n        // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n        const elementName = this.componentDef.selectors[0][0] || 'div';\n        const hostRNode = rootSelectorOrNode ?\n            locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :\n            createElementNode(hostRenderer, elementName, getNamespace(elementName));\n        const rootFlags = this.componentDef.onPush ? 32 /* LViewFlags.Dirty */ | 256 /* LViewFlags.IsRoot */ :\n            16 /* LViewFlags.CheckAlways */ | 256 /* LViewFlags.IsRoot */;\n        // Create the root view. Uses empty TView and ContentTemplate.\n        const rootTView = createTView(0 /* TViewType.Root */, null, null, 1, 0, null, null, null, null, null);\n        const rootLView = createLView(null, rootTView, null, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector, null);\n        // rootView is the parent when bootstrapping\n        // TODO(misko): it looks like we are entering view here but we don't really need to as\n        // `renderView` does that. However as the code is written it is needed because\n        // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n        // issues would allow us to drop this.\n        enterView(rootLView);\n        let component;\n        let tElementNode;\n        try {\n            const rootComponentDef = this.componentDef;\n            let rootDirectives;\n            let hostDirectiveDefs = null;\n            if (rootComponentDef.findHostDirectiveDefs) {\n                rootDirectives = [];\n                hostDirectiveDefs = new Map();\n                rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);\n                rootDirectives.push(rootComponentDef);\n            }\n            else {\n                rootDirectives = [rootComponentDef];\n            }\n            const hostTNode = createRootComponentTNode(rootLView, hostRNode);\n            const componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, rendererFactory, hostRenderer);\n            tElementNode = getTNode(rootTView, HEADER_OFFSET);\n            // TODO(crisbeto): in practice `hostRNode` should always be defined, but there are some tests\n            // where the renderer is mocked out and `undefined` is returned. We should update the tests so\n            // that this check can be removed.\n            if (hostRNode) {\n                setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);\n            }\n            if (projectableNodes !== undefined) {\n                projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);\n            renderView(rootTView, rootLView, null);\n        }\n        finally {\n            leaveView();\n        }\n        return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);\n    }\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nclass ComponentRef extends ComponentRef$1 {\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n        this.componentType = componentType;\n    }\n    setInput(name, value) {\n        const inputData = this._tNode.inputs;\n        let dataValue;\n        if (inputData !== null && (dataValue = inputData[name])) {\n            const lView = this._rootLView;\n            setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n            const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);\n            markViewDirty(childComponentLView);\n        }\n        else {\n            if (ngDevMode) {\n                const cmpNameForError = stringifyForError(this.componentType);\n                let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n                message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n                reportUnknownPropertyError(message);\n            }\n        }\n    }\n    get injector() {\n        return new NodeInjector(this._tNode, this._rootLView);\n    }\n    destroy() {\n        this.hostView.destroy();\n    }\n    onDestroy(callback) {\n        this.hostView.onDestroy(callback);\n    }\n}\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nconst NULL_INJECTOR = {\n    get: (token, notFoundValue) => {\n        throwProviderNotFoundError(token, 'NullInjector');\n    }\n};\n/** Creates a TNode that can be used to instantiate a root component. */\nfunction createRootComponentTNode(lView, rNode) {\n    const tView = lView[TVIEW];\n    const index = HEADER_OFFSET;\n    ngDevMode && assertIndexInRange(lView, index);\n    lView[index] = rNode;\n    // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n    // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n    // representing a host element.\n    return getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, '#host', null);\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param rootComponentDef ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(tNode, rNode, rootComponentDef, rootDirectives, rootView, rendererFactory, hostRenderer, sanitizer) {\n    const tView = rootView[TVIEW];\n    applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer);\n    const viewRenderer = rendererFactory.createRenderer(rNode, rootComponentDef);\n    const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, rootComponentDef.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, rootView[tNode.index], tNode, rendererFactory, viewRenderer, sanitizer || null, null, null);\n    if (tView.firstCreatePass) {\n        markAsComponentHost(tView, tNode, rootDirectives.length - 1);\n    }\n    addToViewTree(rootView, componentView);\n    // Store component view at node index, with node as the HOST\n    return rootView[tNode.index] = componentView;\n}\n/** Sets up the styling information on a root component. */\nfunction applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {\n    for (const def of rootDirectives) {\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n    }\n    if (tNode.mergedAttrs !== null) {\n        computeStaticStyling(tNode, tNode.mergedAttrs, true);\n        if (rNode !== null) {\n            setupStaticAttributes(hostRenderer, rNode, tNode);\n        }\n    }\n}\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {\n    const rootTNode = getCurrentTNode();\n    ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n    const tView = rootLView[TVIEW];\n    const native = getNativeByTNode(rootTNode, rootLView);\n    initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);\n    for (let i = 0; i < rootDirectives.length; i++) {\n        const directiveIndex = rootTNode.directiveStart + i;\n        const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);\n        attachPatchData(directiveInstance, rootLView);\n    }\n    invokeDirectivesHostBindings(tView, rootLView, rootTNode);\n    if (native) {\n        attachPatchData(native, rootLView);\n    }\n    // We're guaranteed for the `componentOffset` to be positive here\n    // since a root component always matches a component def.\n    ngDevMode &&\n        assertGreaterThan(rootTNode.componentOffset, -1, 'componentOffset must be great than -1');\n    const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);\n    componentView[CONTEXT] = rootLView[CONTEXT] = component;\n    if (hostFeatures !== null) {\n        for (const feature of hostFeatures) {\n            feature(component, rootComponentDef);\n        }\n    }\n    // We want to generate an empty QueryList for root content queries for backwards\n    // compatibility with ViewEngine.\n    executeContentQueries(tView, rootTNode, componentView);\n    return component;\n}\n/** Sets the static attributes on a root component. */\nfunction setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {\n    if (rootSelectorOrNode) {\n        setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n    }\n    else {\n        // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n        // is not defined), also apply attributes and classes extracted from component selector.\n        // Extract attributes and classes from the first selector only to match VE behavior.\n        const { attrs, classes } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n        if (attrs) {\n            setUpAttributes(hostRenderer, hostRNode, attrs);\n        }\n        if (classes && classes.length > 0) {\n            writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n        }\n    }\n}\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\n    const projection = tNode.projection = [];\n    for (let i = 0; i < ngContentSelectors.length; i++) {\n        const nodesforSlot = projectableNodes[i];\n        // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n        // case). Here we do normalize passed data structure to be an array of arrays to avoid\n        // complex checks down the line.\n        // We also normalize the length of the passed in projectable nodes (to match the number of\n        // <ng-container> slots defined by a component).\n        projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n    }\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nfunction LifecycleHooksFeature() {\n    const tNode = getCurrentTNode();\n    ngDevMode && assertDefined(tNode, 'TNode is required');\n    registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\n\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n    let superType = getSuperType(definition.type);\n    let shouldInheritFields = true;\n    const inheritanceChain = [definition];\n    while (superType) {\n        let superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵcmp || superType.ɵdir;\n        }\n        else {\n            if (superType.ɵcmp) {\n                throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode &&\n                    `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵdir;\n        }\n        if (superDef) {\n            if (shouldInheritFields) {\n                inheritanceChain.push(superDef);\n                // Some fields in the definition may be empty, if there were no values to put in them that\n                // would've justified object creation. Unwrap them if necessary.\n                const writeableDef = definition;\n                writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n                writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n                writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n                // Merge hostBindings\n                const superHostBindings = superDef.hostBindings;\n                superHostBindings && inheritHostBindings(definition, superHostBindings);\n                // Merge queries\n                const superViewQuery = superDef.viewQuery;\n                const superContentQueries = superDef.contentQueries;\n                superViewQuery && inheritViewQuery(definition, superViewQuery);\n                superContentQueries && inheritContentQueries(definition, superContentQueries);\n                // Merge inputs and outputs\n                fillProperties(definition.inputs, superDef.inputs);\n                fillProperties(definition.declaredInputs, superDef.declaredInputs);\n                fillProperties(definition.outputs, superDef.outputs);\n                // Merge animations metadata.\n                // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n                if (isComponentDef(superDef) && superDef.data.animation) {\n                    // If super def is a Component, the `definition` is also a Component, since Directives can\n                    // not inherit Components (we throw an error above and cannot reach this code).\n                    const defData = definition.data;\n                    defData.animation = (defData.animation || []).concat(superDef.data.animation);\n                }\n            }\n            // Run parent features\n            const features = superDef.features;\n            if (features) {\n                for (let i = 0; i < features.length; i++) {\n                    const feature = features[i];\n                    if (feature && feature.ngInherit) {\n                        feature(definition);\n                    }\n                    // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n                    // def already has all the necessary information inherited from its super class(es), so we\n                    // can stop merging fields from super classes. However we need to iterate through the\n                    // prototype chain to look for classes that might contain other \"features\" (like\n                    // NgOnChanges), which we should invoke for the original `definition`. We set the\n                    // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n                    // logic and only invoking functions from the \"features\" list.\n                    if (feature === ɵɵInheritDefinitionFeature) {\n                        shouldInheritFields = false;\n                    }\n                }\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n    mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n    let hostVars = 0;\n    let hostAttrs = null;\n    // We process the inheritance order from the base to the leaves here.\n    for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n        const def = inheritanceChain[i];\n        // For each `hostVars`, we need to add the superclass amount.\n        def.hostVars = (hostVars += def.hostVars);\n        // for each `hostAttrs` we need to merge it with superclass.\n        def.hostAttrs =\n            mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n    }\n}\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n    const prevViewQuery = definition.viewQuery;\n    if (prevViewQuery) {\n        definition.viewQuery = (rf, ctx) => {\n            superViewQuery(rf, ctx);\n            prevViewQuery(rf, ctx);\n        };\n    }\n    else {\n        definition.viewQuery = superViewQuery;\n    }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n    const prevContentQueries = definition.contentQueries;\n    if (prevContentQueries) {\n        definition.contentQueries = (rf, ctx, directiveIndex) => {\n            superContentQueries(rf, ctx, directiveIndex);\n            prevContentQueries(rf, ctx, directiveIndex);\n        };\n    }\n    else {\n        definition.contentQueries = superContentQueries;\n    }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n    const prevHostBindings = definition.hostBindings;\n    if (prevHostBindings) {\n        definition.hostBindings = (rf, ctx) => {\n            superHostBindings(rf, ctx);\n            prevHostBindings(rf, ctx);\n        };\n    }\n    else {\n        definition.hostBindings = superHostBindings;\n    }\n}\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS = [\n    // The child class should use the providers of its parent.\n    'providersResolver',\n    // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n    // as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS = [\n    // The child class should use the template function of its parent, including all template\n    // semantics.\n    'template',\n    'decls',\n    'consts',\n    'vars',\n    'onPush',\n    'ngContentSelectors',\n    // The child class should use the CSS styles of its parent, including all styling semantics.\n    'styles',\n    'encapsulation',\n    // The child class should be checked by the runtime in the same way as its parent.\n    'schemas',\n];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n    let superType = getSuperType(definition.type);\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n        superDef = superType.ɵcmp;\n    }\n    else {\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n        superDef = superType.ɵdir;\n    }\n    // Needed because `definition` fields are readonly.\n    const defAny = definition;\n    // Copy over any fields that apply to either directives or components.\n    for (const field of COPY_DIRECTIVE_FIELDS) {\n        defAny[field] = superDef[field];\n    }\n    if (isComponentDef(superDef)) {\n        // Copy over any component-specific fields.\n        for (const field of COPY_COMPONENT_FIELDS) {\n            defAny[field] = superDef[field];\n        }\n    }\n}\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\n    return (definition) => {\n        definition.findHostDirectiveDefs = findHostDirectiveDefs;\n        definition.hostDirectives =\n            (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map(dir => {\n                return typeof dir === 'function' ?\n                    { directive: resolveForwardRef(dir), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ } :\n                    {\n                        directive: resolveForwardRef(dir.directive),\n                        inputs: bindingArrayToMap(dir.inputs),\n                        outputs: bindingArrayToMap(dir.outputs)\n                    };\n            });\n    };\n}\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\n    if (currentDef.hostDirectives !== null) {\n        for (const hostDirectiveConfig of currentDef.hostDirectives) {\n            const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                validateHostDirective(hostDirectiveConfig, hostDirectiveDef, matchedDefs);\n            }\n            // We need to patch the `declaredInputs` so that\n            // `ngOnChanges` can map the properties correctly.\n            patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);\n            // Host directives execute before the host so that its host bindings can be overwritten.\n            findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n            hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);\n            matchedDefs.push(hostDirectiveDef);\n        }\n    }\n}\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings) {\n    if (bindings === undefined || bindings.length === 0) {\n        return EMPTY_OBJ;\n    }\n    const result = {};\n    for (let i = 0; i < bindings.length; i += 2) {\n        result[bindings[i]] = bindings[i + 1];\n    }\n    return result;\n}\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\n    for (const publicName in exposedInputs) {\n        if (exposedInputs.hasOwnProperty(publicName)) {\n            const remappedPublicName = exposedInputs[publicName];\n            const privateName = declaredInputs[publicName];\n            // We *technically* shouldn't be able to hit this case because we can't have multiple\n            // inputs on the same property and we have validations against conflicting aliases in\n            // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n            // with the wrong name so we have a non-user-friendly assertion here just in case.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                declaredInputs.hasOwnProperty(remappedPublicName)) {\n                assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\n            }\n            declaredInputs[remappedPublicName] = privateName;\n        }\n    }\n}\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n * @param matchedDefs Directives that have been matched so far.\n */\nfunction validateHostDirective(hostDirectiveConfig, directiveDef, matchedDefs) {\n    const type = hostDirectiveConfig.directive;\n    if (directiveDef === null) {\n        if (getComponentDef$1(type) !== null) {\n            throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\n        }\n        throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` +\n            `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n    }\n    if (!directiveDef.standalone) {\n        throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\n    }\n    if (matchedDefs.indexOf(directiveDef) > -1) {\n        throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTITVE */, `Directive ${directiveDef.type.name} matches multiple times on the same element. ` +\n            `Directives can only match an element once.`);\n    }\n    validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n    validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\n    const className = def.type.name;\n    const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n    for (const publicName in hostDirectiveBindings) {\n        if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n            if (!bindings.hasOwnProperty(publicName)) {\n                throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\n            }\n            const remappedPublicName = hostDirectiveBindings[publicName];\n            if (bindings.hasOwnProperty(remappedPublicName) &&\n                bindings[remappedPublicName] !== publicName) {\n                throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\n            }\n        }\n    }\n}\n\nfunction isIterable(obj) {\n    return obj !== null && typeof obj === 'object' && obj[Symbol.iterator] !== undefined;\n}\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            Symbol.iterator in obj); // JS Iterable have a Symbol.iterator prop\n}\nfunction areIterablesEqual(a, b, comparator) {\n    const iterator1 = a[Symbol.iterator]();\n    const iterator2 = b[Symbol.iterator]();\n    while (true) {\n        const item1 = iterator1.next();\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        const iterator = obj[Symbol.iterator]();\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\nfunction devModeEqual(a, b) {\n    const isListLikeIterableA = isListLikeIterable(a);\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return Object.is(a, b);\n        }\n    }\n}\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertIndexInRange(lView, bindingIndex);\n    ngDevMode &&\n        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    const oldValue = lView[bindingIndex];\n    if (Object.is(oldValue, value)) {\n        return false;\n    }\n    else {\n        if (ngDevMode && isInCheckNoChangesMode()) {\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\n            // (before the change detection was run).\n            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n            if (!devModeEqual(oldValueToCompare, value)) {\n                const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n            }\n            // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n            // For this reason we exit as if no change. The early exit is needed to prevent the changed\n            // value to be written into `LView` (If we would write the new value that we would not see it\n            // as change on next CD.)\n            return false;\n        }\n        lView[bindingIndex] = value;\n        return true;\n    }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n    }\n    return ɵɵattribute;\n}\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(lView, values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    let isBindingUpdated = false;\n    let bindingIndex = getBindingIndex();\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n    }\n    setBindingIndex(bindingIndex);\n    if (!isBindingUpdated) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += renderStringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(lView, prefix, v0, suffix) {\n    const different = bindingUpdated(lView, nextBindingIndex(), v0);\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n    incrementBindingIndex(2);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n    incrementBindingIndex(3);\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    incrementBindingIndex(4);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    incrementBindingIndex(5);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    incrementBindingIndex(6);\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    incrementBindingIndex(7);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n        renderStringify(v5) + i5 + renderStringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    incrementBindingIndex(8);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n        renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n        NO_CHANGE;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n    }\n    return ɵɵattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n    }\n    return ɵɵattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n    }\n    return ɵɵattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n    }\n    return ɵɵattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n    }\n    return ɵɵattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n    }\n    return ɵɵattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n    }\n    return ɵɵattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n    }\n    return ɵɵattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n        if (ngDevMode) {\n            const interpolationInBetween = [values[0]]; // prefix\n            for (let i = 2; i < values.length; i += 2) {\n                interpolationInBetween.push(values[i]);\n            }\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n        }\n    }\n    return ɵɵattributeInterpolateV;\n}\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n    const view = getComponentViewByInstance(component);\n    detectChangesInternal(view[TVIEW], view, component);\n}\n\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n    const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, getConstant(tViewConsts, attrsIndex));\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n    registerPostOrderHooks(tView, tNode);\n    const embeddedTView = tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);\n    if (tView.queries !== null) {\n        tView.queries.template(tView, tNode);\n        embeddedTView.queries = tView.queries.embeddedTView(tNode);\n    }\n    return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    setCurrentTNode(tNode, false);\n    const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    appendChild(tView, lView, comment, tNode);\n    attachPatchData(comment, lView);\n    addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n    if (isDirectiveHost(tNode)) {\n        createDirectivesInstances(tView, lView, tNode);\n    }\n    if (localRefsIndex != null) {\n        saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n    }\n}\n\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    if (index >= tView.data.length) {\n        tView.data[index] = null;\n        tView.blueprint[index] = null;\n    }\n    lView[index] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nfunction ɵɵreference(index) {\n    const contextLView = getContextLView();\n    return load(contextLView, HEADER_OFFSET + index);\n}\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n    const inputs = tNode.inputs;\n    const property = isClassBased ? 'class' : 'style';\n    // We support both 'class' and `className` hence the fallback.\n    setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n\nfunction elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    const attrs = getConstant(tViewConsts, attrsIndex);\n    const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n    if (tNode.attrs !== null) {\n        computeStaticStyling(tNode, tNode.attrs, false);\n    }\n    if (tNode.mergedAttrs !== null) {\n        computeStaticStyling(tNode, tNode.mergedAttrs, true);\n    }\n    if (tView.queries !== null) {\n        tView.queries.elementStart(tView, tNode);\n    }\n    return tNode;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = HEADER_OFFSET + index;\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    const renderer = lView[RENDERER];\n    const tNode = tView.firstCreatePass ?\n        elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace$1());\n    const hasDirectives = isDirectiveHost(tNode);\n    if (ngDevMode && tView.firstCreatePass) {\n        validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n    }\n    setCurrentTNode(tNode, true);\n    setupStaticAttributes(renderer, native, tNode);\n    if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n        // In the i18n case, the translation may have removed this element, so only add it if it is not\n        // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n        appendChild(tView, lView, native, tNode);\n    }\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    if (hasDirectives) {\n        createDirectivesInstances(tView, lView, tNode);\n        executeContentQueries(tView, tNode, lView);\n    }\n    if (localRefsIndex !== null) {\n        saveResolvedLocalsInData(lView, tNode);\n    }\n    return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementEnd() {\n    let currentTNode = getCurrentTNode();\n    ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n    if (isCurrentTNodeParent()) {\n        setCurrentTNodeAsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(getCurrentTNode());\n        currentTNode = currentTNode.parent;\n        setCurrentTNode(currentTNode, false);\n    }\n    const tNode = currentTNode;\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    decreaseElementDepthCount();\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        registerPostOrderHooks(tView, currentTNode);\n        if (isContentQueryHost(currentTNode)) {\n            tView.queries.elementEnd(currentTNode);\n        }\n    }\n    if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n    }\n    if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n    }\n    return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n    ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n    ɵɵelementEnd();\n    return ɵɵelement;\n}\n\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    const attrs = getConstant(tViewConsts, attrsIndex);\n    const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\n    // While ng-container doesn't necessarily support styling, we use the style context to identify\n    // and execute directives on the ng-container.\n    if (attrs !== null) {\n        computeStaticStyling(tNode, attrs, true);\n    }\n    const localRefs = getConstant(tViewConsts, localRefsIndex);\n    resolveDirectives(tView, lView, tNode, localRefs);\n    if (tView.queries !== null) {\n        tView.queries.elementStart(tView, tNode);\n    }\n    return tNode;\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n    const tNode = tView.firstCreatePass ?\n        elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    setCurrentTNode(tNode, true);\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    const native = lView[adjustedIndex] =\n        lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n    appendChild(tView, lView, native, tNode);\n    attachPatchData(native, lView);\n    if (isDirectiveHost(tNode)) {\n        createDirectivesInstances(tView, lView, tNode);\n        executeContentQueries(tView, tNode, lView);\n    }\n    if (localRefsIndex != null) {\n        saveResolvedLocalsInData(lView, tNode);\n    }\n    return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerEnd() {\n    let currentTNode = getCurrentTNode();\n    const tView = getTView();\n    if (isCurrentTNodeParent()) {\n        setCurrentTNodeAsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(currentTNode);\n        currentTNode = currentTNode.parent;\n        setCurrentTNode(currentTNode, false);\n    }\n    ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n    if (tView.firstCreatePass) {\n        registerPostOrderHooks(tView, currentTNode);\n        if (isContentQueryHost(currentTNode)) {\n            tView.queries.elementEnd(currentTNode);\n        }\n    }\n    return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n    ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n    ɵɵelementContainerEnd();\n    return ɵɵelementContainer;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nfunction ɵɵgetCurrentView() {\n    return getLView();\n}\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\nfunction isSubscribable(obj) {\n    return !!obj && typeof obj.subscribe === 'function';\n}\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\nconst isObservable = isSubscribable;\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener - this argument is a reminder\n *     from the Renderer3 infrastructure and should be removed from the instruction arguments\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n    const lView = getLView();\n    const tView = getTView();\n    const tNode = getCurrentTNode();\n    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n    return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n    const tNode = getCurrentTNode();\n    const lView = getLView();\n    const tView = getTView();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n    return ɵɵsyntheticHostListener;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIdx) {\n    const tCleanup = tView.cleanup;\n    if (tCleanup != null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            const cleanupEventName = tCleanup[i];\n            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                // We have found a matching event name on the same node but it might not have been\n                // registered yet, so we must explicitly verify entries in the LView cleanup data\n                // structures.\n                const lCleanup = lView[CLEANUP];\n                const listenerIdxInLCleanup = tCleanup[i + 2];\n                return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n            }\n            // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n            // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n            // documentation of TView.cleanup for more details of this data structure layout.\n            if (typeof cleanupEventName === 'string') {\n                i += 2;\n            }\n        }\n    }\n    return null;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\n    const isTNodeDirectiveHost = isDirectiveHost(tNode);\n    const firstCreatePass = tView.firstCreatePass;\n    const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);\n    const context = lView[CONTEXT];\n    // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n    // native listener or a directive output on this element. As such we we know that we will have to\n    // register a listener and store its cleanup function on LView.\n    const lCleanup = getOrCreateLViewCleanup(lView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    let processOutputs = true;\n    // Adding a native event listener is applicable when:\n    // - The corresponding TNode represents a DOM element.\n    // - The event target has a resolver (usually resulting in a global object,\n    //   such as `window` or `document`).\n    if ((tNode.type & 3 /* TNodeType.AnyRNode */) || eventTargetResolver) {\n        const native = getNativeByTNode(tNode, lView);\n        const target = eventTargetResolver ? eventTargetResolver(native) : native;\n        const lCleanupIndex = lCleanup.length;\n        const idxOrTargetGetter = eventTargetResolver ?\n            (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) :\n            tNode.index;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        // There might be cases where multiple directives on the same element try to register an event\n        // handler function for the same event. In this situation we want to avoid registration of\n        // several native listeners as each registration would be intercepted by NgZone and\n        // trigger change detection. This would mean that a single user action would result in several\n        // change detections being invoked. To avoid this situation we want to have only one call to\n        // native handler registration (for the same element and same type of event).\n        //\n        // In order to have just one native event handler in presence of multiple handler functions,\n        // we just register a first handler function as a native event listener and then chain\n        // (coalesce) other handler functions on top of the first native handler function.\n        let existingListener = null;\n        // Please note that the coalescing described here doesn't happen for events specifying an\n        // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n        // view engine.\n        // Also, we don't have to search for existing listeners is there are no directives\n        // matching on a given node as we can't register multiple event handlers for the same event in\n        // a template (this would mean having duplicate attributes).\n        if (!eventTargetResolver && isTNodeDirectiveHost) {\n            existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n        }\n        if (existingListener !== null) {\n            // Attach a new listener to coalesced listeners list, maintaining the order in which\n            // listeners are registered. For performance reasons, we keep a reference to the last\n            // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n            // the entire set each time we need to add a new listener.\n            const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n            lastListenerFn.__ngNextListenerFn__ = listenerFn;\n            existingListener.__ngLastListenerFn__ = listenerFn;\n            processOutputs = false;\n        }\n        else {\n            listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n            const cleanupFn = renderer.listen(target, eventName, listenerFn);\n            ngDevMode && ngDevMode.rendererAddEventListener++;\n            lCleanup.push(listenerFn, cleanupFn);\n            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n        }\n    }\n    else {\n        // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n        // ancestors are marked dirty when an event occurs.\n        listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n    }\n    // subscribe to directive outputs\n    const outputs = tNode.outputs;\n    let props;\n    if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n        const propsLength = props.length;\n        if (propsLength) {\n            for (let i = 0; i < propsLength; i += 2) {\n                const index = props[i];\n                ngDevMode && assertIndexInRange(lView, index);\n                const minifiedName = props[i + 1];\n                const directiveInstance = lView[index];\n                const output = directiveInstance[minifiedName];\n                if (ngDevMode && !isObservable(output)) {\n                    throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n                }\n                const subscription = output.subscribe(listenerFn);\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n    try {\n        profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n        // Only explicitly returning false from a listener should preventDefault\n        return listenerFn(e) !== false;\n    }\n    catch (error) {\n        handleError(lView, error);\n        return false;\n    }\n    finally {\n        profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n    }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {\n    // Note: we are performing most of the work in the listener function itself\n    // to optimize listener registration.\n    return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n        // Ivy uses `Function` as a special token that allows us to unwrap the function\n        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n        if (e === Function) {\n            return listenerFn;\n        }\n        // In order to be backwards compatible with View Engine, events on component host nodes\n        // must also mark the component view itself dirty (i.e. the view that it owns).\n        const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;\n        markViewDirty(startView);\n        let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n        // A just-invoked listener function might have coalesced listeners so we need to check for\n        // their presence and invoke as needed.\n        let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n        while (nextListenerFn) {\n            // We should prevent default if any of the listeners explicitly return false\n            result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n            nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n        }\n        if (wrapWithPreventDefault && result === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n        return result;\n    };\n}\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nfunction ɵɵnextContext(level = 1) {\n    return nextContextImpl(level);\n}\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n    let wildcardNgContentIndex = null;\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < projectionSlots.length; i++) {\n        const slotValue = projectionSlots[i];\n        // The last wildcard projection slot should match all nodes which aren't matching\n        // any selector. This is necessary to be backwards compatible with view engine.\n        if (slotValue === '*') {\n            wildcardNgContentIndex = i;\n            continue;\n        }\n        // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n        // to the list of selectors, otherwise we fall back to matching against the node.\n        if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n            return i; // first matching selector \"captures\" a given node\n        }\n    }\n    return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n    const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n    if (!componentNode.projection) {\n        // If no explicit projection slots are defined, fall back to a single\n        // projection slot with the wildcard selector.\n        const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n        const projectionHeads = componentNode.projection =\n            newArray(numProjectionSlots, null);\n        const tails = projectionHeads.slice();\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n            if (slotIndex !== null) {\n                if (tails[slotIndex]) {\n                    tails[slotIndex].projectionNext = componentChild;\n                }\n                else {\n                    projectionHeads[slotIndex] = componentChild;\n                }\n                tails[slotIndex] = componentChild;\n            }\n            componentChild = componentChild.next;\n        }\n    }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n    const lView = getLView();\n    const tView = getTView();\n    const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setCurrentTNodeAsNotParent();\n    if ((tProjectionNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n        // re-distribution of projectable nodes is stored on a component's view level\n        applyProjection(tView, lView, tProjectionNode);\n    }\n}\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n    ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n    return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n    }\n    return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n    }\n    return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n    }\n    return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n    }\n    return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n    }\n    return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n    }\n    return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n    }\n    return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n    }\n    return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        if (ngDevMode) {\n            const interpolationInBetween = [values[0]]; // prefix\n            for (let i = 2; i < values.length; i += 2) {\n                interpolationInBetween.push(values[i]);\n            }\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n        }\n    }\n    return ɵɵpropertyInterpolateV;\n}\n\nfunction toTStylingRange(prev, next) {\n    ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return (prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */);\n}\nfunction getTStylingRangePrev(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange >> 17 /* StylingRange.PREV_SHIFT */) & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) ==\n        2 /* StylingRange.PREV_DUPLICATE */;\n}\nfunction setTStylingRangePrev(tStylingRange, previous) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return ((tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */) |\n        (previous << 17 /* StylingRange.PREV_SHIFT */));\n}\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */);\n}\nfunction getTStylingRangeNext(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction setTStylingRangeNext(tStylingRange, next) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return ((tStylingRange & ~131068 /* StylingRange.NEXT_MASK */) | //\n        next << 2 /* StylingRange.NEXT_SHIFT */);\n}\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) ===\n        1 /* StylingRange.NEXT_DUPLICATE */;\n}\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */);\n}\nfunction getTStylingRangeTail(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    const next = getTStylingRangeNext(tStylingRange);\n    return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__;\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n    ngDevMode && assertFirstUpdatePass(getTView());\n    let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n    let tmplHead = getTStylingRangePrev(tBindings);\n    let tmplTail = getTStylingRangeNext(tBindings);\n    tData[index] = tStylingKeyWithStatic;\n    let isKeyDuplicateOfStatic = false;\n    let tStylingKey;\n    if (Array.isArray(tStylingKeyWithStatic)) {\n        // We are case when the `TStylingKey` contains static fields as well.\n        const staticKeyValueArray = tStylingKeyWithStatic;\n        tStylingKey = staticKeyValueArray[1]; // unwrap.\n        // We need to check if our key is present in the static so that we can mark it as duplicate.\n        if (tStylingKey === null ||\n            keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n            // tStylingKey is present in the statics, need to mark it as duplicate.\n            isKeyDuplicateOfStatic = true;\n        }\n    }\n    else {\n        tStylingKey = tStylingKeyWithStatic;\n    }\n    if (isHostBinding) {\n        // We are inserting host bindings\n        // If we don't have template bindings then `tail` is 0.\n        const hasTemplateBindings = tmplTail !== 0;\n        // This is important to know because that means that the `head` can't point to the first\n        // template bindings (there are none.) Instead the head points to the tail of the template.\n        if (hasTemplateBindings) {\n            // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n            const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n            tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n            // if a host binding has already been registered, we need to update the next of that host\n            // binding to point to this one\n            if (previousNode !== 0) {\n                // We need to update the template-tail value to point to us.\n                tData[previousNode + 1] =\n                    setTStylingRangeNext(tData[previousNode + 1], index);\n            }\n            // The \"previous\" of the template binding head should point to this host binding\n            tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n        }\n        else {\n            tData[index + 1] = toTStylingRange(tmplHead, 0);\n            // if a host binding has already been registered, we need to update the next of that host\n            // binding to point to this one\n            if (tmplHead !== 0) {\n                // We need to update the template-tail value to point to us.\n                tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n            }\n            // if we don't have template, the head points to template-tail, and needs to be advanced.\n            tmplHead = index;\n        }\n    }\n    else {\n        // We are inserting in template section.\n        // We need to set this binding's \"previous\" to the current template tail\n        tData[index + 1] = toTStylingRange(tmplTail, 0);\n        ngDevMode &&\n            assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n        if (tmplHead === 0) {\n            tmplHead = index;\n        }\n        else {\n            // We need to update the previous value \"next\" to point to this binding\n            tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n        }\n        tmplTail = index;\n    }\n    // Now we need to update / compute the duplicates.\n    // Starting with our location search towards head (least priority)\n    if (isKeyDuplicateOfStatic) {\n        tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n    }\n    markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n    markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n    markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n    tBindings = toTStylingRange(tmplHead, tmplTail);\n    if (isClassBinding) {\n        tNode.classBindings = tBindings;\n    }\n    else {\n        tNode.styleBindings = tBindings;\n    }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n    const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&\n        keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n        // We have duplicate in the residual so mark ourselves as duplicate.\n        tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n    }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {\n    const tStylingAtIndex = tData[index + 1];\n    const isMap = tStylingKey === null;\n    let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n    let foundDuplicate = false;\n    // We keep iterating as long as we have a cursor\n    // AND either:\n    // - we found what we are looking for, OR\n    // - we are a map in which case we have to continue searching even after we find what we were\n    //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n    while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n        ngDevMode && assertIndexInRange(tData, cursor);\n        const tStylingValueAtCursor = tData[cursor];\n        const tStyleRangeAtCursor = tData[cursor + 1];\n        if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n            foundDuplicate = true;\n            tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :\n                setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n        }\n        cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :\n            getTStylingRangeNext(tStyleRangeAtCursor);\n    }\n    if (foundDuplicate) {\n        // if we found a duplicate, than mark ourselves.\n        tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :\n            setTStylingRangeNextDuplicate(tStylingAtIndex);\n    }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n    ngDevMode &&\n        assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n    if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that\n        // location so we must assume that we have a match.\n        tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it\n        // contains a match.\n        (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===\n            tStylingKey // If the keys match explicitly than we are a match.\n    ) {\n        return true;\n    }\n    else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n        // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n        // statics and we need to check those as well.\n        return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=\n            0; // see if we are matching the key\n    }\n    return false;\n}\n\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n    textEnd: 0,\n    key: 0,\n    keyEnd: 0,\n    value: 0,\n    valueEnd: 0,\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedKey(text) {\n    return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedValue(text) {\n    return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassName(text) {\n    resetParserState(text);\n    return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassNameNext(text, index) {\n    const end = parserState.textEnd;\n    if (end === index) {\n        return -1;\n    }\n    index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n    return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyle(text) {\n    resetParserState(text);\n    return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyleNext(text, startIndex) {\n    const end = parserState.textEnd;\n    let index = parserState.key = consumeWhitespace(text, startIndex, end);\n    if (end === index) {\n        // we reached an end so just quit\n        return -1;\n    }\n    index = parserState.keyEnd = consumeStyleKey(text, index, end);\n    index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n    index = parserState.value = consumeWhitespace(text, index, end);\n    index = parserState.valueEnd = consumeStyleValue(text, index, end);\n    return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nfunction resetParserState(text) {\n    parserState.key = 0;\n    parserState.keyEnd = 0;\n    parserState.value = 0;\n    parserState.valueEnd = 0;\n    parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n    while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n    while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n    let ch;\n    while (startIndex < endIndex &&\n        ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ ||\n            ((ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */) ||\n            (ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */))) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n    startIndex = consumeWhitespace(text, startIndex, endIndex);\n    if (startIndex < endIndex) {\n        if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n            malformedStyleError(text, String.fromCharCode(separator), startIndex);\n        }\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n    let ch1 = -1; // 1st previous character\n    let ch2 = -1; // 2nd previous character\n    let ch3 = -1; // 3rd previous character\n    let i = startIndex;\n    let lastChIndex = i;\n    while (i < endIndex) {\n        const ch = text.charCodeAt(i++);\n        if (ch === 59 /* CharCode.SEMI_COLON */) {\n            return lastChIndex;\n        }\n        else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n            lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n        }\n        else if (startIndex ===\n            i - 4 && // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n            ch3 === 85 /* CharCode.U */ &&\n            ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n            lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n        }\n        else if (ch > 32 /* CharCode.SPACE */) {\n            // if we have a non-whitespace character then capture its location\n            lastChIndex = i;\n        }\n        ch3 = ch2;\n        ch2 = ch1;\n        ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n    }\n    return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n    let ch1 = -1; // 1st previous character\n    let index = startIndex;\n    while (index < endIndex) {\n        const ch = text.charCodeAt(index++);\n        if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n            return index;\n        }\n        if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n            // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n            // quotation. (It should not assume that the last `\"` is escaped.)\n            ch1 = 0;\n        }\n        else {\n            ch1 = ch;\n        }\n    }\n    throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) :\n        new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n    ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n    throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' +\n        text.substring(index, index + 1) + '<<]' + text.slice(index + 1) +\n        `'. Expecting '${expecting}'.`);\n}\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n    checkStylingProperty(prop, value, suffix, false);\n    return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵclassProp(className, value) {\n    checkStylingProperty(className, value, null, true);\n    return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleMap(styles) {\n    checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction styleStringParser(keyValueArray, text) {\n    for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n        styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n    }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nfunction ɵɵclassMap(classes) {\n    checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction classStringParser(keyValueArray, text) {\n    for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n        keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n    }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n    const lView = getLView();\n    const tView = getTView();\n    // Styling instructions use 2 slots per binding.\n    // 1. one for the value / TStylingKey\n    // 2. one for the intermittent-value / TStylingRange\n    const bindingIndex = incrementBindingIndex(2);\n    if (tView.firstUpdatePass) {\n        stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n    }\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n        const tNode = tView.data[getSelectedIndex()];\n        updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n    }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n    const tView = getTView();\n    const bindingIndex = incrementBindingIndex(2);\n    if (tView.firstUpdatePass) {\n        stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n    }\n    const lView = getLView();\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n        // if so as not to read unnecessarily.\n        const tNode = tView.data[getSelectedIndex()];\n        if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n            if (ngDevMode) {\n                // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n                // processing this binding in styling resolution.\n                const tStylingKey = tView.data[bindingIndex];\n                assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \\'false\\'');\n            }\n            // VE does not concatenate the static portion like we are doing here.\n            // Instead VE just ignores the static completely if dynamic binding is present.\n            // Because of locality we have already set the static portion because we don't know if there\n            // is a dynamic portion until later. If we would ignore the static portion it would look like\n            // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n            // thing as it would think that the static portion was removed. For this reason we\n            // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n            let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n            ngDevMode && isClassBased === false && staticPrefix !== null &&\n                assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n            if (staticPrefix !== null) {\n                // We want to make sure that falsy values of `value` become empty strings.\n                value = concatStringsWithSpace(staticPrefix, value ? value : '');\n            }\n            // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n            // This takes over the `[style]` binding. (Same for `[class]`)\n            setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n        }\n        else {\n            updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n        }\n    }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView, bindingIndex) {\n    // All host bindings are placed after the expando section.\n    return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n    ngDevMode && assertFirstUpdatePass(tView);\n    const tData = tView.data;\n    if (tData[bindingIndex + 1] === null) {\n        // The above check is necessary because we don't clear first update pass until first successful\n        // (no exception) template execution. This prevents the styling instruction from double adding\n        // itself to the list.\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n        // if so as not to read unnecessarily.\n        const tNode = tData[getSelectedIndex()];\n        ngDevMode && assertDefined(tNode, 'TNode expected');\n        const isHostBindings = isInHostBindings(tView, bindingIndex);\n        if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n            // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n            // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n            // we need to neutralize this binding since that directive is shadowing it.\n            // We turn this into a noop by setting the key to `false`\n            tStylingKey = false;\n        }\n        tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n        insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n    }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n    const hostDirectiveDef = getCurrentDirectiveDef(tData);\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (hostDirectiveDef === null) {\n        // We are in template node.\n        // If template node already had styling instruction then it has already collected the static\n        // styling and there is no need to collect them again. We know that we are the first styling\n        // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n        const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n        if (isFirstStylingInstructionInTemplate) {\n            // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n            // they are already merged and it would not be possible to figure which property belongs where\n            // in the priority.\n            stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n            stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n            // We know that if we have styling binding in template we can't have residual.\n            residual = null;\n        }\n    }\n    else {\n        // We are in host binding node and there was no binding instruction in template node.\n        // This means that we need to compute the residual.\n        const directiveStylingLast = tNode.directiveStylingLast;\n        const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n        if (isFirstStylingInstructionInHostBinding) {\n            stylingKey =\n                collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n            if (residual === null) {\n                // - If `null` than either:\n                //    - Template styling instruction already ran and it has consumed the static\n                //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n                //      we need to update the `TStylingKey` associated with the first template node\n                //      instruction. OR\n                //    - Some other styling instruction ran and determined that there are no residuals\n                let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n                if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n                    // Only recompute if `templateStylingKey` had static values. (If no static value found\n                    // then there is nothing to do since this operation can only produce less static keys, not\n                    // more.)\n                    templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n                    templateStylingKey =\n                        collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n                    setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n                }\n            }\n            else {\n                // We only need to recompute residual if it is not `null`.\n                // - If existing residual (implies there was no template styling). This means that some of\n                //   the statics may have moved from the residual to the `stylingKey` and so we have to\n                //   recompute.\n                // - If `undefined` this is the first time we are running.\n                residual = collectResidual(tData, tNode, isClassBased);\n            }\n        }\n    }\n    if (residual !== undefined) {\n        isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\n    }\n    return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n    if (getTStylingRangeNext(bindings) === 0) {\n        // There does not seem to be a styling instruction in the `template`.\n        return undefined;\n    }\n    return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n    ngDevMode &&\n        assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n    tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n    let residual = undefined;\n    const directiveEnd = tNode.directiveEnd;\n    ngDevMode &&\n        assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n    // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n    // collecting things after the last `hostBindings` directive which had a styling instruction.)\n    for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n        const attrs = tData[i].hostAttrs;\n        residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n    }\n    return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n    // We need to loop because there can be directives which have `hostAttrs` but don't have\n    // `hostBindings` so this loop catches up to the current directive..\n    let currentDirective = null;\n    const directiveEnd = tNode.directiveEnd;\n    let directiveStylingLast = tNode.directiveStylingLast;\n    if (directiveStylingLast === -1) {\n        directiveStylingLast = tNode.directiveStart;\n    }\n    else {\n        directiveStylingLast++;\n    }\n    while (directiveStylingLast < directiveEnd) {\n        currentDirective = tData[directiveStylingLast];\n        ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n        stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n        if (currentDirective === hostDirectiveDef)\n            break;\n        directiveStylingLast++;\n    }\n    if (hostDirectiveDef !== null) {\n        // we only advance the styling cursor if we are collecting data from host bindings.\n        // Template executes before host bindings and so if we would update the index,\n        // host bindings would not get their statics.\n        tNode.directiveStylingLast = directiveStylingLast;\n    }\n    return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n    const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n    let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    if (attrs !== null) {\n        for (let i = 0; i < attrs.length; i++) {\n            const item = attrs[i];\n            if (typeof item === 'number') {\n                currentMarker = item;\n            }\n            else {\n                if (currentMarker === desiredMarker) {\n                    if (!Array.isArray(stylingKey)) {\n                        stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n                    }\n                    keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n                }\n            }\n        }\n    }\n    return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n    if (value == null /*|| value === undefined */ || value === '')\n        return EMPTY_ARRAY;\n    const styleKeyValueArray = [];\n    const unwrappedValue = unwrapSafeValue(value);\n    if (Array.isArray(unwrappedValue)) {\n        for (let i = 0; i < unwrappedValue.length; i++) {\n            keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n        }\n    }\n    else if (typeof unwrappedValue === 'object') {\n        for (const key in unwrappedValue) {\n            if (unwrappedValue.hasOwnProperty(key)) {\n                keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n            }\n        }\n    }\n    else if (typeof unwrappedValue === 'string') {\n        stringParser(styleKeyValueArray, unwrappedValue);\n    }\n    else {\n        ngDevMode &&\n            throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n    }\n    return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n    keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction classKeyValueArraySet(keyValueArray, key, value) {\n    // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n    // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n    // will be added. Stringify the key here so that our internal data structure matches the value in\n    // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n    // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n    const stringKey = String(key);\n    if (stringKey !== '' && !stringKey.includes(' ')) {\n        keyValueArraySet(keyValueArray, stringKey, value);\n    }\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n    if (oldKeyValueArray === NO_CHANGE) {\n        // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n        oldKeyValueArray = EMPTY_ARRAY;\n    }\n    let oldIndex = 0;\n    let newIndex = 0;\n    let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n    let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n    while (oldKey !== null || newKey !== null) {\n        ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n        ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n        const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n        const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n        let setKey = null;\n        let setValue = undefined;\n        if (oldKey === newKey) {\n            // UPDATE: Keys are equal => new value is overwriting old value.\n            oldIndex += 2;\n            newIndex += 2;\n            if (oldValue !== newValue) {\n                setKey = newKey;\n                setValue = newValue;\n            }\n        }\n        else if (newKey === null || oldKey !== null && oldKey < newKey) {\n            // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n            // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n            // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n            // new array.\n            oldIndex += 2;\n            setKey = oldKey;\n        }\n        else {\n            // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n            // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n            // old array.\n            ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n            newIndex += 2;\n            setKey = newKey;\n            setValue = newValue;\n        }\n        if (setKey !== null) {\n            updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n        }\n        oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n        newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n    }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n    if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n        // It is possible to have styling on non-elements (such as ng-container).\n        // This is rare, but it does happen. In such a case, just ignore the binding.\n        return;\n    }\n    const tData = tView.data;\n    const tRange = tData[bindingIndex + 1];\n    const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?\n        findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :\n        undefined;\n    if (!isStylingValuePresent(higherPriorityValue)) {\n        // We don't have a next duplicate, or we did not find a duplicate value.\n        if (!isStylingValuePresent(value)) {\n            // We should delete current value or restore to lower priority value.\n            if (getTStylingRangePrevDuplicate(tRange)) {\n                // We have a possible prev duplicate, let's retrieve it.\n                value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n            }\n        }\n        const rNode = getNativeByIndex(getSelectedIndex(), lView);\n        applyStyling(renderer, isClassBased, rNode, prop, value);\n    }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n    // `TNode` to use for resolving static styling. Also controls search direction.\n    //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n    //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n    //   - `null` search prev and go all the way to end. Return last value where\n    //     `isStylingValuePresent(value)` is true.\n    const isPrevDirection = tNode === null;\n    let value = undefined;\n    while (index > 0) {\n        const rawKey = tData[index];\n        const containsStatics = Array.isArray(rawKey);\n        // Unwrap the key if we contain static values.\n        const key = containsStatics ? rawKey[1] : rawKey;\n        const isStylingMap = key === null;\n        let valueAtLViewIndex = lView[index + 1];\n        if (valueAtLViewIndex === NO_CHANGE) {\n            // In firstUpdatePass the styling instructions create a linked list of styling.\n            // On subsequent passes it is possible for a styling instruction to try to read a binding\n            // which\n            // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n            // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n            // allows the resolution to apply the value (which may later be overwritten when the\n            // binding actually executes.)\n            valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n        }\n        let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :\n            (key === prop ? valueAtLViewIndex : undefined);\n        if (containsStatics && !isStylingValuePresent(currentValue)) {\n            currentValue = keyValueArrayGet(rawKey, prop);\n        }\n        if (isStylingValuePresent(currentValue)) {\n            value = currentValue;\n            if (isPrevDirection) {\n                return value;\n            }\n        }\n        const tRange = tData[index + 1];\n        index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n    }\n    if (tNode !== null) {\n        // in case where we are going in next direction AND we did not find anything, we need to\n        // consult residual styling\n        let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n        if (residual != null /** OR residual !=== undefined */) {\n            value = keyValueArrayGet(residual, prop);\n        }\n    }\n    return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value) {\n    // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n    // have an opinion as to what this binding should be and you should consult other bindings by\n    // priority to determine the valid value.\n    // This is extracted into a single function so that we have a single place to control this.\n    return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value, suffix) {\n    if (value == null || value === '') {\n        // do nothing\n        // Do not add the suffix if the value is going to be empty.\n        // As it produce invalid CSS, which the browsers will automatically omit but Domino will not.\n        // Example: `\"left\": \"px;\"` instead of `\"left\": \"\"`.\n    }\n    else if (typeof suffix === 'string') {\n        value = value + suffix;\n    }\n    else if (typeof value === 'object') {\n        value = stringify(unwrapSafeValue(value));\n    }\n    return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n    return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nfunction ɵɵtext(index, value = '') {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    const tNode = tView.firstCreatePass ?\n        getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) :\n        tView.data[adjustedIndex];\n    const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n    appendChild(tView, lView, textNative, tNode);\n    // Text nodes are self closing.\n    setCurrentTNode(tNode, false);\n}\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate(v0) {\n    ɵɵtextInterpolate1('', v0, '');\n    return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation1(lView, prefix, v0, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵtextInterpolateV(values) {\n    const lView = getLView();\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolateV;\n}\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolateV(values) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolateV(values) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolateV;\n}\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵhostProperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        const currentDef = getCurrentDirectiveDef(tView.data);\n        const renderer = loadComponentRenderer(currentDef, tNode, lView);\n        elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵsyntheticHostProperty;\n}\n\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n    // These property accesses can be ignored because ngI18nClosureMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n    // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n    (function () {\n        // tslint:disable-next-line:no-toplevel-property-access\n        _global$1['ngI18nClosureMode'] =\n            // TODO(FW-1250): validate that this actually, you know, works.\n            // tslint:disable-next-line:no-toplevel-property-access\n            typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n    })();\n}\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n    const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nfunction registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[LocaleDataIndex.LocaleId];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n    }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction findLocaleData(locale) {\n    const normalizedLocale = normalizeLocale(locale);\n    let match = getLocaleData(normalizedLocale);\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    const parentLocale = normalizedLocale.split('-')[0];\n    match = getLocaleData(parentLocale);\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nfunction getLocaleCurrencyCode(locale) {\n    const data = findLocaleData(locale);\n    return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction getLocalePluralCase(locale) {\n    const data = findLocaleData(locale);\n    return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nfunction getLocaleData(normalizedLocale) {\n    if (!(normalizedLocale in LOCALE_DATA)) {\n        LOCALE_DATA[normalizedLocale] = _global$1.ng && _global$1.ng.common && _global$1.ng.common.locales &&\n            _global$1.ng.common.locales[normalizedLocale];\n    }\n    return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nfunction unregisterAllLocaleData() {\n    LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\nvar LocaleDataIndex;\n(function (LocaleDataIndex) {\n    LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n    LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n    LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n    LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n    LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n    LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n    LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n    LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n    LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale) {\n    return locale.toLowerCase().replace(/_/g, '-');\n}\n\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\nfunction getPluralCase(value, locale) {\n    const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n    const result = pluralMapping[plural];\n    return (result !== undefined) ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ELEMENT_MARKER = {\n    marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ICU_MARKER = {\n    marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\nvar I18nCreateOpCode;\n(function (I18nCreateOpCode) {\n    /**\n     * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n     * `COMMENT`.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n    /**\n     * Should the node be appended to parent immediately after creation.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n    /**\n     * If set the node should be comment (rather than a text) node.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd = 1;\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nfunction setLocaleId(localeId) {\n    assertDefined(localeId, `Expected localeId to be defined`);\n    if (typeof localeId === 'string') {\n        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n    }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nfunction getLocaleId() {\n    return LOCALE_ID;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n    const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n    const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n    if (insertBeforeIndex === null) {\n        return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n    }\n    else {\n        ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n        return unwrapRNode(lView[insertBeforeIndex]);\n    }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n    const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n    if (Array.isArray(tNodeInsertBeforeIndex)) {\n        // An array indicates that there are i18n nodes that need to be added as children of this\n        // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n        // only now can be added. The first element of the array is the normal index where we should\n        // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n        // `childRNode`.\n        ngDevMode && assertDomNode(childRNode);\n        let i18nParent = childRNode;\n        let anchorRNode = null;\n        if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n            anchorRNode = i18nParent;\n            i18nParent = parentRElement;\n        }\n        if (i18nParent !== null && childTNode.componentOffset === -1) {\n            for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n                // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n                // see `assertDomNode` below.\n                const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n                nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n            }\n        }\n    }\n}\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n    // Start with Rule1\n    ngDevMode &&\n        assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n    previousTNodes.push(newTNode);\n    if (previousTNodes.length > 1) {\n        for (let i = previousTNodes.length - 2; i >= 0; i--) {\n            const existingTNode = previousTNodes[i];\n            // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n            // It is safe to ignore them.\n            if (!isI18nText(existingTNode)) {\n                if (isNewTNodeCreatedBefore(existingTNode, newTNode) &&\n                    getInsertBeforeIndex(existingTNode) === null) {\n                    // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n                    // then add the `insertBeforeIndex`.\n                    setInsertBeforeIndex(existingTNode, newTNode.index);\n                }\n            }\n        }\n    }\n}\nfunction isI18nText(tNode) {\n    return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n    return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n    const index = tNode.insertBeforeIndex;\n    return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n    const index = tNode.insertBeforeIndex;\n    if (Array.isArray(index)) {\n        // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n        index[0] = value;\n    }\n    else {\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n        tNode.insertBeforeIndex = value;\n    }\n}\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nfunction getTIcu(tView, index) {\n    const value = tView.data[index];\n    if (value === null || typeof value === 'string')\n        return null;\n    if (ngDevMode &&\n        !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n        throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n    }\n    // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n    // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n    // will be just two cases which fits into the browser inline cache (inline cache can take up to\n    // 4)\n    const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value :\n        value.value;\n    ngDevMode && assertTIcu(tIcu);\n    return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nfunction setTIcu(tView, index, tIcu) {\n    const tNode = tView.data[index];\n    ngDevMode &&\n        assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, 'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n    if (tNode === null) {\n        tView.data[index] = tIcu;\n    }\n    else {\n        ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n        tNode.value = tIcu;\n    }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n    ngDevMode && assertTNode(tNode);\n    let insertBeforeIndex = tNode.insertBeforeIndex;\n    if (insertBeforeIndex === null) {\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n        insertBeforeIndex = tNode.insertBeforeIndex =\n            [null /* may be updated to number later */, index];\n    }\n    else {\n        assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n        insertBeforeIndex.push(index);\n    }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n    const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n    addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n    return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n    const currentCase = lView[tIcu.currentCaseLViewIndex];\n    return currentCase === null ? currentCase : (currentCase < 0 ? ~currentCase : currentCase);\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n    return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n    return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n    return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n    ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n    ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n    return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nfunction setMaskBit(hasChange) {\n    if (hasChange) {\n        changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));\n    }\n    changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n    if (changeMaskCounter > 0) {\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        const tI18n = tView.data[index];\n        // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n        const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n        const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n        applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n    }\n    // Reset changeMask & maskBit to default for the next update cycle\n    changeMask = 0b0;\n    changeMaskCounter = 0;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n    const renderer = lView[RENDERER];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        const opCode = createOpCodes[i++];\n        const text = createOpCodes[i];\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\n        let rNode = lView[index];\n        if (rNode === null) {\n            // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n            // case which was already instantiated, no need to create new DOM nodes.\n            rNode = lView[index] =\n                isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n        }\n        if (appendNow && parentRNode !== null) {\n            nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n        }\n    }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n    ngDevMode && assertDomNode(anchorRNode);\n    const renderer = lView[RENDERER];\n    // `rootIdx` represents the node into which all inserts happen.\n    let rootIdx = null;\n    // `rootRNode` represents the real node into which we insert. This can be different from\n    // `lView[rootIdx]` if we have projection.\n    //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n    //    LView which has no parent.)\n    //  - `RElement` The element representing the root after taking projection into account.\n    let rootRNode;\n    for (let i = 0; i < mutableOpCodes.length; i++) {\n        const opCode = mutableOpCodes[i];\n        if (typeof opCode == 'string') {\n            const textNodeIndex = mutableOpCodes[++i];\n            if (lView[textNodeIndex] === null) {\n                ngDevMode && ngDevMode.rendererCreateTextNode++;\n                ngDevMode && assertIndexInRange(lView, textNodeIndex);\n                lView[textNodeIndex] = createTextNode(renderer, opCode);\n            }\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n                case 0 /* IcuCreateOpCode.AppendChild */:\n                    const parentIdx = getParentFromIcuCreateOpCode(opCode);\n                    if (rootIdx === null) {\n                        // The first operation should save the `rootIdx` because the first operation\n                        // must insert into the root. (Only subsequent operations can insert into a dynamic\n                        // parent)\n                        rootIdx = parentIdx;\n                        rootRNode = nativeParentNode(renderer, anchorRNode);\n                    }\n                    let insertInFrontOf;\n                    let parentRNode;\n                    if (parentIdx === rootIdx) {\n                        insertInFrontOf = anchorRNode;\n                        parentRNode = rootRNode;\n                    }\n                    else {\n                        insertInFrontOf = null;\n                        parentRNode = unwrapRNode(lView[parentIdx]);\n                    }\n                    // FIXME(misko): Refactor with `processI18nText`\n                    if (parentRNode !== null) {\n                        // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n                        // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n                        // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n                        // get picked up and added.\n                        ngDevMode && assertDomNode(parentRNode);\n                        const refIdx = getRefFromIcuCreateOpCode(opCode);\n                        ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n                        // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n                        // which can't have components.\n                        const child = lView[refIdx];\n                        ngDevMode && assertDomNode(child);\n                        nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n                        const tIcu = getTIcu(tView, refIdx);\n                        if (tIcu !== null && typeof tIcu === 'object') {\n                            // If we just added a comment node which has ICU then that ICU may have already been\n                            // rendered and therefore we need to re-add it here.\n                            ngDevMode && assertTIcu(tIcu);\n                            const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n                            if (caseIndex !== null) {\n                                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n                            }\n                        }\n                    }\n                    break;\n                case 1 /* IcuCreateOpCode.Attr */:\n                    const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n                    const attrName = mutableOpCodes[++i];\n                    const attrValue = mutableOpCodes[++i];\n                    // This code is used for ICU expressions only, since we don't support\n                    // directives/components in ICUs, we don't need to worry about inputs here\n                    setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n                    break;\n                default:\n                    if (ngDevMode) {\n                        throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n                    }\n            }\n        }\n        else {\n            switch (opCode) {\n                case ICU_MARKER:\n                    const commentValue = mutableOpCodes[++i];\n                    const commentNodeIndex = mutableOpCodes[++i];\n                    if (lView[commentNodeIndex] === null) {\n                        ngDevMode &&\n                            assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                        ngDevMode && ngDevMode.rendererCreateComment++;\n                        ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n                        const commentRNode = lView[commentNodeIndex] =\n                            createCommentNode(renderer, commentValue);\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n                        attachPatchData(commentRNode, lView);\n                    }\n                    break;\n                case ELEMENT_MARKER:\n                    const tagName = mutableOpCodes[++i];\n                    const elementNodeIndex = mutableOpCodes[++i];\n                    if (lView[elementNodeIndex] === null) {\n                        ngDevMode &&\n                            assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n                        ngDevMode && ngDevMode.rendererCreateElement++;\n                        ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n                        const elementRNode = lView[elementNodeIndex] =\n                            createElementNode(renderer, tagName, null);\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n                        attachPatchData(elementRNode, lView);\n                    }\n                    break;\n                default:\n                    ngDevMode &&\n                        throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        const checkBit = updateOpCodes[i];\n        // Number of opCodes to skip until next set of update codes\n        const skipCodes = updateOpCodes[++i];\n        if (checkBit & changeMask) {\n            // The value has been updated since last checked\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // Negative opCode represent `i18nExp` values offset.\n                        value += renderStringify(lView[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        const nodeIndex = (opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */);\n                        switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n                            case 1 /* I18nUpdateOpCode.Attr */:\n                                const propName = updateOpCodes[++j];\n                                const sanitizeFn = updateOpCodes[++j];\n                                const tNodeOrTagName = tView.data[nodeIndex];\n                                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                                if (typeof tNodeOrTagName === 'string') {\n                                    // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                                    // not have TNode), in which case we know that there are no directives, and hence\n                                    // we use attribute setting.\n                                    setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                                }\n                                else {\n                                    elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);\n                                }\n                                break;\n                            case 0 /* I18nUpdateOpCode.Text */:\n                                const rText = lView[nodeIndex];\n                                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                                break;\n                            case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                                break;\n                            case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            const opCode = updateOpCodes[i + 1];\n            if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n                // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n                // we still need to execute `icuUpdateCase` because the case has changed recently due to\n                // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n                // pairs.)\n                const nodeIndex = (opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */);\n                const tIcu = getTIcu(tView, nodeIndex);\n                const currentIndex = lView[tIcu.currentCaseLViewIndex];\n                if (currentIndex < 0) {\n                    applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n    ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n    let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n    if (activeCaseIndex !== null) {\n        let mask = changeMask;\n        if (activeCaseIndex < 0) {\n            // Clear the flag.\n            // Negative number means that the ICU was freshly created and we need to force the update.\n            activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n            // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n            mask = -1;\n        }\n        applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n    }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n    // Rebuild a new case for this ICU\n    const caseIndex = getCaseIndex(tIcu, value);\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n    if (activeCaseIndex !== caseIndex) {\n        applyIcuSwitchCaseRemove(tView, tIcu, lView);\n        lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n        if (caseIndex !== null) {\n            // Add the nodes for the new case\n            const anchorRNode = lView[tIcu.anchorIdx];\n            if (anchorRNode) {\n                ngDevMode && assertDomNode(anchorRNode);\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n            }\n        }\n    }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n    if (activeCaseIndex !== null) {\n        const removeCodes = tIcu.remove[activeCaseIndex];\n        for (let i = 0; i < removeCodes.length; i++) {\n            const nodeOrIcuIndex = removeCodes[i];\n            if (nodeOrIcuIndex > 0) {\n                // Positive numbers are `RNode`s.\n                const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n                rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n            }\n            else {\n                // Negative numbers are ICUs\n                applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n            }\n        }\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* IcuType.plural */: {\n                const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* IcuType.select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index === -1 ? null : index;\n}\n\nfunction loadIcuContainerVisitor() {\n    const _stack = [];\n    let _index = -1;\n    let _lView;\n    let _removes;\n    /**\n     * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n     * to determine which root belong to the ICU.\n     *\n     * Example of usage.\n     * ```\n     * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n     * let rNode: RNode|null;\n     * while(rNode = nextRNode()) {\n     *   console.log(rNode);\n     * }\n     * ```\n     *\n     * @param tIcuContainerNode Current `TIcuContainerNode`\n     * @param lView `LView` where the `RNode`s should be looked up.\n     */\n    function icuContainerIteratorStart(tIcuContainerNode, lView) {\n        _lView = lView;\n        while (_stack.length)\n            _stack.pop();\n        ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n        enterIcu(tIcuContainerNode.value, lView);\n        return icuContainerIteratorNext;\n    }\n    function enterIcu(tIcu, lView) {\n        _index = 0;\n        const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n        if (currentCase !== null) {\n            ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n            _removes = tIcu.remove[currentCase];\n        }\n        else {\n            _removes = EMPTY_ARRAY;\n        }\n    }\n    function icuContainerIteratorNext() {\n        if (_index < _removes.length) {\n            const removeOpCode = _removes[_index++];\n            ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n            if (removeOpCode > 0) {\n                const rNode = _lView[removeOpCode];\n                ngDevMode && assertDomNode(rNode);\n                return rNode;\n            }\n            else {\n                _stack.push(_index, _removes);\n                // ICUs are represented by negative indices\n                const tIcuIndex = ~removeOpCode;\n                const tIcu = _lView[TVIEW].data[tIcuIndex];\n                ngDevMode && assertTIcu(tIcu);\n                enterIcu(tIcu, _lView);\n                return icuContainerIteratorNext();\n            }\n        }\n        else {\n            if (_stack.length === 0) {\n                return null;\n            }\n            else {\n                _removes = _stack.pop();\n                _index = _stack.pop();\n                return icuContainerIteratorNext();\n            }\n        }\n    }\n    return icuContainerIteratorStart;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n    const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n    let lines = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        const opCode = createOpCodes[i++];\n        const text = createOpCodes[i];\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\n        lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n        if (appendNow) {\n            lines.push(`parent.appendChild(lView[${index}]);`);\n        }\n    }\n    return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n    let lines = [];\n    function consumeOpCode(value) {\n        const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n        switch (opCode) {\n            case 0 /* I18nUpdateOpCode.Text */:\n                return `(lView[${ref}] as Text).textContent = $$$`;\n            case 1 /* I18nUpdateOpCode.Attr */:\n                const attrName = parser.consumeString();\n                const sanitizationFn = parser.consumeFunction();\n                const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n                return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n            case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                return `icuSwitchCase(${ref}, $$$)`;\n            case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                return `icuUpdateCase(${ref})`;\n        }\n        throw new Error('unexpected OpCode');\n    }\n    while (parser.hasMore()) {\n        let mask = parser.consumeNumber();\n        let size = parser.consumeNumber();\n        const end = parser.i + size;\n        const statements = [];\n        let statement = '';\n        while (parser.i < end) {\n            let value = parser.consumeNumberOrString();\n            if (typeof value === 'string') {\n                statement += value;\n            }\n            else if (value < 0) {\n                // Negative numbers are ref indexes\n                // Here `i` refers to current binding index. It is to signify that the value is relative,\n                // rather than absolute.\n                statement += '${lView[i' + value + ']}';\n            }\n            else {\n                // Positive numbers are operations.\n                const opCodeText = consumeOpCode(value);\n                statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n                statement = '';\n            }\n        }\n        lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n    }\n    return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction icuCreateOpCodesToString(opcodes) {\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n    let lines = [];\n    function consumeOpCode(opCode) {\n        const parent = getParentFromIcuCreateOpCode(opCode);\n        const ref = getRefFromIcuCreateOpCode(opCode);\n        switch (getInstructionFromIcuCreateOpCode(opCode)) {\n            case 0 /* IcuCreateOpCode.AppendChild */:\n                return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n            case 1 /* IcuCreateOpCode.Attr */:\n                return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n        }\n        throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n    }\n    let lastRef = -1;\n    while (parser.hasMore()) {\n        let value = parser.consumeNumberStringOrMarker();\n        if (value === ICU_MARKER) {\n            const text = parser.consumeString();\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n        }\n        else if (value === ELEMENT_MARKER) {\n            const text = parser.consumeString();\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n        }\n        else if (typeof value === 'string') {\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n        }\n        else if (typeof value === 'number') {\n            const line = consumeOpCode(value);\n            line && lines.push(line);\n        }\n        else {\n            throw new Error('Unexpected value');\n        }\n    }\n    return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n    const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n    let lines = [];\n    for (let i = 0; i < removeCodes.length; i++) {\n        const nodeOrIcuIndex = removeCodes[i];\n        if (nodeOrIcuIndex > 0) {\n            // Positive numbers are `RNode`s.\n            lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n        }\n        else {\n            // Negative numbers are ICUs\n            lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n        }\n    }\n    return lines;\n}\nclass OpCodeParser {\n    constructor(codes) {\n        this.i = 0;\n        this.codes = codes;\n    }\n    hasMore() {\n        return this.i < this.codes.length;\n    }\n    consumeNumber() {\n        let value = this.codes[this.i++];\n        assertNumber(value, 'expecting number in OpCode');\n        return value;\n    }\n    consumeString() {\n        let value = this.codes[this.i++];\n        assertString(value, 'expecting string in OpCode');\n        return value;\n    }\n    consumeFunction() {\n        let value = this.codes[this.i++];\n        if (value === null || typeof value === 'function') {\n            return value;\n        }\n        throw new Error('expecting function in OpCode');\n    }\n    consumeNumberOrString() {\n        let value = this.codes[this.i++];\n        if (typeof value === 'string') {\n            return value;\n        }\n        assertNumber(value, 'expecting number or string in OpCode');\n        return value;\n    }\n    consumeNumberStringOrMarker() {\n        let value = this.codes[this.i++];\n        if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER ||\n            value == ELEMENT_MARKER) {\n            return value;\n        }\n        assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n        return value;\n    }\n}\n\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n    return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter(obj, debugGetter) {\n    if (ngDevMode) {\n        Object.defineProperty(obj, 'debug', { get: debugGetter, enumerable: false });\n    }\n    else {\n        throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n    }\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n    const rootTNode = getCurrentParentTNode();\n    const createOpCodes = [];\n    const updateOpCodes = [];\n    const existingTNodeStack = [[]];\n    if (ngDevMode) {\n        attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    message = getTranslationForTemplate(message, subTemplateIndex);\n    const msgParts = replaceNgsp(message).split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        let value = msgParts[i];\n        if ((i & 1) === 0) {\n            // Even indexes are text (including bindings & ICU expressions)\n            const parts = i18nParseTextIntoPartsAndICU(value);\n            for (let j = 0; j < parts.length; j++) {\n                let part = parts[j];\n                if ((j & 1) === 0) {\n                    // `j` is odd therefore `part` is string\n                    const text = part;\n                    ngDevMode && assertString(text, 'Parsed ICU part should be string');\n                    if (text !== '') {\n                        i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n                    }\n                }\n                else {\n                    // `j` is Even therefor `part` is an `ICUExpression`\n                    const icuExpression = part;\n                    // Verify that ICU expression has the right shape. Translations might contain invalid\n                    // constructions (while original messages were correct), so ICU parsing at runtime may\n                    // not succeed (thus `icuExpression` remains a string).\n                    // Note: we intentionally retain the error here by not using `ngDevMode`, because\n                    // the value can change based on the locale and users aren't guaranteed to hit\n                    // an invalid string while they're developing.\n                    if (typeof icuExpression !== 'object') {\n                        throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n                    }\n                    const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n                    const icuNodeIndex = icuContainerTNode.index;\n                    ngDevMode &&\n                        assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n                    icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n                }\n            }\n        }\n        else {\n            // Odd indexes are placeholders (elements and sub-templates)\n            // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n            const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n            const type = value.charCodeAt(isClosing ? 1 : 0);\n            ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n            const index = HEADER_OFFSET + Number.parseInt(value.substring((isClosing ? 2 : 1)));\n            if (isClosing) {\n                existingTNodeStack.shift();\n                setCurrentTNode(getCurrentParentTNode(), false);\n            }\n            else {\n                const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n                existingTNodeStack.unshift([]);\n                setCurrentTNode(tNode, true);\n            }\n        }\n    }\n    tView.data[index] = {\n        create: createOpCodes,\n        update: updateOpCodes,\n    };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n    const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n    let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n    let parentTNode = getCurrentParentTNode();\n    if (rootTNode === parentTNode) {\n        // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n        // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n        // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n        parentTNode = null;\n    }\n    if (parentTNode === null) {\n        // If we don't have a parent that means that we can eagerly add nodes.\n        // If we have a parent than these nodes can't be added now (as the parent has not been created\n        // yet) and instead the `parentTNode` is responsible for adding it. See\n        // `TNode.insertBeforeIndex`\n        opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n    }\n    if (isICU) {\n        opCode |= I18nCreateOpCode.COMMENT;\n        ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n    }\n    createOpCodes.push(opCode, text === null ? '' : text);\n    // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n    // bindings are.\n    const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? (ngDevMode ? '{{?}}' : '') : text, null);\n    addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n    const tNodeIdx = tNode.index;\n    setCurrentTNode(tNode, false /* Text nodes are self closing */);\n    if (parentTNode !== null && rootTNode !== parentTNode) {\n        // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n        // We have to make sure to add ourselves to the parent.\n        setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n    }\n    return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n    const hasBinding = text.match(BINDING_REGEXP);\n    const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n    if (hasBinding) {\n        generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n    }\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    const previousElement = getCurrentTNode();\n    const previousElementIndex = previousElement.index;\n    const updateOpCodes = [];\n    if (ngDevMode) {\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    if (tView.firstCreatePass && tView.data[index] === null) {\n        for (let i = 0; i < values.length; i += 2) {\n            const attrName = values[i];\n            const message = values[i + 1];\n            if (message !== '') {\n                // Check if attribute value contains an ICU and throw an error if that's the case.\n                // ICUs in element attributes are not supported.\n                // Note: we intentionally retain the error here by not using `ngDevMode`, because\n                // the `value` can change based on the locale and users aren't guaranteed to hit\n                // an invalid string while they're developing.\n                if (ICU_REGEXP.test(message)) {\n                    throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n                }\n                // i18n attributes that hit this code path are guaranteed to have bindings, because\n                // the compiler treats static i18n attributes as regular attribute bindings.\n                // Since this may not be the first i18n attribute on this element we need to pass in how\n                // many previous bindings there have already been.\n                generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n            }\n        }\n        tView.data[index] = updateOpCodes;\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n    ngDevMode &&\n        assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n    const maskIndex = updateOpCodes.length; // Location of mask\n    const sizeIndex = maskIndex + 1; // location of size for skipping\n    updateOpCodes.push(null, null); // Alloc space for mask and size\n    const startIndex = maskIndex + 2; // location of first allocation.\n    if (ngDevMode) {\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    const textParts = str.split(BINDING_REGEXP);\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            const bindingIndex = bindingStart + parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ |\n        (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[maskIndex] = mask;\n    updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n    return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes) {\n    let count = 0;\n    for (let i = 0; i < opCodes.length; i++) {\n        const opCode = opCodes[i];\n        // Bindings are negative numbers.\n        if (typeof opCode === 'number' && opCode < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\nfunction isRootTemplateMessage(subTemplateIndex) {\n    return subTemplateIndex === -1;\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n    let match;\n    let res = '';\n    let index = 0;\n    let inTemplate = false;\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.slice(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (isRootTemplateMessage(subTemplateIndex)) {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n    ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n    let bindingMask = 0;\n    const tIcu = {\n        type: icuExpression.type,\n        currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n        anchorIdx,\n        cases: [],\n        create: [],\n        remove: [],\n        update: []\n    };\n    addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n    setTIcu(tView, anchorIdx, tIcu);\n    const values = icuExpression.values;\n    for (let i = 0; i < values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        const valueArr = values[i];\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                const icuIndex = nestedIcus.push(value) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--�${icuIndex}�-->`;\n            }\n        }\n        bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) |\n            bindingMask;\n    }\n    if (bindingMask) {\n        addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n    }\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n    const cases = [];\n    const values = [];\n    let icuType = 1 /* IcuType.plural */;\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* IcuType.select */;\n        }\n        else {\n            icuType = 1 /* IcuType.plural */;\n        }\n        mainBinding = parseInt(binding.slice(1), 10);\n        return '';\n    });\n    const parts = i18nParseTextIntoPartsAndICU(pattern);\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* IcuType.plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n        if (cases.length > values.length) {\n            values.push(blocks);\n        }\n    }\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    let prevPos = 0;\n    const braceStack = [];\n    const results = [];\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    let match;\n    while (match = braces.exec(pattern)) {\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEXP.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else {\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    const substring = pattern.substring(prevPos);\n    results.push(substring);\n    return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n    const create = [];\n    const remove = [];\n    const update = [];\n    if (ngDevMode) {\n        attachDebugGetter(create, icuCreateOpCodesToString);\n        attachDebugGetter(remove, i18nRemoveOpCodesToString);\n        attachDebugGetter(update, i18nUpdateOpCodesToString);\n    }\n    tIcu.cases.push(caseName);\n    tIcu.create.push(create);\n    tIcu.remove.push(remove);\n    tIcu.update.push(update);\n    const inertBodyHelper = getInertBodyHelper(getDocument());\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n    ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n    const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n    if (inertRootNode) {\n        return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n    }\n    else {\n        return 0;\n    }\n}\nfunction walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n    let bindingMask = 0;\n    let currentNode = parentNode.firstChild;\n    while (currentNode) {\n        const newIndex = allocExpando(tView, lView, 1, null);\n        switch (currentNode.nodeType) {\n            case Node.ELEMENT_NODE:\n                const element = currentNode;\n                const tagName = element.tagName.toLowerCase();\n                if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                    addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n                    tView.data[newIndex] = tagName;\n                    const elAttrs = element.attributes;\n                    for (let i = 0; i < elAttrs.length; i++) {\n                        const attr = elAttrs.item(i);\n                        const lowerAttrName = attr.name.toLowerCase();\n                        const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                        // we assume the input string is safe, unless it's using a binding\n                        if (hasBinding) {\n                            if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                if (URI_ATTRS[lowerAttrName]) {\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                                }\n                                else {\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                                }\n                            }\n                            else {\n                                ngDevMode &&\n                                    console.warn(`WARNING: ignoring unsafe attribute value ` +\n                                        `${lowerAttrName} on element ${tagName} ` +\n                                        `(see ${XSS_SECURITY_URL})`);\n                            }\n                        }\n                        else {\n                            addCreateAttribute(create, newIndex, attr);\n                        }\n                    }\n                    // Parse the children of this node (if any)\n                    bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) |\n                        bindingMask;\n                    addRemoveNode(remove, newIndex, depth);\n                }\n                break;\n            case Node.TEXT_NODE:\n                const value = currentNode.textContent || '';\n                const hasBinding = value.match(BINDING_REGEXP);\n                addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n                addRemoveNode(remove, newIndex, depth);\n                if (hasBinding) {\n                    bindingMask =\n                        generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n                }\n                break;\n            case Node.COMMENT_NODE:\n                // Check if the comment node is a placeholder for a nested ICU\n                const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n                if (isNestedIcu) {\n                    const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n                    const icuExpression = nestedIcus[nestedIcuIndex];\n                    // Create the comment node that will anchor the ICU expression\n                    addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n                    icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n                    addRemoveNestedIcu(remove, newIndex, depth);\n                }\n                break;\n        }\n        currentNode = currentNode.nextSibling;\n    }\n    return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n    if (depth === 0) {\n        remove.push(index);\n    }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n    if (depth === 0) {\n        remove.push(~index); // remove ICU at `index`\n        remove.push(index); // remove ICU comment at `index`\n    }\n}\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n    update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n    update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n    if (marker !== null) {\n        create.push(marker);\n    }\n    create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n    create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction i18nPostprocess(message, replacements = {}) {\n    /**\n     * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n     *\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n     * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n     * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n     * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n     * front of �#6�. The post processing step restores the right order by keeping track of the\n     * template id stack and looks for placeholders that belong to the currently active template.\n     */\n    let result = message;\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n        const matches = {};\n        const templateIdsStack = [ROOT_TEMPLATE_ID];\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n            const content = phs || tmpl;\n            const placeholders = matches[content] || [];\n            if (!placeholders.length) {\n                content.split('|').forEach((placeholder) => {\n                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                });\n                matches[content] = placeholders;\n            }\n            if (!placeholders.length) {\n                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n            }\n            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n            let idx = 0;\n            // find placeholder index that matches current template id\n            for (let i = 0; i < placeholders.length; i++) {\n                if (placeholders[i][0] === currentTemplateId) {\n                    idx = i;\n                    break;\n                }\n            }\n            // update template id stack based on the current tag extracted\n            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n            if (isCloseTemplateTag) {\n                templateIdsStack.pop();\n            }\n            else if (currentTemplateId !== templateId) {\n                templateIdsStack.push(templateId);\n            }\n            // remove processed tag from the list\n            placeholders.splice(idx, 1);\n            return placeholder;\n        });\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    /**\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n     */\n    result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    });\n    /**\n     * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n     */\n    result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n        return replacements.hasOwnProperty(key) ? replacements[key] : match;\n    });\n    /**\n     * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n     * multiple ICUs have the same placeholder name\n     */\n    result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            const list = replacements[key];\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return list.shift();\n        }\n        return match;\n    });\n    return result;\n}\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n    const tView = getTView();\n    const lView = getLView();\n    const adjustedIndex = HEADER_OFFSET + index;\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const message = getConstant(tView.consts, messageIndex);\n    const parentTNode = getCurrentParentTNode();\n    if (tView.firstCreatePass) {\n        i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n    }\n    const tI18n = tView.data[adjustedIndex];\n    const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n    const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n    // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n    // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n    const insertInFrontOf = parentTNode && (parentTNode.type & 8 /* TNodeType.ElementContainer */) ?\n        lView[parentTNode.index] :\n        null;\n    applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n    setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nEnd() {\n    setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n    ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n    ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n    const tView = getTView();\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const attrs = getConstant(tView.consts, attrsIndex);\n    i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵi18nExp(value) {\n    const lView = getLView();\n    setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n    return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nApply(index) {\n    applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n    return i18nPostprocess(message, replacements);\n}\n\n/*\n * This file re-exports all symbols contained in this directory.\n *\n * Why is this file not `index.ts`?\n *\n * There seems to be an inconsistent path resolution of an `index.ts` file\n * when only the parent directory is referenced. This could be due to the\n * node module resolution configuration differing from rollup and/or typescript.\n *\n * With commit\n * https://github.com/angular/angular/commit/d5e3f2c64bd13ce83e7c70788b7fc514ca4a9918\n * the `instructions.ts` file was moved to `instructions/instructions.ts` and an\n * `index.ts` file was used to re-export everything. Having had file names that were\n * importing from `instructions' directly (not the from the sub file or the `index.ts`\n * file) caused strange CI issues. `index.ts` had to be renamed to `all.ts` for this\n * to work.\n *\n * Jira Issue = FW-1184\n */\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        const isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        const tView = getTView();\n        const lView = getLView();\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        let providerFactory = providerToFactory(provider);\n        const tNode = getCurrentTNode();\n        const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n        const endIndex = tNode.directiveStart;\n        const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex === -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex :\n                    existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n                registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex :\n                    existingViewProvidersFactoryIndex, indexInFactory);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n            }\n        }\n    }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n    const providerIsTypeProvider = isTypeProvider(provider);\n    const providerIsClassProvider = isClassProvider(provider);\n    if (providerIsTypeProvider || providerIsClassProvider) {\n        // Resolve forward references as `useClass` can hold a forward reference.\n        const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n        const prototype = classToken.prototype;\n        const ngOnDestroy = prototype.ngOnDestroy;\n        if (ngOnDestroy) {\n            const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n            if (!providerIsTypeProvider && provider.multi) {\n                ngDevMode &&\n                    assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n                const existingCallbacksIndex = hooks.indexOf(contextIndex);\n                if (existingCallbacksIndex === -1) {\n                    hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n                }\n                else {\n                    hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n                }\n            }\n            else {\n                hooks.push(contextIndex, ngOnDestroy);\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    if (isComponentProvider) {\n        multiFactory.componentProviders++;\n    }\n    return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n    const factories = this.multi;\n    let result;\n    if (this.providerFactory) {\n        const componentCount = this.providerFactory.componentProviders;\n        const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        const factory = factories[i];\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n    return (definition) => {\n        definition.providersResolver =\n            (def, processProvidersFn) => {\n                return providersResolver(def, //\n                processProvidersFn ? processProvidersFn(providers) : providers, //\n                viewProviders);\n            };\n    };\n}\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nclass NgModuleRef$1 {\n}\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nclass NgModuleFactory$1 {\n}\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nfunction createNgModule(ngModule, parentInjector) {\n    return new NgModuleRef(ngModule, parentInjector ?? null);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n    constructor(ngModuleType, _parent) {\n        super();\n        this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        this._bootstrapComponents = [];\n        this.destroyCbs = [];\n        // When bootstrapping a module we have a dependency graph that looks like this:\n        // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n        // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n        // circular dependency which will result in a runtime error, because the injector doesn't\n        // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n        // and providing it, rather than letting the injector resolve it.\n        this.componentFactoryResolver = new ComponentFactoryResolver(this);\n        const ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode &&\n            assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n        this._bootstrapComponents = maybeUnwrapFn$1(ngModuleDef.bootstrap);\n        this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [\n            { provide: NgModuleRef$1, useValue: this }, {\n                provide: ComponentFactoryResolver$1,\n                useValue: this.componentFactoryResolver\n            }\n        ], stringify(ngModuleType), new Set(['environment']));\n        // We need to resolve the injector types separately from the injector creation, because\n        // the module might be trying to use this ref in its constructor for DI which will cause a\n        // circular error that will eventually error out, because the injector isn't created yet.\n        this._r3Injector.resolveInjectorInitializers();\n        this.instance = this._r3Injector.get(ngModuleType);\n    }\n    get injector() {\n        return this._r3Injector;\n    }\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        const injector = this._r3Injector;\n        !injector.destroyed && injector.destroy();\n        this.destroyCbs.forEach(fn => fn());\n        this.destroyCbs = null;\n    }\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n    constructor(moduleType) {\n        super();\n        this.moduleType = moduleType;\n    }\n    create(parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector);\n    }\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n    constructor(providers, parent, source) {\n        super();\n        this.componentFactoryResolver = new ComponentFactoryResolver(this);\n        this.instance = null;\n        const injector = new R3Injector([\n            ...providers,\n            { provide: NgModuleRef$1, useValue: this },\n            { provide: ComponentFactoryResolver$1, useValue: this.componentFactoryResolver },\n        ], parent || getNullInjector(), source, new Set(['environment']));\n        this.injector = injector;\n        injector.resolveInjectorInitializers();\n    }\n    destroy() {\n        this.injector.destroy();\n    }\n    onDestroy(callback) {\n        this.injector.onDestroy(callback);\n    }\n}\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n    const adapter = new EnvironmentNgModuleRefAdapter(providers, parent, debugName);\n    return adapter.injector;\n}\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nclass StandaloneService {\n    constructor(_injector) {\n        this._injector = _injector;\n        this.cachedInjectors = new Map();\n    }\n    getOrCreateStandaloneInjector(componentDef) {\n        if (!componentDef.standalone) {\n            return null;\n        }\n        if (!this.cachedInjectors.has(componentDef.id)) {\n            const providers = internalImportProvidersFrom(false, componentDef.type);\n            const standaloneInjector = providers.length > 0 ?\n                createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) :\n                null;\n            this.cachedInjectors.set(componentDef.id, standaloneInjector);\n        }\n        return this.cachedInjectors.get(componentDef.id);\n    }\n    ngOnDestroy() {\n        try {\n            for (const injector of this.cachedInjectors.values()) {\n                if (injector !== null) {\n                    injector.destroy();\n                }\n            }\n        }\n        finally {\n            this.cachedInjectors.clear();\n        }\n    }\n}\n/** @nocollapse */\nStandaloneService.ɵprov = ɵɵdefineInjectable({\n    token: StandaloneService,\n    providedIn: 'environment',\n    factory: () => new StandaloneService(ɵɵinject(EnvironmentInjector)),\n});\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\nfunction ɵɵStandaloneFeature(definition) {\n    definition.getStandaloneInjector = (parentInjector) => {\n        return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n    };\n}\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getComponent(element) {\n    ngDevMode && assertDomElement(element);\n    const context = getLContext(element);\n    if (context === null)\n        return null;\n    if (context.component === undefined) {\n        const lView = context.lView;\n        if (lView === null) {\n            return null;\n        }\n        context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n    }\n    return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getContext(element) {\n    assertDomElement(element);\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getOwningComponent(elementOrDir) {\n    const context = getLContext(elementOrDir);\n    let lView = context ? context.lView : null;\n    if (lView === null)\n        return null;\n    let parent;\n    while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n        lView = parent;\n    }\n    return lView[FLAGS] & 256 /* LViewFlags.IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getRootComponents(elementOrDir) {\n    const lView = readPatchedLView(elementOrDir);\n    return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getInjector(elementOrDir) {\n    const context = getLContext(elementOrDir);\n    const lView = context ? context.lView : null;\n    if (lView === null)\n        return Injector.NULL;\n    const tNode = lView[TVIEW].data[context.nodeIndex];\n    return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nfunction getInjectionTokens(element) {\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    if (lView === null)\n        return [];\n    const tView = lView[TVIEW];\n    const tNode = tView.data[context.nodeIndex];\n    const providerTokens = [];\n    const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveEnd;\n    for (let i = startIndex; i < endIndex; i++) {\n        let value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectives(node) {\n    // Skip text nodes because we can't have directives associated with them.\n    if (node instanceof Text) {\n        return [];\n    }\n    const context = getLContext(node);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n        return [];\n    }\n    const tView = lView[TVIEW];\n    const nodeIndex = context.nodeIndex;\n    if (!tView?.data[nodeIndex]) {\n        return [];\n    }\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n    }\n    // The `directives` in this case are a named array called `LComponentView`. Clone the\n    // result so we don't expose an internal data structure in the user's console.\n    return context.directives === null ? [] : [...context.directives];\n}\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectiveMetadata(directiveOrComponentInstance) {\n    const { constructor } = directiveOrComponentInstance;\n    if (!constructor) {\n        throw new Error('Unable to find the instance constructor');\n    }\n    // In case a component inherits from a directive, we may have component and directive metadata\n    // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n    const componentDef = getComponentDef$1(constructor);\n    if (componentDef) {\n        return {\n            inputs: componentDef.inputs,\n            outputs: componentDef.outputs,\n            encapsulation: componentDef.encapsulation,\n            changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush :\n                ChangeDetectionStrategy.Default\n        };\n    }\n    const directiveDef = getDirectiveDef(constructor);\n    if (directiveDef) {\n        return { inputs: directiveDef.inputs, outputs: directiveDef.outputs };\n    }\n    return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nfunction getLocalRefs(target) {\n    const context = getLContext(target);\n    if (context === null)\n        return {};\n    if (context.localRefs === undefined) {\n        const lView = context.lView;\n        if (lView === null) {\n            return {};\n        }\n        context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getHostElement(componentOrDirective) {\n    return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nfunction getRenderedText(component) {\n    const hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getListeners(element) {\n    ngDevMode && assertDomElement(element);\n    const lContext = getLContext(element);\n    const lView = lContext === null ? null : lContext.lView;\n    if (lView === null)\n        return [];\n    const tView = lView[TVIEW];\n    const lCleanup = lView[CLEANUP];\n    const tCleanup = tView.cleanup;\n    const listeners = [];\n    if (tCleanup && lCleanup) {\n        for (let i = 0; i < tCleanup.length;) {\n            const firstParam = tCleanup[i++];\n            const secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                const name = firstParam;\n                const listenerElement = unwrapRNode(lView[secondParam]);\n                const callback = lCleanup[tCleanup[i++]];\n                const useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                const type = (typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0) ? 'dom' : 'output';\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n                if (element == listenerElement) {\n                    listeners.push({ element, name, callback, useCapture, type });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.declaredInputs !== undefined &&\n        obj.findHostDirectiveDefs !== undefined;\n}\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\nfunction getComponentLView(target) {\n    const lContext = getLContext(target);\n    const nodeIndx = lContext.nodeIndex;\n    const lView = lContext.lView;\n    ngDevMode && assertLView(lView);\n    const componentLView = lView[nodeIndx];\n    ngDevMode && assertLView(componentLView);\n    return componentLView;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n    if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n        throw new Error('Expecting instance of DOM Element');\n    }\n}\n\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    return noSideEffects(() => {\n        const clazz = type;\n        if (decorators !== null) {\n            if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n                clazz.decorators.push(...decorators);\n            }\n            else {\n                clazz.decorators = decorators;\n            }\n        }\n        if (ctorParameters !== null) {\n            // Rather than merging, clobber the existing parameters. If other projects exist which\n            // use tsickle-style annotations and reflect over them in the same way, this could\n            // cause issues, but that is vanishingly unlikely.\n            clazz.ctorParameters = ctorParameters;\n        }\n        if (propDecorators !== null) {\n            // The property decorator objects are merged as it is possible different fields have\n            // different decorator types. Decorators on individual fields are not merged, as it's\n            // also incredibly unlikely that a field will be decorated both with an Angular\n            // decorator and a non-Angular decorator that's also been downleveled.\n            if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n                clazz.propDecorators = { ...clazz.propDecorators, ...propDecorators };\n            }\n            else {\n                clazz.propDecorators = propDecorators;\n            }\n        }\n    });\n}\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    return lView[bindingIndex] === NO_CHANGE ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n    return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n    ngDevMode && assertIndexInRange(lView, returnValueIndex);\n    const lastReturnValue = lView[returnValueIndex];\n    return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n    let bindingIndex = bindingRoot + slotOffset;\n    let different = false;\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nfunction ɵɵpipe(index, pipeName) {\n    const tView = getTView();\n    let pipeDef;\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstCreatePass) {\n        // The `getPipeDef` throws if a pipe with a given name is not found\n        // (so we use non-null assertion below).\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.destroyHooks ?? (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = tView.data[adjustedIndex];\n    }\n    const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n    const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n    try {\n        // DI for pipes is supposed to behave like directives when placed on a component\n        // host node, which means that we have to disable access to `viewProviders`.\n        const previousIncludeViewProviders = setIncludeViewProviders(false);\n        const pipeInstance = pipeFactory();\n        setIncludeViewProviders(previousIncludeViewProviders);\n        store(tView, getLView(), adjustedIndex, pipeInstance);\n        return pipeInstance;\n    }\n    finally {\n        // we have to restore the injector implementation in finally, just in case the creation of the\n        // pipe throws an error.\n        setInjectImplementation(previousInjectImplementation);\n    }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        for (let i = registry.length - 1; i >= 0; i--) {\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    if (ngDevMode) {\n        throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n    }\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name) {\n    const lView = getLView();\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    const hostIsStandalone = isHostComponentStandalone(lView);\n    const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n    const verifyMessage = `Verify that it is ${hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n        'declared or imported in this module'}`;\n    const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n    return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind1(index, slotOffset, v1) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n    return lView[TVIEW].data[index].pure;\n}\n\n/// <reference types=\"rxjs\" />\nclass EventEmitter_ extends Subject {\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    emit(value) {\n        super.next(value);\n    }\n    subscribe(observerOrNext, error, complete) {\n        let nextFn = observerOrNext;\n        let errorFn = error || (() => null);\n        let completeFn = complete;\n        if (observerOrNext && typeof observerOrNext === 'object') {\n            const observer = observerOrNext;\n            nextFn = observer.next?.bind(observer);\n            errorFn = observer.error?.bind(observer);\n            completeFn = observer.complete?.bind(observer);\n        }\n        if (this.__isAsync) {\n            errorFn = _wrapInTimeout(errorFn);\n            if (nextFn) {\n                nextFn = _wrapInTimeout(nextFn);\n            }\n            if (completeFn) {\n                completeFn = _wrapInTimeout(completeFn);\n            }\n        }\n        const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });\n        if (observerOrNext instanceof Subscription) {\n            observerOrNext.add(sink);\n        }\n        return sink;\n    }\n}\nfunction _wrapInTimeout(fn) {\n    return (value) => {\n        setTimeout(fn, undefined, value);\n    };\n}\n/**\n * @publicApi\n */\nconst EventEmitter = EventEmitter_;\n\nfunction symbolIterator() {\n    // @ts-expect-error accessing a private member\n    return this._results[Symbol.iterator]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nclass QueryList {\n    /**\n     * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n     */\n    get changes() {\n        return this._changes || (this._changes = new EventEmitter());\n    }\n    /**\n     * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n     *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n     *     the same result)\n     */\n    constructor(_emitDistinctChangesOnly = false) {\n        this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n        this.dirty = true;\n        this._results = [];\n        this._changesDetected = false;\n        this._changes = null;\n        this.length = 0;\n        this.first = undefined;\n        this.last = undefined;\n        // This function should be declared on the prototype, but doing so there will cause the class\n        // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n        // the constructor.\n        // [Symbol.iterator](): Iterator<T> { ... }\n        const proto = QueryList.prototype;\n        if (!proto[Symbol.iterator])\n            proto[Symbol.iterator] = symbolIterator;\n    }\n    /**\n     * Returns the QueryList entry at `index`.\n     */\n    get(index) {\n        return this._results[index];\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    map(fn) {\n        return this._results.map(fn);\n    }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    forEach(fn) {\n        this._results.forEach(fn);\n    }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * Returns a copy of the internal results list as an Array.\n     */\n    toArray() {\n        return this._results.slice();\n    }\n    toString() {\n        return this._results.toString();\n    }\n    /**\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n     * on change detection, it will not notify of changes to the queries, unless a new change\n     * occurs.\n     *\n     * @param resultsTree The query results to store\n     * @param identityAccessor Optional function for extracting stable object identity from a value\n     *    in the array. This function is executed for each element of the query result list while\n     *    comparing current query list with the new one (provided as a first argument of the `reset`\n     *    function) to detect if the lists are different. If the function is not provided, elements\n     *    are compared as is (without any pre-processing).\n     */\n    reset(resultsTree, identityAccessor) {\n        // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n        // QueryList (but not for QueryList itself.)\n        const self = this;\n        self.dirty = false;\n        const newResultFlat = flatten$1(resultsTree);\n        if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n            self._results = newResultFlat;\n            self.length = newResultFlat.length;\n            self.last = newResultFlat[this.length - 1];\n            self.first = newResultFlat[0];\n        }\n    }\n    /**\n     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n     */\n    notifyOnChanges() {\n        if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly))\n            this._changes.emit(this);\n    }\n    /** internal */\n    setDirty() {\n        this.dirty = true;\n    }\n    /** internal */\n    destroy() {\n        this.changes.complete();\n        this.changes.unsubscribe();\n    }\n}\nSymbol.iterator;\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nclass TemplateRef {\n}\n/**\n * @internal\n * @nocollapse\n */\nTemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;\nconst ViewEngineTemplateRef = TemplateRef;\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {\n    constructor(_declarationLView, _declarationTContainer, elementRef) {\n        super();\n        this._declarationLView = _declarationLView;\n        this._declarationTContainer = _declarationTContainer;\n        this.elementRef = elementRef;\n    }\n    createEmbeddedView(context, injector) {\n        const embeddedTView = this._declarationTContainer.tView;\n        const embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16 /* LViewFlags.CheckAlways */, null, embeddedTView.declTNode, null, null, null, null, injector || null);\n        const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n        ngDevMode && assertLContainer(declarationLContainer);\n        embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n        const declarationViewLQueries = this._declarationLView[QUERIES];\n        if (declarationViewLQueries !== null) {\n            embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n        }\n        renderView(embeddedTView, embeddedLView, context);\n        return new ViewRef(embeddedLView);\n    }\n};\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef() {\n    return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n    if (hostTNode.type & 4 /* TNodeType.Container */) {\n        ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n        return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n    }\n    return null;\n}\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-hierarchy).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nclass ViewContainerRef {\n}\n/**\n * @internal\n * @nocollapse\n */\nViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef() {\n    const previousTNode = getCurrentTNode();\n    return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n    constructor(_lContainer, _hostTNode, _hostLView) {\n        super();\n        this._lContainer = _lContainer;\n        this._hostTNode = _hostTNode;\n        this._hostLView = _hostLView;\n    }\n    get element() {\n        return createElementRef(this._hostTNode, this._hostLView);\n    }\n    get injector() {\n        return new NodeInjector(this._hostTNode, this._hostLView);\n    }\n    /** @deprecated No replacement */\n    get parentInjector() {\n        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n        if (hasParentInjector(parentLocation)) {\n            const parentView = getParentInjectorView(parentLocation, this._hostLView);\n            const injectorIndex = getParentInjectorIndex(parentLocation);\n            ngDevMode && assertNodeInjector(parentView, injectorIndex);\n            const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n            return new NodeInjector(parentTNode, parentView);\n        }\n        else {\n            return new NodeInjector(null, this._hostLView);\n        }\n    }\n    clear() {\n        while (this.length > 0) {\n            this.remove(this.length - 1);\n        }\n    }\n    get(index) {\n        const viewRefs = getViewRefs(this._lContainer);\n        return viewRefs !== null && viewRefs[index] || null;\n    }\n    get length() {\n        return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n    }\n    createEmbeddedView(templateRef, context, indexOrOptions) {\n        let index;\n        let injector;\n        if (typeof indexOrOptions === 'number') {\n            index = indexOrOptions;\n        }\n        else if (indexOrOptions != null) {\n            index = indexOrOptions.index;\n            injector = indexOrOptions.injector;\n        }\n        const viewRef = templateRef.createEmbeddedView(context || {}, injector);\n        this.insert(viewRef, index);\n        return viewRef;\n    }\n    createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {\n        const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n        let index;\n        // This function supports 2 signatures and we need to handle options correctly for both:\n        //   1. When first argument is a Component type. This signature also requires extra\n        //      options to be provided as as object (more ergonomic option).\n        //   2. First argument is a Component factory. In this case extra options are represented as\n        //      positional arguments. This signature is less ergonomic and will be deprecated.\n        if (isComponentFactory) {\n            if (ngDevMode) {\n                assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' +\n                    'and an options object as the second argument. This combination of arguments ' +\n                    'is incompatible. You can either change the first argument to provide Component ' +\n                    'type or change the second argument to be a number (representing an index at ' +\n                    'which to insert the new component\\'s host view into this container)');\n            }\n            index = indexOrOptions;\n        }\n        else {\n            if (ngDevMode) {\n                assertDefined(getComponentDef$1(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` +\n                    `Please check whether provided class has @Component decorator.`);\n                assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' +\n                    'and a number (representing an index at which to insert the new component\\'s ' +\n                    'host view into this container as the second argument. This combination of arguments ' +\n                    'is incompatible. Please use an object as the second argument instead.');\n            }\n            const options = (indexOrOptions || {});\n            if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n                throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n            }\n            index = options.index;\n            injector = options.injector;\n            projectableNodes = options.projectableNodes;\n            environmentInjector = options.environmentInjector || options.ngModuleRef;\n        }\n        const componentFactory = isComponentFactory ?\n            componentFactoryOrType :\n            new ComponentFactory(getComponentDef$1(componentFactoryOrType));\n        const contextInjector = injector || this.parentInjector;\n        // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n        if (!environmentInjector && componentFactory.ngModule == null) {\n            // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n            // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n            // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n            // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n            // using a provided injector first, then fall back to the parent injector of this\n            // `ViewContainerRef` instance.\n            //\n            // For the factory-less case, it's critical to establish a connection with the module\n            // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n            // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n            // rely on the provided injector, since it might be detached from the DI tree (for example, if\n            // it was created via `Injector.create` without specifying a parent injector, or if an\n            // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n            // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n            // injector, which is normally connected to the DI tree, which includes module injector\n            // subtree.\n            const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n            // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n            // undefined` expression which seems to cause internal google apps to fail. This is documented\n            // in the following internal bug issue: go/b/142967802\n            const result = _injector.get(EnvironmentInjector, null);\n            if (result) {\n                environmentInjector = result;\n            }\n        }\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, environmentInjector);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    }\n    insert(viewRef, index) {\n        const lView = viewRef._lView;\n        const tView = lView[TVIEW];\n        if (ngDevMode && viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        if (viewAttachedToContainer(lView)) {\n            // If view is already attached, detach it first so we clean up references appropriately.\n            const prevIdx = this.indexOf(viewRef);\n            // A view might be attached either to this or a different container. The `prevIdx` for\n            // those cases will be:\n            // equal to -1 for views attached to this ViewContainerRef\n            // >= 0 for views attached to a different ViewContainerRef\n            if (prevIdx !== -1) {\n                this.detach(prevIdx);\n            }\n            else {\n                const prevLContainer = lView[PARENT];\n                ngDevMode &&\n                    assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n                // We need to re-create a R3ViewContainerRef instance since those are not stored on\n                // LView (nor anywhere else).\n                const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n                prevVCRef.detach(prevVCRef.indexOf(viewRef));\n            }\n        }\n        // Logical operation of adding `LView` to `LContainer`\n        const adjustedIdx = this._adjustIndex(index);\n        const lContainer = this._lContainer;\n        insertView(tView, lView, lContainer, adjustedIdx);\n        // Physical operation of adding the DOM nodes.\n        const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n        const renderer = lView[RENDERER];\n        const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);\n        if (parentRNode !== null) {\n            addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n        }\n        viewRef.attachToViewContainerRef();\n        addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n        return viewRef;\n    }\n    move(viewRef, newIndex) {\n        if (ngDevMode && viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        return this.insert(viewRef, newIndex);\n    }\n    indexOf(viewRef) {\n        const viewRefsArr = getViewRefs(this._lContainer);\n        return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n    }\n    remove(index) {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        const detachedView = detachView(this._lContainer, adjustedIdx);\n        if (detachedView) {\n            // Before destroying the view, remove it from the container's array of `ViewRef`s.\n            // This ensures the view container length is updated before calling\n            // `destroyLView`, which could recursively call view container methods that\n            // rely on an accurate container length.\n            // (e.g. a method on this view container being called by a child directive's OnDestroy\n            // lifecycle hook)\n            removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n            destroyLView(detachedView[TVIEW], detachedView);\n        }\n    }\n    detach(index) {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        const view = detachView(this._lContainer, adjustedIdx);\n        const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n        return wasDetached ? new ViewRef(view) : null;\n    }\n    _adjustIndex(index, shift = 0) {\n        if (index == null) {\n            return this.length + shift;\n        }\n        if (ngDevMode) {\n            assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n            // +1 because it's legal to insert at the end.\n            assertLessThan(index, this.length + 1 + shift, 'index');\n        }\n        return index;\n    }\n};\nfunction getViewRefs(lContainer) {\n    return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n    return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []));\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(hostTNode, hostLView) {\n    ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n    let lContainer;\n    const slotValue = hostLView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n    }\n    else {\n        let commentNode;\n        // If the host is an element container, the native host element is guaranteed to be a\n        // comment and we can reuse that comment as anchor element for the new LContainer.\n        // The comment node in question is already part of the DOM structure so we don't need to append\n        // it again.\n        if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n            commentNode = unwrapRNode(slotValue);\n        }\n        else {\n            // If the host is a regular element, we have to insert a comment node manually which will\n            // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n            // manipulation to insert it.\n            const renderer = hostLView[RENDERER];\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n            const hostNative = getNativeByTNode(hostTNode, hostLView);\n            const parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);\n        }\n        hostLView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostLView, commentNode, hostTNode);\n        addToViewTree(hostLView, lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n\nclass LQuery_ {\n    constructor(queryList) {\n        this.queryList = queryList;\n        this.matches = null;\n    }\n    clone() {\n        return new LQuery_(this.queryList);\n    }\n    setDirty() {\n        this.queryList.setDirty();\n    }\n}\nclass LQueries_ {\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    createEmbeddedView(tView) {\n        const tQueries = tView.queries;\n        if (tQueries !== null) {\n            const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n            const viewLQueries = [];\n            // An embedded view has queries propagated from a declaration view at the beginning of the\n            // TQueries collection and up until a first content query declared in the embedded view. Only\n            // propagated LQueries are created at this point (LQuery corresponding to declared content\n            // queries will be instantiated from the content query instructions for each directive).\n            for (let i = 0; i < noOfInheritedQueries; i++) {\n                const tQuery = tQueries.getByIndex(i);\n                const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n                viewLQueries.push(parentLQuery.clone());\n            }\n            return new LQueries_(viewLQueries);\n        }\n        return null;\n    }\n    insertView(tView) {\n        this.dirtyQueriesWithMatches(tView);\n    }\n    detachView(tView) {\n        this.dirtyQueriesWithMatches(tView);\n    }\n    dirtyQueriesWithMatches(tView) {\n        for (let i = 0; i < this.queries.length; i++) {\n            if (getTQuery(tView, i).matches !== null) {\n                this.queries[i].setDirty();\n            }\n        }\n    }\n}\nclass TQueryMetadata_ {\n    constructor(predicate, flags, read = null) {\n        this.predicate = predicate;\n        this.flags = flags;\n        this.read = read;\n    }\n}\nclass TQueries_ {\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    elementStart(tView, tNode) {\n        ngDevMode &&\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].elementStart(tView, tNode);\n        }\n    }\n    elementEnd(tNode) {\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].elementEnd(tNode);\n        }\n    }\n    embeddedTView(tNode) {\n        let queriesForTemplateRef = null;\n        for (let i = 0; i < this.length; i++) {\n            const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n            const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n            if (tqueryClone) {\n                tqueryClone.indexInDeclarationView = i;\n                if (queriesForTemplateRef !== null) {\n                    queriesForTemplateRef.push(tqueryClone);\n                }\n                else {\n                    queriesForTemplateRef = [tqueryClone];\n                }\n            }\n        }\n        return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n    }\n    template(tView, tNode) {\n        ngDevMode &&\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].template(tView, tNode);\n        }\n    }\n    getByIndex(index) {\n        ngDevMode && assertIndexInRange(this.queries, index);\n        return this.queries[index];\n    }\n    get length() {\n        return this.queries.length;\n    }\n    track(tquery) {\n        this.queries.push(tquery);\n    }\n}\nclass TQuery_ {\n    constructor(metadata, nodeIndex = -1) {\n        this.metadata = metadata;\n        this.matches = null;\n        this.indexInDeclarationView = -1;\n        this.crossesNgTemplate = false;\n        /**\n         * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n         * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n         * elements in a template.\n         */\n        this._appliesToNextNode = true;\n        this._declarationNodeIndex = nodeIndex;\n    }\n    elementStart(tView, tNode) {\n        if (this.isApplyingToNode(tNode)) {\n            this.matchTNode(tView, tNode);\n        }\n    }\n    elementEnd(tNode) {\n        if (this._declarationNodeIndex === tNode.index) {\n            this._appliesToNextNode = false;\n        }\n    }\n    template(tView, tNode) {\n        this.elementStart(tView, tNode);\n    }\n    embeddedTView(tNode, childQueryIndex) {\n        if (this.isApplyingToNode(tNode)) {\n            this.crossesNgTemplate = true;\n            // A marker indicating a `<ng-template>` element (a placeholder for query results from\n            // embedded views created based on this `<ng-template>`).\n            this.addMatch(-tNode.index, childQueryIndex);\n            return new TQuery_(this.metadata);\n        }\n        return null;\n    }\n    isApplyingToNode(tNode) {\n        if (this._appliesToNextNode &&\n            (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n            const declarationNodeIdx = this._declarationNodeIndex;\n            let parent = tNode.parent;\n            // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n            // declared (only direct children of query's host node can match with the descendants: false\n            // option). There are 3 main use-case / conditions to consider here:\n            // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n            // host node;\n            // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n            // here <i #target> parent node is null;\n            // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n            // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n            // up past the query's host node!).\n            while (parent !== null && (parent.type & 8 /* TNodeType.ElementContainer */) &&\n                parent.index !== declarationNodeIdx) {\n                parent = parent.parent;\n            }\n            return declarationNodeIdx === (parent !== null ? parent.index : -1);\n        }\n        return this._appliesToNextNode;\n    }\n    matchTNode(tView, tNode) {\n        const predicate = this.metadata.predicate;\n        if (Array.isArray(predicate)) {\n            for (let i = 0; i < predicate.length; i++) {\n                const name = predicate[i];\n                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n                // Also try matching the name to a provider since strings can be used as DI tokens too.\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n            }\n        }\n        else {\n            if (predicate === TemplateRef) {\n                if (tNode.type & 4 /* TNodeType.Container */) {\n                    this.matchTNodeWithReadOption(tView, tNode, -1);\n                }\n            }\n            else {\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n            }\n        }\n    }\n    matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n        if (nodeMatchIdx !== null) {\n            const read = this.metadata.read;\n            if (read !== null) {\n                if (read === ElementRef || read === ViewContainerRef ||\n                    read === TemplateRef && (tNode.type & 4 /* TNodeType.Container */)) {\n                    this.addMatch(tNode.index, -2);\n                }\n                else {\n                    const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n                    if (directiveOrProviderIdx !== null) {\n                        this.addMatch(tNode.index, directiveOrProviderIdx);\n                    }\n                }\n            }\n            else {\n                this.addMatch(tNode.index, nodeMatchIdx);\n            }\n        }\n    }\n    addMatch(tNodeIdx, matchIdx) {\n        if (this.matches === null) {\n            this.matches = [tNodeIdx, matchIdx];\n        }\n        else {\n            this.matches.push(tNodeIdx, matchIdx);\n        }\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    const localNames = tNode.localNames;\n    if (localNames !== null) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return localNames[i + 1];\n            }\n        }\n    }\n    return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n    if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n        return createElementRef(tNode, currentView);\n    }\n    else if (tNode.type & 4 /* TNodeType.Container */) {\n        return createTemplateRef(tNode, currentView);\n    }\n    return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n    if (matchingIdx === -1) {\n        // if read token and / or strategy is not specified, detect it using appropriate tNode type\n        return createResultByTNodeType(tNode, lView);\n    }\n    else if (matchingIdx === -2) {\n        // read a special token from a node injector\n        return createSpecialToken(lView, tNode, read);\n    }\n    else {\n        // read a token\n        return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n    }\n}\nfunction createSpecialToken(lView, tNode, read) {\n    if (read === ElementRef) {\n        return createElementRef(tNode, lView);\n    }\n    else if (read === TemplateRef) {\n        return createTemplateRef(tNode, lView);\n    }\n    else if (read === ViewContainerRef) {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n        return createContainerRef(tNode, lView);\n    }\n    else {\n        ngDevMode &&\n            throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n    }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n    const lQuery = lView[QUERIES].queries[queryIndex];\n    if (lQuery.matches === null) {\n        const tViewData = tView.data;\n        const tQueryMatches = tQuery.matches;\n        const result = [];\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            const matchedNodeIdx = tQueryMatches[i];\n            if (matchedNodeIdx < 0) {\n                // we at the <ng-template> marker which might have results in views created based on this\n                // <ng-template> - those results will be in separate views though, so here we just leave\n                // null as a placeholder\n                result.push(null);\n            }\n            else {\n                ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n                const tNode = tViewData[matchedNodeIdx];\n                result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n            }\n        }\n        lQuery.matches = result;\n    }\n    return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n    const tQuery = tView.queries.getByIndex(queryIndex);\n    const tQueryMatches = tQuery.matches;\n    if (tQueryMatches !== null) {\n        const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            const tNodeIdx = tQueryMatches[i];\n            if (tNodeIdx > 0) {\n                result.push(lViewResults[i / 2]);\n            }\n            else {\n                const childQueryIndex = tQueryMatches[i + 1];\n                const declarationLContainer = lView[-tNodeIdx];\n                ngDevMode && assertLContainer(declarationLContainer);\n                // collect matches for views inserted in this container\n                for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n                    const embeddedLView = declarationLContainer[i];\n                    if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n                    }\n                }\n                // collect matches for views created from this declaration container and inserted into\n                // different containers\n                if (declarationLContainer[MOVED_VIEWS] !== null) {\n                    const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n                    for (let i = 0; i < embeddedLViews.length; i++) {\n                        const embeddedLView = embeddedLViews[i];\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nfunction ɵɵqueryRefresh(queryList) {\n    const lView = getLView();\n    const tView = getTView();\n    const queryIndex = getCurrentQueryIndex();\n    setCurrentQueryIndex(queryIndex + 1);\n    const tQuery = getTQuery(tView, queryIndex);\n    if (queryList.dirty &&\n        (isCreationMode(lView) ===\n            ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */))) {\n        if (tQuery.matches === null) {\n            queryList.reset([]);\n        }\n        else {\n            const result = tQuery.crossesNgTemplate ?\n                collectQueryResults(tView, lView, queryIndex, []) :\n                materializeViewResults(tView, lView, tQuery, queryIndex);\n            queryList.reset(result, unwrapElementRef);\n            queryList.notifyOnChanges();\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n    ngDevMode && assertNumber(flags, 'Expecting flags');\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n            tView.staticViewQueries = true;\n        }\n    }\n    createLQuery(tView, getLView(), flags);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n    ngDevMode && assertNumber(flags, 'Expecting flags');\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        const tNode = getCurrentTNode();\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n        saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n            tView.staticContentQueries = true;\n        }\n    }\n    createLQuery(tView, getLView(), flags);\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nfunction ɵɵloadQuery() {\n    return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\nfunction loadQueryInternal(lView, queryIndex) {\n    ngDevMode &&\n        assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n    ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n    return lView[QUERIES].queries[queryIndex].queryList;\n}\nfunction createLQuery(tView, lView, flags) {\n    const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n    storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n    if (lView[QUERIES] === null)\n        lView[QUERIES] = new LQueries_();\n    lView[QUERIES].queries.push(new LQuery_(queryList));\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n    if (tView.queries === null)\n        tView.queries = new TQueries_();\n    tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n    const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n    if (directiveIndex !== lastSavedDirectiveIndex) {\n        tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n    }\n}\nfunction getTQuery(tView, index) {\n    ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n    return tView.queries.getByIndex(index);\n}\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n    return createTemplateRef(tNode, lView);\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreEnv = (() => ({\n    'ɵɵattribute': ɵɵattribute,\n    'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n    'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n    'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n    'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n    'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n    'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n    'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n    'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n    'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n    'ɵɵdefineComponent': ɵɵdefineComponent,\n    'ɵɵdefineDirective': ɵɵdefineDirective,\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵdefineNgModule': ɵɵdefineNgModule,\n    'ɵɵdefinePipe': ɵɵdefinePipe,\n    'ɵɵdirectiveInject': ɵɵdirectiveInject,\n    'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵinjectAttribute': ɵɵinjectAttribute,\n    'ɵɵinvalidFactory': ɵɵinvalidFactory,\n    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n    'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n    'ɵɵresetView': ɵɵresetView,\n    'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\n    'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n    'ɵɵProvidersFeature': ɵɵProvidersFeature,\n    'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n    'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n    'ɵɵStandaloneFeature': ɵɵStandaloneFeature,\n    'ɵɵnextContext': ɵɵnextContext,\n    'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n    'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n    'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n    'ɵɵenableBindings': ɵɵenableBindings,\n    'ɵɵdisableBindings': ɵɵdisableBindings,\n    'ɵɵelementStart': ɵɵelementStart,\n    'ɵɵelementEnd': ɵɵelementEnd,\n    'ɵɵelement': ɵɵelement,\n    'ɵɵelementContainerStart': ɵɵelementContainerStart,\n    'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n    'ɵɵelementContainer': ɵɵelementContainer,\n    'ɵɵpureFunction0': ɵɵpureFunction0,\n    'ɵɵpureFunction1': ɵɵpureFunction1,\n    'ɵɵpureFunction2': ɵɵpureFunction2,\n    'ɵɵpureFunction3': ɵɵpureFunction3,\n    'ɵɵpureFunction4': ɵɵpureFunction4,\n    'ɵɵpureFunction5': ɵɵpureFunction5,\n    'ɵɵpureFunction6': ɵɵpureFunction6,\n    'ɵɵpureFunction7': ɵɵpureFunction7,\n    'ɵɵpureFunction8': ɵɵpureFunction8,\n    'ɵɵpureFunctionV': ɵɵpureFunctionV,\n    'ɵɵgetCurrentView': ɵɵgetCurrentView,\n    'ɵɵrestoreView': ɵɵrestoreView,\n    'ɵɵlistener': ɵɵlistener,\n    'ɵɵprojection': ɵɵprojection,\n    'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n    'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n    'ɵɵpipeBind1': ɵɵpipeBind1,\n    'ɵɵpipeBind2': ɵɵpipeBind2,\n    'ɵɵpipeBind3': ɵɵpipeBind3,\n    'ɵɵpipeBind4': ɵɵpipeBind4,\n    'ɵɵpipeBindV': ɵɵpipeBindV,\n    'ɵɵprojectionDef': ɵɵprojectionDef,\n    'ɵɵhostProperty': ɵɵhostProperty,\n    'ɵɵproperty': ɵɵproperty,\n    'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n    'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n    'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n    'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n    'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n    'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n    'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n    'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n    'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n    'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n    'ɵɵpipe': ɵɵpipe,\n    'ɵɵqueryRefresh': ɵɵqueryRefresh,\n    'ɵɵviewQuery': ɵɵviewQuery,\n    'ɵɵloadQuery': ɵɵloadQuery,\n    'ɵɵcontentQuery': ɵɵcontentQuery,\n    'ɵɵreference': ɵɵreference,\n    'ɵɵclassMap': ɵɵclassMap,\n    'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n    'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n    'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n    'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n    'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n    'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n    'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n    'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n    'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n    'ɵɵstyleMap': ɵɵstyleMap,\n    'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,\n    'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,\n    'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,\n    'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,\n    'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,\n    'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,\n    'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,\n    'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,\n    'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,\n    'ɵɵstyleProp': ɵɵstyleProp,\n    'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n    'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n    'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n    'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n    'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n    'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n    'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n    'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n    'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n    'ɵɵclassProp': ɵɵclassProp,\n    'ɵɵadvance': ɵɵadvance,\n    'ɵɵtemplate': ɵɵtemplate,\n    'ɵɵtext': ɵɵtext,\n    'ɵɵtextInterpolate': ɵɵtextInterpolate,\n    'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n    'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n    'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n    'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n    'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n    'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n    'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n    'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n    'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n    'ɵɵi18n': ɵɵi18n,\n    'ɵɵi18nAttributes': ɵɵi18nAttributes,\n    'ɵɵi18nExp': ɵɵi18nExp,\n    'ɵɵi18nStart': ɵɵi18nStart,\n    'ɵɵi18nEnd': ɵɵi18nEnd,\n    'ɵɵi18nApply': ɵɵi18nApply,\n    'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n    'ɵɵresolveWindow': ɵɵresolveWindow,\n    'ɵɵresolveDocument': ɵɵresolveDocument,\n    'ɵɵresolveBody': ɵɵresolveBody,\n    'ɵɵsetComponentScope': ɵɵsetComponentScope,\n    'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n    'ɵɵregisterNgModuleType': registerNgModuleType,\n    'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n    'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n    'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n    'ɵɵsanitizeScript': ɵɵsanitizeScript,\n    'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n    'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n    'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n    'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n    'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\n    'forwardRef': forwardRef,\n    'resolveForwardRef': resolveForwardRef,\n}))();\n\nfunction patchModuleCompilation() {\n    // Does nothing, but exists as a target for patching.\n}\n\nfunction isModuleWithProviders$1(value) {\n    return value.ngModule !== undefined;\n}\nfunction isNgModule$1(value) {\n    return !!getNgModuleDef(value);\n}\n\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n    patchModuleCompilation();\n    compileNgModuleDefs(moduleType, ngModule);\n    if (ngModule.id !== undefined) {\n        registerNgModuleType(moduleType, ngModule.id);\n    }\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n    let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MOD_DEF, {\n        configurable: true,\n        get: () => {\n            if (ngModuleDef === null) {\n                if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n                    // We need to assert this immediately, because allowing it to continue will cause it to\n                    // go into an infinite loop before we've reached the point where we throw all the errors.\n                    throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n                }\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n                    type: moduleType,\n                    bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten$1(ngModule.imports || EMPTY_ARRAY)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten$1(ngModule.exports || EMPTY_ARRAY)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    schemas: ngModule.schemas ? flatten$1(ngModule.schemas) : null,\n                    id: ngModule.id || null,\n                });\n                // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n                // should verify that there are no unknown elements in a template. In AOT mode, that check\n                // happens at compile time and `schemas` information is not present on Component and Module\n                // defs after compilation (so the check doesn't happen the second time at runtime).\n                if (!ngModuleDef.schemas) {\n                    ngModuleDef.schemas = [];\n                }\n            }\n            return ngModuleDef;\n        }\n    });\n    let ngFactoryDef = null;\n    Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n        get: () => {\n            if (ngFactoryDef === null) {\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    target: compiler.FactoryTarget.NgModule,\n                    typeArgumentCount: 0,\n                });\n            }\n            return ngFactoryDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJ_DEF, {\n        get: () => {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    providers: ngModule.providers || EMPTY_ARRAY,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),\n                    ],\n                };\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngInjectorDef =\n                    compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n    const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n    const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` +\n        'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n    return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    // skip verifications of standalone components, directives, and pipes\n    if (isStandalone(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    let ngModuleDef;\n    if (importingModule) {\n        ngModuleDef = getNgModuleDef(moduleType);\n        if (!ngModuleDef) {\n            throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n    else {\n        ngModuleDef = getNgModuleDef(moduleType, true);\n    }\n    const errors = [];\n    const declarations = maybeUnwrapFn$1(ngModuleDef.declarations);\n    const imports = maybeUnwrapFn$1(ngModuleDef.imports);\n    flatten$1(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n        verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n        verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n    });\n    const exports = maybeUnwrapFn$1(ngModuleDef.exports);\n    declarations.forEach(verifyDeclarationsHaveDefinitions);\n    declarations.forEach(verifyDirectivesHaveSelector);\n    declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));\n    const combinedDeclarations = [\n        ...declarations.map(resolveForwardRef),\n        ...flatten$1(imports.map(computeCombinedExports)).map(resolveForwardRef),\n    ];\n    exports.forEach(verifyExportsAreDeclaredOrReExported);\n    declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n    declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten$1(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n                verifySemanticsOfNgModuleImport(mod, moduleType);\n                verifySemanticsOfNgModuleDef(mod, false, moduleType);\n            });\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents &&\n            deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n        if (!def) {\n            errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    function verifyDirectivesHaveSelector(type) {\n        type = resolveForwardRef(type);\n        const def = getDirectiveDef(type);\n        if (!getComponentDef$1(type) && def && def.selectors.length == 0) {\n            errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n        }\n    }\n    function verifyNotStandalone(type, moduleType) {\n        type = resolveForwardRef(type);\n        const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n        if (def?.standalone) {\n            const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n            errors.push(generateStandaloneInDeclarationsError(type, location));\n        }\n    }\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        const kind = getComponentDef$1(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef$1(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    function verifyDeclarationIsUnique(type, suppressErrors) {\n        type = resolveForwardRef(type);\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            if (!suppressErrors) {\n                const modules = [existingModule, moduleType].map(stringifyForError).sort();\n                errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                    `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                    `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n            }\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule && !isStandalone(type)) {\n            errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    function verifyCorrectBootstrapType(type) {\n        type = resolveForwardRef(type);\n        if (!getComponentDef$1(type)) {\n            errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n        }\n        if (isStandalone(type)) {\n            // Note: this error should be the same as the\n            // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n            errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` +\n                `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` +\n                `function for bootstrap instead.`);\n        }\n    }\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef$1(type)) {\n            // We know we are component\n            const component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n    function verifySemanticsOfNgModuleImport(type, importingModule) {\n        type = resolveForwardRef(type);\n        const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n        if (directiveDef !== null && !directiveDef.standalone) {\n            throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n        const pipeDef = getPipeDef$1(type);\n        if (pipeDef !== null && !pipeDef.standalone) {\n            throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = decorator;\n            }\n            else if (decorator.type) {\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\nfunction resetCompiledComponents() {\n    ownerNgModule = new WeakMap();\n    verifiedNgModule = new WeakMap();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    const ngModuleDef = getNgModuleDef(type);\n    // a standalone component, directive or pipe\n    if (ngModuleDef === null) {\n        return [type];\n    }\n    return [...flatten$1(maybeUnwrapFn$1(ngModuleDef.exports).map((type) => {\n            const ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef(type, false);\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(declaration => {\n        declaration = resolveForwardRef(declaration);\n        if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n            // A `ɵcmp` field exists - go ahead and patch the component directly.\n            const component = declaration;\n            const componentDef = getComponentDef$1(component);\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            declaration.ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)\n        .map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef$1(dir) : getDirectiveDef(dir))\n        .filter(def => !!def);\n    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n    componentDef.schemas = transitiveScopes.schemas;\n    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n    // may face a problem where previously compiled defs available to a given Component/Directive\n    // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n    // order to avoid this problem, we force fresh TView to be created.\n    componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nfunction transitiveScopesFor(type) {\n    if (isNgModule$1(type)) {\n        return transitiveScopesForNgModule(type);\n    }\n    else if (isStandalone(type)) {\n        const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n        if (directiveDef !== null) {\n            return {\n                schemas: null,\n                compilation: {\n                    directives: new Set(),\n                    pipes: new Set(),\n                },\n                exported: {\n                    directives: new Set([type]),\n                    pipes: new Set(),\n                },\n            };\n        }\n        const pipeDef = getPipeDef$1(type);\n        if (pipeDef !== null) {\n            return {\n                schemas: null,\n                compilation: {\n                    directives: new Set(),\n                    pipes: new Set(),\n                },\n                exported: {\n                    directives: new Set(),\n                    pipes: new Set([type]),\n                },\n            };\n        }\n    }\n    // TODO: change the error message to be more user-facing and take standalone into account\n    throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nfunction transitiveScopesForNgModule(moduleType) {\n    const def = getNgModuleDef(moduleType, true);\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    const scopes = {\n        schemas: def.schemas || null,\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    maybeUnwrapFn$1(def.imports).forEach((imported) => {\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        const importedScope = transitiveScopesFor(imported);\n        importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n        importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n    });\n    maybeUnwrapFn$1(def.declarations).forEach(declared => {\n        const declaredWithDefs = declared;\n        if (getPipeDef$1(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    maybeUnwrapFn$1(def.exports).forEach((exported) => {\n        const exportedType = exported;\n        // Either the type is a module, a pipe, or a component/directive (which may not have a\n        // ɵcmp as it might be compiled asynchronously).\n        if (isNgModule$1(exportedType)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            const exportedScope = transitiveScopesFor(exportedType);\n            exportedScope.exported.directives.forEach(entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getPipeDef$1(exportedType)) {\n            scopes.exported.pipes.add(exportedType);\n        }\n        else {\n            scopes.exported.directives.add(exportedType);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders$1(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n\nlet _nextReferenceId = 0;\nclass MetadataOverrider {\n    constructor() {\n        this._references = new Map();\n    }\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    overrideMetadata(metadataClass, oldMetadata, override) {\n        const props = {};\n        if (oldMetadata) {\n            _valueProps(oldMetadata).forEach((prop) => props[prop] = oldMetadata[prop]);\n        }\n        if (override.set) {\n            if (override.remove || override.add) {\n                throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n            }\n            setMetadata(props, override.set);\n        }\n        if (override.remove) {\n            removeMetadata(props, override.remove, this._references);\n        }\n        if (override.add) {\n            addMetadata(props, override.add);\n        }\n        return new metadataClass(props);\n    }\n}\nfunction removeMetadata(metadata, remove, references) {\n    const removeObjects = new Set();\n    for (const prop in remove) {\n        const removeValue = remove[prop];\n        if (Array.isArray(removeValue)) {\n            removeValue.forEach((value) => {\n                removeObjects.add(_propHashKey(prop, value, references));\n            });\n        }\n        else {\n            removeObjects.add(_propHashKey(prop, removeValue, references));\n        }\n    }\n    for (const prop in metadata) {\n        const propValue = metadata[prop];\n        if (Array.isArray(propValue)) {\n            metadata[prop] = propValue.filter((value) => !removeObjects.has(_propHashKey(prop, value, references)));\n        }\n        else {\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                metadata[prop] = undefined;\n            }\n        }\n    }\n}\nfunction addMetadata(metadata, add) {\n    for (const prop in add) {\n        const addValue = add[prop];\n        const propValue = metadata[prop];\n        if (propValue != null && Array.isArray(propValue)) {\n            metadata[prop] = propValue.concat(addValue);\n        }\n        else {\n            metadata[prop] = addValue;\n        }\n    }\n}\nfunction setMetadata(metadata, set) {\n    for (const prop in set) {\n        metadata[prop] = set[prop];\n    }\n}\nfunction _propHashKey(propName, propValue, references) {\n    let nextObjectId = 0;\n    const objectIds = new Map();\n    const replacer = (key, value) => {\n        if (value !== null && typeof value === 'object') {\n            if (objectIds.has(value)) {\n                return objectIds.get(value);\n            }\n            // Record an id for this object such that any later references use the object's id instead\n            // of the object itself, in order to break cyclic pointers in objects.\n            objectIds.set(value, `ɵobj#${nextObjectId++}`);\n            // The first time an object is seen the object itself is serialized.\n            return value;\n        }\n        else if (typeof value === 'function') {\n            value = _serializeReference(value, references);\n        }\n        return value;\n    };\n    return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\nfunction _serializeReference(ref, references) {\n    let id = references.get(ref);\n    if (!id) {\n        id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n        references.set(ref, id);\n    }\n    return id;\n}\nfunction _valueProps(obj) {\n    const props = [];\n    // regular public props\n    Object.keys(obj).forEach((prop) => {\n        if (!prop.startsWith('_')) {\n            props.push(prop);\n        }\n    });\n    // getters\n    let proto = obj;\n    while (proto = Object.getPrototypeOf(proto)) {\n        Object.keys(proto).forEach((protoProp) => {\n            const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                props.push(protoProp);\n            }\n        });\n    }\n    return props;\n}\n\nconst reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nclass OverrideResolver {\n    constructor() {\n        this.overrides = new Map();\n        this.resolved = new Map();\n    }\n    addOverride(type, override) {\n        const overrides = this.overrides.get(type) || [];\n        overrides.push(override);\n        this.overrides.set(type, overrides);\n        this.resolved.delete(type);\n    }\n    setOverrides(overrides) {\n        this.overrides.clear();\n        overrides.forEach(([type, override]) => {\n            this.addOverride(type, override);\n        });\n    }\n    getAnnotation(type) {\n        const annotations = reflection.annotations(type);\n        // Try to find the nearest known Type annotation and make sure that this annotation is an\n        // instance of the type we are looking for, so we can use it for resolution. Note: there might\n        // be multiple known annotations found due to the fact that Components can extend Directives (so\n        // both Directive and Component annotations would be present), so we always check if the known\n        // annotation has the right type.\n        for (let i = annotations.length - 1; i >= 0; i--) {\n            const annotation = annotations[i];\n            const isKnownType = annotation instanceof Directive || annotation instanceof Component ||\n                annotation instanceof Pipe || annotation instanceof NgModule;\n            if (isKnownType) {\n                return annotation instanceof this.type ? annotation : null;\n            }\n        }\n        return null;\n    }\n    resolve(type) {\n        let resolved = this.resolved.get(type) || null;\n        if (!resolved) {\n            resolved = this.getAnnotation(type);\n            if (resolved) {\n                const overrides = this.overrides.get(type);\n                if (overrides) {\n                    const overrider = new MetadataOverrider();\n                    overrides.forEach(override => {\n                        resolved = overrider.overrideMetadata(this.type, resolved, override);\n                    });\n                }\n            }\n            this.resolved.set(type, resolved);\n        }\n        return resolved;\n    }\n}\nclass DirectiveResolver extends OverrideResolver {\n    get type() {\n        return Directive;\n    }\n}\nclass ComponentResolver extends OverrideResolver {\n    get type() {\n        return Component;\n    }\n}\nclass PipeResolver extends OverrideResolver {\n    get type() {\n        return Pipe;\n    }\n}\nclass NgModuleResolver extends OverrideResolver {\n    get type() {\n        return NgModule;\n    }\n}\n\nvar TestingModuleOverride;\n(function (TestingModuleOverride) {\n    TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\nfunction isTestingModuleOverride(value) {\n    return value === TestingModuleOverride.DECLARATION ||\n        value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\nfunction assertNoStandaloneComponents(types, resolver, location) {\n    types.forEach(type => {\n        const component = resolver.resolve(type);\n        if (component && component.standalone) {\n            throw new Error(generateStandaloneInDeclarationsError(type, location));\n        }\n    });\n}\nclass TestBedCompiler {\n    constructor(platform, additionalModuleTypes) {\n        this.platform = platform;\n        this.additionalModuleTypes = additionalModuleTypes;\n        this.originalComponentResolutionQueue = null;\n        // Testing module configuration\n        this.declarations = [];\n        this.imports = [];\n        this.providers = [];\n        this.schemas = [];\n        // Queues of components/directives/pipes that should be recompiled.\n        this.pendingComponents = new Set();\n        this.pendingDirectives = new Set();\n        this.pendingPipes = new Set();\n        // Keep track of all components and directives, so we can patch Providers onto defs later.\n        this.seenComponents = new Set();\n        this.seenDirectives = new Set();\n        // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n        this.overriddenModules = new Set();\n        // Store resolved styles for Components that have template overrides present and `styleUrls`\n        // defined at the same time.\n        this.existingComponentStyles = new Map();\n        this.resolvers = initResolvers();\n        this.componentToModuleScope = new Map();\n        // Map that keeps initial version of component/directive/pipe defs in case\n        // we compile a Type again, thus overriding respective static fields. This is\n        // required to make sure we restore defs to their initial states between test runs.\n        // Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of an\n        // NgModule), store all of them in a map.\n        this.initialNgDefs = new Map();\n        // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n        // defs in case TestBed makes changes to the originals.\n        this.defCleanupOps = [];\n        this._injector = null;\n        this.compilerProviders = null;\n        this.providerOverrides = [];\n        this.rootProviderOverrides = [];\n        // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n        // module's provider list.\n        this.providerOverridesByModule = new Map();\n        this.providerOverridesByToken = new Map();\n        this.scopesWithOverriddenProviders = new Set();\n        this.testModuleRef = null;\n        class DynamicTestModule {\n        }\n        this.testModuleType = DynamicTestModule;\n    }\n    setCompilerProviders(providers) {\n        this.compilerProviders = providers;\n        this._injector = null;\n    }\n    configureTestingModule(moduleDef) {\n        // Enqueue any compilation tasks for the directly declared component.\n        if (moduleDef.declarations !== undefined) {\n            // Verify that there are no standalone components\n            assertNoStandaloneComponents(moduleDef.declarations, this.resolvers.component, '\"TestBed.configureTestingModule\" call');\n            this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n            this.declarations.push(...moduleDef.declarations);\n        }\n        // Enqueue any compilation tasks for imported modules.\n        if (moduleDef.imports !== undefined) {\n            this.queueTypesFromModulesArray(moduleDef.imports);\n            this.imports.push(...moduleDef.imports);\n        }\n        if (moduleDef.providers !== undefined) {\n            this.providers.push(...moduleDef.providers);\n        }\n        if (moduleDef.schemas !== undefined) {\n            this.schemas.push(...moduleDef.schemas);\n        }\n    }\n    overrideModule(ngModule, override) {\n        this.overriddenModules.add(ngModule);\n        // Compile the module right away.\n        this.resolvers.module.addOverride(ngModule, override);\n        const metadata = this.resolvers.module.resolve(ngModule);\n        if (metadata === null) {\n            throw invalidTypeError(ngModule.name, 'NgModule');\n        }\n        this.recompileNgModule(ngModule, metadata);\n        // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n        // new declarations or imported modules. Ingest any possible new types and add them to the\n        // current queue.\n        this.queueTypesFromModulesArray([ngModule]);\n    }\n    overrideComponent(component, override) {\n        this.verifyNoStandaloneFlagOverrides(component, override);\n        this.resolvers.component.addOverride(component, override);\n        this.pendingComponents.add(component);\n    }\n    overrideDirective(directive, override) {\n        this.verifyNoStandaloneFlagOverrides(directive, override);\n        this.resolvers.directive.addOverride(directive, override);\n        this.pendingDirectives.add(directive);\n    }\n    overridePipe(pipe, override) {\n        this.verifyNoStandaloneFlagOverrides(pipe, override);\n        this.resolvers.pipe.addOverride(pipe, override);\n        this.pendingPipes.add(pipe);\n    }\n    verifyNoStandaloneFlagOverrides(type, override) {\n        if (override.add?.hasOwnProperty('standalone') || override.set?.hasOwnProperty('standalone') ||\n            override.remove?.hasOwnProperty('standalone')) {\n            throw new Error(`An override for the ${type.name} class has the \\`standalone\\` flag. ` +\n                `Changing the \\`standalone\\` flag via TestBed overrides is not supported.`);\n        }\n    }\n    overrideProvider(token, provider) {\n        let providerDef;\n        if (provider.useFactory !== undefined) {\n            providerDef = {\n                provide: token,\n                useFactory: provider.useFactory,\n                deps: provider.deps || [],\n                multi: provider.multi\n            };\n        }\n        else if (provider.useValue !== undefined) {\n            providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\n        }\n        else {\n            providerDef = { provide: token };\n        }\n        const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n        const providedIn = injectableDef === null ? null : resolveForwardRef$1(injectableDef.providedIn);\n        const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\n        overridesBucket.push(providerDef);\n        // Keep overrides grouped by token as well for fast lookups using token\n        this.providerOverridesByToken.set(token, providerDef);\n        if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\n            const existingOverrides = this.providerOverridesByModule.get(providedIn);\n            if (existingOverrides !== undefined) {\n                existingOverrides.push(providerDef);\n            }\n            else {\n                this.providerOverridesByModule.set(providedIn, [providerDef]);\n            }\n        }\n    }\n    overrideTemplateUsingTestingModule(type, template) {\n        const def = type[ɵNG_COMP_DEF];\n        const hasStyleUrls = () => {\n            const metadata = this.resolvers.component.resolve(type);\n            return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n        };\n        const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n        // In Ivy, compiling a component does not require knowing the module providing the\n        // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n        // overrideComponent. Important: overriding template requires full Component re-compilation,\n        // which may fail in case styleUrls are also present (thus Component is considered as required\n        // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n        // preserve current styles available on Component def and restore styles back once compilation\n        // is complete.\n        const override = overrideStyleUrls ? { template, styles: [], styleUrls: [] } : { template };\n        this.overrideComponent(type, { set: override });\n        if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n            this.existingComponentStyles.set(type, def.styles);\n        }\n        // Set the component's scope to be the testing module.\n        this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n    }\n    async compileComponents() {\n        this.clearComponentResolutionQueue();\n        // Run compilers for all queued types.\n        let needsAsyncResources = this.compileTypesSync();\n        // compileComponents() should not be async unless it needs to be.\n        if (needsAsyncResources) {\n            let resourceLoader;\n            let resolver = (url) => {\n                if (!resourceLoader) {\n                    resourceLoader = this.injector.get(ResourceLoader);\n                }\n                return Promise.resolve(resourceLoader.get(url));\n            };\n            await resolveComponentResources(resolver);\n        }\n    }\n    finalize() {\n        // One last compile\n        this.compileTypesSync();\n        // Create the testing module itself.\n        this.compileTestModule();\n        this.applyTransitiveScopes();\n        this.applyProviderOverrides();\n        // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n        // Components have `styleUrls` fields defined and template override was requested.\n        this.patchComponentsWithExistingStyles();\n        // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n        // every component.\n        this.componentToModuleScope.clear();\n        const parentInjector = this.platform.injector;\n        this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core.\n        // Cast it to any before accessing it.\n        this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\n        // Set locale ID after running app initializers, since locale information might be updated while\n        // running initializers. This is also consistent with the execution order while bootstrapping an\n        // app (see `packages/core/src/application_ref.ts` file).\n        const localeId = this.testModuleRef.injector.get(LOCALE_ID$1, ɵDEFAULT_LOCALE_ID);\n        ɵsetLocaleId(localeId);\n        return this.testModuleRef;\n    }\n    /**\n     * @internal\n     */\n    _compileNgModuleSync(moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        this.compileTypesSync();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesInScope(moduleType);\n        this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n    async _compileNgModuleAsync(moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        await this.compileComponents();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesInScope(moduleType);\n        this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n    _getModuleResolver() {\n        return this.resolvers.module;\n    }\n    /**\n     * @internal\n     */\n    _getComponentFactories(moduleType) {\n        return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n            const componentDef = declaration.ɵcmp;\n            componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n            return factories;\n        }, []);\n    }\n    compileTypesSync() {\n        // Compile all queued components, directives, pipes.\n        let needsAsyncResources = false;\n        this.pendingComponents.forEach(declaration => {\n            needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n            const metadata = this.resolvers.component.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Component');\n            }\n            this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n            ɵcompileComponent(declaration, metadata);\n        });\n        this.pendingComponents.clear();\n        this.pendingDirectives.forEach(declaration => {\n            const metadata = this.resolvers.directive.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Directive');\n            }\n            this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n            ɵcompileDirective(declaration, metadata);\n        });\n        this.pendingDirectives.clear();\n        this.pendingPipes.forEach(declaration => {\n            const metadata = this.resolvers.pipe.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Pipe');\n            }\n            this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n            ɵcompilePipe(declaration, metadata);\n        });\n        this.pendingPipes.clear();\n        return needsAsyncResources;\n    }\n    applyTransitiveScopes() {\n        if (this.overriddenModules.size > 0) {\n            // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n            // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n            // collect all affected modules and reset scopes to force their re-calculation.\n            const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n            const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n            if (affectedModules.size > 0) {\n                affectedModules.forEach(moduleType => {\n                    this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n                    moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n                });\n            }\n        }\n        const moduleToScope = new Map();\n        const getScopeOfModule = (moduleType) => {\n            if (!moduleToScope.has(moduleType)) {\n                const isTestingModule = isTestingModuleOverride(moduleType);\n                const realType = isTestingModule ? this.testModuleType : moduleType;\n                moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n            }\n            return moduleToScope.get(moduleType);\n        };\n        this.componentToModuleScope.forEach((moduleType, componentType) => {\n            const moduleScope = getScopeOfModule(moduleType);\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\n            // `tView` that is stored on component def contains information about directives and pipes\n            // that are in the scope of this component. Patching component scope will cause `tView` to be\n            // changed. Store original `tView` before patching scope, so the `tView` (including scope\n            // information) is restored back to its previous/original state before running next test.\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n            ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n        });\n        this.componentToModuleScope.clear();\n    }\n    applyProviderOverrides() {\n        const maybeApplyOverrides = (field) => (type) => {\n            const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n            const metadata = resolver.resolve(type);\n            if (this.hasProviderOverrides(metadata.providers)) {\n                this.patchDefWithProviderOverrides(type, field);\n            }\n        };\n        this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n        this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n        this.seenComponents.clear();\n        this.seenDirectives.clear();\n    }\n    /**\n     * Applies provider overrides to a given type (either an NgModule or a standalone component)\n     * and all imported NgModules and standalone components recursively.\n     */\n    applyProviderOverridesInScope(type) {\n        const hasScope = isStandaloneComponent(type) || isNgModule(type);\n        // The function can be re-entered recursively while inspecting dependencies\n        // of an NgModule or a standalone component. Exit early if we come across a\n        // type that can not have a scope (directive or pipe) or the type is already\n        // processed earlier.\n        if (!hasScope || this.scopesWithOverriddenProviders.has(type)) {\n            return;\n        }\n        this.scopesWithOverriddenProviders.add(type);\n        // NOTE: the line below triggers JIT compilation of the module injector,\n        // which also invokes verification of the NgModule semantics, which produces\n        // detailed error messages. The fact that the code relies on this line being\n        // present here is suspicious and should be refactored in a way that the line\n        // below can be moved (for ex. after an early exit check below).\n        const injectorDef = type[ɵNG_INJ_DEF];\n        // No provider overrides, exit early.\n        if (this.providerOverridesByToken.size === 0)\n            return;\n        if (isStandaloneComponent(type)) {\n            // Visit all component dependencies and override providers there.\n            const def = getComponentDef(type);\n            const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n            for (const dependency of dependencies) {\n                this.applyProviderOverridesInScope(dependency);\n            }\n        }\n        else {\n            const providers = [\n                ...injectorDef.providers,\n                ...(this.providerOverridesByModule.get(type) || [])\n            ];\n            if (this.hasProviderOverrides(providers)) {\n                this.maybeStoreNgDef(ɵNG_INJ_DEF, type);\n                this.storeFieldOfDefOnType(type, ɵNG_INJ_DEF, 'providers');\n                injectorDef.providers = this.getOverriddenProviders(providers);\n            }\n            // Apply provider overrides to imported modules recursively\n            const moduleDef = type[ɵNG_MOD_DEF];\n            const imports = maybeUnwrapFn(moduleDef.imports);\n            for (const importedModule of imports) {\n                this.applyProviderOverridesInScope(importedModule);\n            }\n            // Also override the providers on any ModuleWithProviders imports since those don't appear in\n            // the moduleDef.\n            for (const importedModule of flatten(injectorDef.imports)) {\n                if (isModuleWithProviders(importedModule)) {\n                    this.defCleanupOps.push({\n                        object: importedModule,\n                        fieldName: 'providers',\n                        originalValue: importedModule.providers\n                    });\n                    importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n                }\n            }\n        }\n    }\n    patchComponentsWithExistingStyles() {\n        this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n        this.existingComponentStyles.clear();\n    }\n    queueTypeArray(arr, moduleType) {\n        for (const value of arr) {\n            if (Array.isArray(value)) {\n                this.queueTypeArray(value, moduleType);\n            }\n            else {\n                this.queueType(value, moduleType);\n            }\n        }\n    }\n    recompileNgModule(ngModule, metadata) {\n        // Cache the initial ngModuleDef as it will be overwritten.\n        this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n        ɵcompileNgModuleDefs(ngModule, metadata);\n    }\n    queueType(type, moduleType) {\n        const component = this.resolvers.component.resolve(type);\n        if (component) {\n            // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n            // missing. That might happen in case a class without any Angular decorators extends another\n            // class where Component/Directive/Pipe decorator is defined.\n            if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n                this.pendingComponents.add(type);\n            }\n            this.seenComponents.add(type);\n            // Keep track of the module which declares this component, so later the component's scope\n            // can be set correctly. If the component has already been recorded here, then one of several\n            // cases is true:\n            // * the module containing the component was imported multiple times (common).\n            // * the component is declared in multiple modules (which is an error).\n            // * the component was in 'declarations' of the testing module, and also in an imported module\n            //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n            // * overrideTemplateUsingTestingModule was called for the component in which case the module\n            //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n            //\n            // If the component was previously in the testing module's 'declarations' (meaning the\n            // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n            // real module, which was imported. This pattern is understood to mean that the component\n            // should use its original scope, but that the testing module should also contain the\n            // component in its scope.\n            //\n            // Note: standalone components have no associated NgModule, so the `moduleType` can be `null`.\n            if (moduleType !== null &&\n                (!this.componentToModuleScope.has(type) ||\n                    this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION)) {\n                this.componentToModuleScope.set(type, moduleType);\n            }\n            return;\n        }\n        const directive = this.resolvers.directive.resolve(type);\n        if (directive) {\n            if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n                this.pendingDirectives.add(type);\n            }\n            this.seenDirectives.add(type);\n            return;\n        }\n        const pipe = this.resolvers.pipe.resolve(type);\n        if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n            this.pendingPipes.add(type);\n            return;\n        }\n    }\n    queueTypesFromModulesArray(arr) {\n        // Because we may encounter the same NgModule or a standalone Component while processing\n        // the dependencies of an NgModule or a standalone Component, we cache them in this set so we\n        // can skip ones that have already been seen encountered. In some test setups, this caching\n        // resulted in 10X runtime improvement.\n        const processedDefs = new Set();\n        const queueTypesFromModulesArrayRecur = (arr) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    queueTypesFromModulesArrayRecur(value);\n                }\n                else if (hasNgModuleDef(value)) {\n                    const def = value.ɵmod;\n                    if (processedDefs.has(def)) {\n                        continue;\n                    }\n                    processedDefs.add(def);\n                    // Look through declarations, imports, and exports, and queue\n                    // everything found there.\n                    this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n                }\n                else if (isModuleWithProviders(value)) {\n                    queueTypesFromModulesArrayRecur([value.ngModule]);\n                }\n                else if (isStandaloneComponent(value)) {\n                    this.queueType(value, null);\n                    const def = getComponentDef(value);\n                    if (processedDefs.has(def)) {\n                        continue;\n                    }\n                    processedDefs.add(def);\n                    const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n                    dependencies.forEach((dependency) => {\n                        // Note: in AOT, the `dependencies` might also contain regular\n                        // (NgModule-based) Component, Directive and Pipes, so we handle\n                        // them separately and proceed with recursive process for standalone\n                        // Components and NgModules only.\n                        if (isStandaloneComponent(dependency) || hasNgModuleDef(dependency)) {\n                            queueTypesFromModulesArrayRecur([dependency]);\n                        }\n                        else {\n                            this.queueType(dependency, null);\n                        }\n                    });\n                }\n            }\n        };\n        queueTypesFromModulesArrayRecur(arr);\n    }\n    // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n    // that import (even transitively) an overridden one. For all affected modules we need to\n    // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n    // of this function is to collect all affected modules in a set for further processing. Example:\n    // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n    // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n    // invalidated with the override.\n    collectModulesAffectedByOverrides(arr) {\n        const seenModules = new Set();\n        const affectedModules = new Set();\n        const calcAffectedModulesRecur = (arr, path) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    // If the value is an array, just flatten it (by invoking this function recursively),\n                    // keeping \"path\" the same.\n                    calcAffectedModulesRecur(value, path);\n                }\n                else if (hasNgModuleDef(value)) {\n                    if (seenModules.has(value)) {\n                        // If we've seen this module before and it's included into \"affected modules\" list, mark\n                        // the whole path that leads to that module as affected, but do not descend into its\n                        // imports, since we already examined them before.\n                        if (affectedModules.has(value)) {\n                            path.forEach(item => affectedModules.add(item));\n                        }\n                        continue;\n                    }\n                    seenModules.add(value);\n                    if (this.overriddenModules.has(value)) {\n                        path.forEach(item => affectedModules.add(item));\n                    }\n                    // Examine module imports recursively to look for overridden modules.\n                    const moduleDef = value[ɵNG_MOD_DEF];\n                    calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n                }\n            }\n        };\n        calcAffectedModulesRecur(arr, []);\n        return affectedModules;\n    }\n    /**\n     * Preserve an original def (such as ɵmod, ɵinj, etc) before applying an override.\n     * Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of\n     * an NgModule). If there is a def in a set already, don't override it, since\n     * an original one should be restored at the end of a test.\n     */\n    maybeStoreNgDef(prop, type) {\n        if (!this.initialNgDefs.has(type)) {\n            this.initialNgDefs.set(type, new Map());\n        }\n        const currentDefs = this.initialNgDefs.get(type);\n        if (!currentDefs.has(prop)) {\n            const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n            currentDefs.set(prop, currentDef);\n        }\n    }\n    storeFieldOfDefOnType(type, defField, fieldName) {\n        const def = type[defField];\n        const originalValue = def[fieldName];\n        this.defCleanupOps.push({ object: def, fieldName, originalValue });\n    }\n    /**\n     * Clears current components resolution queue, but stores the state of the queue, so we can\n     * restore it later. Clearing the queue is required before we try to compile components (via\n     * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n     */\n    clearComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue === null) {\n            this.originalComponentResolutionQueue = new Map();\n        }\n        clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n    }\n    /*\n     * Restores component resolution queue to the previously saved state. This operation is performed\n     * as a part of restoring the state after completion of the current set of tests (that might\n     * potentially mutate the state).\n     */\n    restoreComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue !== null) {\n            restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n            this.originalComponentResolutionQueue = null;\n        }\n    }\n    restoreOriginalState() {\n        // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n        // case there were multiple overrides for the same field).\n        forEachRight(this.defCleanupOps, (op) => {\n            op.object[op.fieldName] = op.originalValue;\n        });\n        // Restore initial component/directive/pipe defs\n        this.initialNgDefs.forEach((defs, type) => {\n            defs.forEach((descriptor, prop) => {\n                if (!descriptor) {\n                    // Delete operations are generally undesirable since they have performance\n                    // implications on objects they were applied to. In this particular case, situations\n                    // where this code is invoked should be quite rare to cause any noticeable impact,\n                    // since it's applied only to some test cases (for example when class with no\n                    // annotations extends some @Component) when we need to clear 'ɵcmp' field on a given\n                    // class to restore its original state (before applying overrides and running tests).\n                    delete type[prop];\n                }\n                else {\n                    Object.defineProperty(type, prop, descriptor);\n                }\n            });\n        });\n        this.initialNgDefs.clear();\n        this.scopesWithOverriddenProviders.clear();\n        this.restoreComponentResolutionQueue();\n        // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n        ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n    }\n    compileTestModule() {\n        class RootScopeModule {\n        }\n        ɵcompileNgModuleDefs(RootScopeModule, {\n            providers: [...this.rootProviderOverrides],\n        });\n        const ngZone = new NgZone({ enableLongStackTrace: true });\n        const providers = [\n            { provide: NgZone, useValue: ngZone },\n            { provide: Compiler, useFactory: () => new R3TestCompiler(this) },\n            ...this.providers,\n            ...this.providerOverrides,\n        ];\n        const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n        // clang-format off\n        ɵcompileNgModuleDefs(this.testModuleType, {\n            declarations: this.declarations,\n            imports,\n            schemas: this.schemas,\n            providers,\n        }, /* allowDuplicateDeclarationsInRoot */ true);\n        // clang-format on\n        this.applyProviderOverridesInScope(this.testModuleType);\n    }\n    get injector() {\n        if (this._injector !== null) {\n            return this._injector;\n        }\n        const providers = [];\n        const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n        compilerOptions.forEach(opts => {\n            if (opts.providers) {\n                providers.push(opts.providers);\n            }\n        });\n        if (this.compilerProviders !== null) {\n            providers.push(...this.compilerProviders);\n        }\n        // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n        class CompilerModule {\n        }\n        ɵcompileNgModuleDefs(CompilerModule, { providers });\n        const CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n        this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n        return this._injector;\n    }\n    // get overrides for a specific provider (if any)\n    getSingleProviderOverrides(provider) {\n        const token = getProviderToken(provider);\n        return this.providerOverridesByToken.get(token) || null;\n    }\n    getProviderOverrides(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        // There are two flattening operations here. The inner flattenProviders() operates on the\n        // metadata's providers and applies a mapping function which retrieves overrides for each\n        // incoming provider. The outer flatten() then flattens the produced overrides array. If this is\n        // not done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n        // providers array and contaminate any error messages that might be generated.\n        return flatten(flattenProviders(providers, (provider) => this.getSingleProviderOverrides(provider) || []));\n    }\n    getOverriddenProviders(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        const flattenedProviders = flattenProviders(providers);\n        const overrides = this.getProviderOverrides(flattenedProviders);\n        const overriddenProviders = [...flattenedProviders, ...overrides];\n        const final = [];\n        const seenOverriddenProviders = new Set();\n        // We iterate through the list of providers in reverse order to make sure provider overrides\n        // take precedence over the values defined in provider list. We also filter out all providers\n        // that have overrides, keeping overridden values only. This is needed, since presence of a\n        // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n        forEachRight(overriddenProviders, (provider) => {\n            const token = getProviderToken(provider);\n            if (this.providerOverridesByToken.has(token)) {\n                if (!seenOverriddenProviders.has(token)) {\n                    seenOverriddenProviders.add(token);\n                    // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n                    // make sure that provided override takes highest precedence and is not combined with\n                    // other instances of the same multi provider.\n                    final.unshift({ ...provider, multi: false });\n                }\n            }\n            else {\n                final.unshift(provider);\n            }\n        });\n        return final;\n    }\n    hasProviderOverrides(providers) {\n        return this.getProviderOverrides(providers).length > 0;\n    }\n    patchDefWithProviderOverrides(declaration, field) {\n        const def = declaration[field];\n        if (def && def.providersResolver) {\n            this.maybeStoreNgDef(field, declaration);\n            const resolver = def.providersResolver;\n            const processProvidersFn = (providers) => this.getOverriddenProviders(providers);\n            this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n            def.providersResolver = (ngDef) => resolver(ngDef, processProvidersFn);\n        }\n    }\n}\nfunction initResolvers() {\n    return {\n        module: new NgModuleResolver(),\n        component: new ComponentResolver(),\n        directive: new DirectiveResolver(),\n        pipe: new PipeResolver()\n    };\n}\nfunction isStandaloneComponent(value) {\n    const def = getComponentDef(value);\n    return !!def?.standalone;\n}\nfunction getComponentDef(value) {\n    return value.ɵcmp ?? null;\n}\nfunction hasNgModuleDef(value) {\n    return value.hasOwnProperty('ɵmod');\n}\nfunction isNgModule(value) {\n    return hasNgModuleDef(value);\n}\nfunction maybeUnwrapFn(maybeFn) {\n    return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\nfunction flatten(values) {\n    const out = [];\n    values.forEach(value => {\n        if (Array.isArray(value)) {\n            out.push(...flatten(value));\n        }\n        else {\n            out.push(value);\n        }\n    });\n    return out;\n}\nfunction identityFn(value) {\n    return value;\n}\nfunction flattenProviders(providers, mapFn = identityFn) {\n    const out = [];\n    for (let provider of providers) {\n        if (ɵisEnvironmentProviders(provider)) {\n            provider = provider.ɵproviders;\n        }\n        if (Array.isArray(provider)) {\n            out.push(...flattenProviders(provider, mapFn));\n        }\n        else {\n            out.push(mapFn(provider));\n        }\n    }\n    return out;\n}\nfunction getProviderField(provider, field) {\n    return provider && typeof provider === 'object' && provider[field];\n}\nfunction getProviderToken(provider) {\n    return getProviderField(provider, 'provide') || provider;\n}\nfunction isModuleWithProviders(value) {\n    return value.hasOwnProperty('ngModule');\n}\nfunction forEachRight(values, fn) {\n    for (let idx = values.length - 1; idx >= 0; idx--) {\n        fn(values[idx], idx);\n    }\n}\nfunction invalidTypeError(name, expectedType) {\n    return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\nclass R3TestCompiler {\n    constructor(testBed) {\n        this.testBed = testBed;\n    }\n    compileModuleSync(moduleType) {\n        this.testBed._compileNgModuleSync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    }\n    async compileModuleAsync(moduleType) {\n        await this.testBed._compileNgModuleAsync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    }\n    compileModuleAndAllComponentsSync(moduleType) {\n        const ngModuleFactory = this.compileModuleSync(moduleType);\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    async compileModuleAndAllComponentsAsync(moduleType) {\n        const ngModuleFactory = await this.compileModuleAsync(moduleType);\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    clearCache() { }\n    clearCacheFor(type) { }\n    getModuleId(moduleType) {\n        const meta = this.testBed._getModuleResolver().resolve(moduleType);\n        return meta && meta.id || undefined;\n    }\n}\n\n// The formatter and CI disagree on how this import statement should be formatted. Both try to keep\nlet _nextRootElementId = 0;\n/**\n * Returns a singleton of the `TestBed` class.\n *\n * @publicApi\n */\nfunction getTestBed() {\n    return TestBedImpl.INSTANCE;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n */\nclass TestBedImpl {\n    constructor() {\n        // Properties\n        this.platform = null;\n        this.ngModule = null;\n        this._compiler = null;\n        this._testModuleRef = null;\n        this._activeFixtures = [];\n        /**\n         * Internal-only flag to indicate whether a module\n         * scoping queue has been checked and flushed already.\n         * @nodoc\n         */\n        this.globalCompilationChecked = false;\n    }\n    static get INSTANCE() {\n        return TestBedImpl._INSTANCE = TestBedImpl._INSTANCE || new TestBedImpl();\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    static initTestEnvironment(ngModule, platform, options) {\n        const testBed = TestBedImpl.INSTANCE;\n        testBed.initTestEnvironment(ngModule, platform, options);\n        return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    static resetTestEnvironment() {\n        TestBedImpl.INSTANCE.resetTestEnvironment();\n    }\n    static configureCompiler(config) {\n        return TestBedImpl.INSTANCE.configureCompiler(config);\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef) {\n        return TestBedImpl.INSTANCE.configureTestingModule(moduleDef);\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents() {\n        return TestBedImpl.INSTANCE.compileComponents();\n    }\n    static overrideModule(ngModule, override) {\n        return TestBedImpl.INSTANCE.overrideModule(ngModule, override);\n    }\n    static overrideComponent(component, override) {\n        return TestBedImpl.INSTANCE.overrideComponent(component, override);\n    }\n    static overrideDirective(directive, override) {\n        return TestBedImpl.INSTANCE.overrideDirective(directive, override);\n    }\n    static overridePipe(pipe, override) {\n        return TestBedImpl.INSTANCE.overridePipe(pipe, override);\n    }\n    static overrideTemplate(component, template) {\n        return TestBedImpl.INSTANCE.overrideTemplate(component, template);\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component, template) {\n        return TestBedImpl.INSTANCE.overrideTemplateUsingTestingModule(component, template);\n    }\n    static overrideProvider(token, provider) {\n        return TestBedImpl.INSTANCE.overrideProvider(token, provider);\n    }\n    static inject(token, notFoundValue, flags) {\n        return TestBedImpl.INSTANCE.inject(token, notFoundValue, ɵconvertToBitFlags(flags));\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    static get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n        return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n    }\n    /**\n     * Runs the given function in the `EnvironmentInjector` context of `TestBed`.\n     *\n     * @see EnvironmentInjector#runInContext\n     */\n    static runInInjectionContext(fn) {\n        return TestBedImpl.INSTANCE.runInInjectionContext(fn);\n    }\n    static createComponent(component) {\n        return TestBedImpl.INSTANCE.createComponent(component);\n    }\n    static resetTestingModule() {\n        return TestBedImpl.INSTANCE.resetTestingModule();\n    }\n    static execute(tokens, fn, context) {\n        return TestBedImpl.INSTANCE.execute(tokens, fn, context);\n    }\n    static get platform() {\n        return TestBedImpl.INSTANCE.platform;\n    }\n    static get ngModule() {\n        return TestBedImpl.INSTANCE.ngModule;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    initTestEnvironment(ngModule, platform, options) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        TestBedImpl._environmentTeardownOptions = options?.teardown;\n        TestBedImpl._environmentErrorOnUnknownElementsOption = options?.errorOnUnknownElements;\n        TestBedImpl._environmentErrorOnUnknownPropertiesOption = options?.errorOnUnknownProperties;\n        this.platform = platform;\n        this.ngModule = ngModule;\n        this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n        // TestBed does not have an API which can reliably detect the start of a test, and thus could be\n        // used to track the state of the NgModule registry and reset it correctly. Instead, when we\n        // know we're in a testing scenario, we disable the check for duplicate NgModule registration\n        // completely.\n        ɵsetAllowDuplicateNgModuleIdsForTest(true);\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    resetTestEnvironment() {\n        this.resetTestingModule();\n        this._compiler = null;\n        this.platform = null;\n        this.ngModule = null;\n        TestBedImpl._environmentTeardownOptions = undefined;\n        ɵsetAllowDuplicateNgModuleIdsForTest(false);\n    }\n    resetTestingModule() {\n        this.checkGlobalCompilationFinished();\n        ɵresetCompiledComponents();\n        if (this._compiler !== null) {\n            this.compiler.restoreOriginalState();\n        }\n        this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n        // Restore the previous value of the \"error on unknown elements\" option\n        ɵsetUnknownElementStrictMode$1(this._previousErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT);\n        // Restore the previous value of the \"error on unknown properties\" option\n        ɵsetUnknownPropertyStrictMode$1(this._previousErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT);\n        // We have to chain a couple of try/finally blocks, because each step can\n        // throw errors and we don't want it to interrupt the next step and we also\n        // want an error to be thrown at the end.\n        try {\n            this.destroyActiveFixtures();\n        }\n        finally {\n            try {\n                if (this.shouldTearDownTestingModule()) {\n                    this.tearDownTestingModule();\n                }\n            }\n            finally {\n                this._testModuleRef = null;\n                this._instanceTeardownOptions = undefined;\n                this._instanceErrorOnUnknownElementsOption = undefined;\n                this._instanceErrorOnUnknownPropertiesOption = undefined;\n            }\n        }\n        return this;\n    }\n    configureCompiler(config) {\n        if (config.useJit != null) {\n            throw new Error('the Render3 compiler JiT mode is not configurable !');\n        }\n        if (config.providers !== undefined) {\n            this.compiler.setCompilerProviders(config.providers);\n        }\n        return this;\n    }\n    configureTestingModule(moduleDef) {\n        this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n        // Trigger module scoping queue flush before executing other TestBed operations in a test.\n        // This is needed for the first test invocation to ensure that globally declared modules have\n        // their components scoped properly. See the `checkGlobalCompilationFinished` function\n        // description for additional info.\n        this.checkGlobalCompilationFinished();\n        // Always re-assign the options, even if they're undefined.\n        // This ensures that we don't carry them between tests.\n        this._instanceTeardownOptions = moduleDef.teardown;\n        this._instanceErrorOnUnknownElementsOption = moduleDef.errorOnUnknownElements;\n        this._instanceErrorOnUnknownPropertiesOption = moduleDef.errorOnUnknownProperties;\n        // Store the current value of the strict mode option,\n        // so we can restore it later\n        this._previousErrorOnUnknownElementsOption = ɵgetUnknownElementStrictMode$1();\n        ɵsetUnknownElementStrictMode$1(this.shouldThrowErrorOnUnknownElements());\n        this._previousErrorOnUnknownPropertiesOption = ɵgetUnknownPropertyStrictMode$1();\n        ɵsetUnknownPropertyStrictMode$1(this.shouldThrowErrorOnUnknownProperties());\n        this.compiler.configureTestingModule(moduleDef);\n        return this;\n    }\n    compileComponents() {\n        return this.compiler.compileComponents();\n    }\n    inject(token, notFoundValue, flags) {\n        if (token === TestBed) {\n            return this;\n        }\n        const UNDEFINED = {};\n        const result = this.testModuleRef.injector.get(token, UNDEFINED, ɵconvertToBitFlags(flags));\n        return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n            result;\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n        return this.inject(token, notFoundValue, flags);\n    }\n    runInInjectionContext(fn) {\n        return this.inject(EnvironmentInjector$1).runInContext(fn);\n    }\n    execute(tokens, fn, context) {\n        const params = tokens.map(t => this.inject(t));\n        return fn.apply(context, params);\n    }\n    overrideModule(ngModule, override) {\n        this.assertNotInstantiated('overrideModule', 'override module metadata');\n        this.compiler.overrideModule(ngModule, override);\n        return this;\n    }\n    overrideComponent(component, override) {\n        this.assertNotInstantiated('overrideComponent', 'override component metadata');\n        this.compiler.overrideComponent(component, override);\n        return this;\n    }\n    overrideTemplateUsingTestingModule(component, template) {\n        this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n        this.compiler.overrideTemplateUsingTestingModule(component, template);\n        return this;\n    }\n    overrideDirective(directive, override) {\n        this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this.compiler.overrideDirective(directive, override);\n        return this;\n    }\n    overridePipe(pipe, override) {\n        this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this.compiler.overridePipe(pipe, override);\n        return this;\n    }\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token, provider) {\n        this.assertNotInstantiated('overrideProvider', 'override provider');\n        this.compiler.overrideProvider(token, provider);\n        return this;\n    }\n    overrideTemplate(component, template) {\n        return this.overrideComponent(component, { set: { template, templateUrl: null } });\n    }\n    createComponent(type) {\n        const testComponentRenderer = this.inject(TestComponentRenderer);\n        const rootElId = `root${_nextRootElementId++}`;\n        testComponentRenderer.insertRootElement(rootElId);\n        const componentDef = type.ɵcmp;\n        if (!componentDef) {\n            throw new Error(`It looks like '${ɵstringify(type)}' has not been compiled.`);\n        }\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n        const ngZone = noNgZone ? null : this.inject(NgZone, null);\n        const componentFactory = new ɵRender3ComponentFactory(componentDef);\n        const initComponent = () => {\n            const componentRef = componentFactory.create(Injector$1.NULL, [], `#${rootElId}`, this.testModuleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n        this._activeFixtures.push(fixture);\n        return fixture;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get compiler() {\n        if (this._compiler === null) {\n            throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n        }\n        return this._compiler;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get testModuleRef() {\n        if (this._testModuleRef === null) {\n            this._testModuleRef = this.compiler.finalize();\n        }\n        return this._testModuleRef;\n    }\n    assertNotInstantiated(methodName, methodDescription) {\n        if (this._testModuleRef !== null) {\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n        }\n    }\n    /**\n     * Check whether the module scoping queue should be flushed, and flush it if needed.\n     *\n     * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n     * in-progress module compilation. This creates a potential hazard - the very first time the\n     * TestBed is initialized (or if it's reset without being initialized), there may be pending\n     * compilations of modules declared in global scope. These compilations should be finished.\n     *\n     * To ensure that globally declared modules have their components scoped properly, this function\n     * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n     * to any other operations, the scoping queue is flushed.\n     */\n    checkGlobalCompilationFinished() {\n        // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n        // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n        if (!this.globalCompilationChecked && this._testModuleRef === null) {\n            ɵflushModuleScopingQueueAsMuchAsPossible();\n        }\n        this.globalCompilationChecked = true;\n    }\n    destroyActiveFixtures() {\n        let errorCount = 0;\n        this._activeFixtures.forEach((fixture) => {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                errorCount++;\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n        if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\n            throw Error(`${errorCount} ${(errorCount === 1 ? 'component' : 'components')} ` +\n                `threw errors during cleanup`);\n        }\n    }\n    shouldRethrowTeardownErrors() {\n        const instanceOptions = this._instanceTeardownOptions;\n        const environmentOptions = TestBedImpl._environmentTeardownOptions;\n        // If the new teardown behavior hasn't been configured, preserve the old behavior.\n        if (!instanceOptions && !environmentOptions) {\n            return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n        }\n        // Otherwise use the configured behavior or default to rethrowing.\n        return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ??\n            this.shouldTearDownTestingModule();\n    }\n    shouldThrowErrorOnUnknownElements() {\n        // Check if a configuration has been provided to throw when an unknown element is found\n        return this._instanceErrorOnUnknownElementsOption ??\n            TestBedImpl._environmentErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT;\n    }\n    shouldThrowErrorOnUnknownProperties() {\n        // Check if a configuration has been provided to throw when an unknown property is found\n        return this._instanceErrorOnUnknownPropertiesOption ??\n            TestBedImpl._environmentErrorOnUnknownPropertiesOption ??\n            THROW_ON_UNKNOWN_PROPERTIES_DEFAULT;\n    }\n    shouldTearDownTestingModule() {\n        return this._instanceTeardownOptions?.destroyAfterEach ??\n            TestBedImpl._environmentTeardownOptions?.destroyAfterEach ??\n            TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n    }\n    tearDownTestingModule() {\n        // If the module ref has already been destroyed, we won't be able to get a test renderer.\n        if (this._testModuleRef === null) {\n            return;\n        }\n        // Resolve the renderer ahead of time, because we want to remove the root elements as the very\n        // last step, but the injector will be destroyed as a part of the module ref destruction.\n        const testRenderer = this.inject(TestComponentRenderer);\n        try {\n            this._testModuleRef.destroy();\n        }\n        catch (e) {\n            if (this.shouldRethrowTeardownErrors()) {\n                throw e;\n            }\n            else {\n                console.error('Error during cleanup of a testing module', {\n                    component: this._testModuleRef.instance,\n                    stacktrace: e,\n                });\n            }\n        }\n        finally {\n            testRenderer.removeAllRootElements?.();\n        }\n    }\n}\nTestBedImpl._INSTANCE = null;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @publicApi\n */\nconst TestBed = TestBedImpl;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`. Note: this function\n * (imported from the `@angular/core/testing` package) can **only** be used to inject dependencies\n * in tests. To inject dependencies in your application code, use the [`inject`](api/core/inject)\n * function from the `@angular/core` package instead.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * @publicApi\n */\nfunction inject(tokens, fn) {\n    const testBed = TestBedImpl.INSTANCE;\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        return testBed.execute(tokens, fn, this);\n    };\n}\n/**\n * @publicApi\n */\nclass InjectSetupWrapper {\n    constructor(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    _addModule() {\n        const moduleDef = this._moduleDef();\n        if (moduleDef) {\n            TestBedImpl.configureTestingModule(moduleDef);\n        }\n    }\n    inject(tokens, fn) {\n        const self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    }\n}\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            const testBed = TestBedImpl.INSTANCE;\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(() => moduleDef);\n}\n\n/**\n * Public Test Library for unit testing Angular applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\nconst _global = (typeof window === 'undefined' ? global : window);\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n    _global.beforeEach(getCleanupHook(false));\n}\n// We provide both a `beforeEach` and `afterEach`, because the updated behavior for\n// tearing down the module is supposed to run after the test so that we can associate\n// teardown errors with the correct test.\nif (_global.afterEach) {\n    _global.afterEach(getCleanupHook(true));\n}\nfunction getCleanupHook(expectedTeardownValue) {\n    return () => {\n        const testBed = TestBedImpl.INSTANCE;\n        if (testBed.shouldTearDownTestingModule() === expectedTeardownValue) {\n            testBed.resetTestingModule();\n            resetFakeAsyncZone();\n        }\n    };\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\nconst __core_private_testing_placeholder__ = '';\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\n\n/// <reference types=\"jasmine\" />\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };\n"],"mappings":"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AACA;AACA;AACA;AACA;AACA,SAASE,SAAS,CAAC9D,EAAE,EAAE;EACnB,IAAI2D,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACG,SAAS,CAAC9D,EAAE,CAAC;EAC5C;EACA,MAAM,IAAI4C,KAAK,CAACgB,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,IAAI,CAACC,MAAM,GAAG,CAAC,EAAEC,WAAW,GAAG;EACpCC,iCAAiC,EAAE;AACvC,CAAC,EAAE;EACC,IAAIP,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACI,IAAI,CAACC,MAAM,EAAEC,WAAW,CAAC;EACxD;EACA,MAAM,IAAIrB,KAAK,CAACgB,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,KAAK,CAACC,QAAQ,EAAE;EACrB,IAAIT,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACQ,KAAK,CAACC,QAAQ,CAAC;EAC9C;EACA,MAAM,IAAIxB,KAAK,CAACgB,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,oBAAoB,GAAG;EAC5B,IAAIV,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACU,oBAAoB,EAAE;EACrD;EACA,MAAM,IAAIzB,KAAK,CAACgB,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,eAAe,GAAG;EACvB,IAAIX,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACW,eAAe,EAAE;EACh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AAK;AACnC;AACA;AACA;AACA;AACA;AACA,SAASC,+BAA+B,GAAG;EACvC,OAAOL,gBAAgB,CAACC,MAAM,CAACtE,MAAM,KAAK,IAAI;AAClD;AACA,SAAS2E,oBAAoB,GAAG;EAC5B,OAAON,gBAAgB,CAACC,MAAM,CAACM,iBAAiB;AACpD;AACA,SAASC,yBAAyB,GAAG;EACjCR,gBAAgB,CAACC,MAAM,CAACM,iBAAiB,EAAE;AAC/C;AACA,SAASE,yBAAyB,GAAG;EACjCT,gBAAgB,CAACC,MAAM,CAACM,iBAAiB,EAAE;AAC/C;AACA,SAASG,kBAAkB,GAAG;EAC1B,OAAOV,gBAAgB,CAACG,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,gBAAgB,GAAG;EACxBX,gBAAgB,CAACG,eAAe,GAAG,IAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,iBAAiB,GAAG;EACzBZ,gBAAgB,CAACG,eAAe,GAAG,KAAK;AAC5C;AACA;AACA;AACA;AACA,SAASU,QAAQ,GAAG;EAChB,OAAOb,gBAAgB,CAACC,MAAM,CAAClF,KAAK;AACxC;AACA;AACA;AACA;AACA,SAAS+F,QAAQ,GAAG;EAChB,OAAOd,gBAAgB,CAACC,MAAM,CAAClT,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgU,aAAa,CAACC,aAAa,EAAE;EAClChB,gBAAgB,CAACC,MAAM,CAACgB,YAAY,GAAGD,aAAa;EACpD,OAAOA,aAAa,CAACjI,OAAO,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmI,WAAW,CAACvgB,KAAK,EAAE;EACxBqf,gBAAgB,CAACC,MAAM,CAACgB,YAAY,GAAG,IAAI;EAC3C,OAAOtgB,KAAK;AAChB;AACA,S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;EACJ,CAAC,MACI;IACD3I,QAAQ,CAAC,CAAC,CAAC,wCAAwC8I,SAAS,EAAEH,IAAI,CAAC;IACnE,IAAI;MACAA,IAAI,CAAC/e,IAAI,CAACkf,SAAS,CAAC;IACxB,CAAC,SACO;MACJ9I,QAAQ,CAAC,CAAC,CAAC,sCAAsC8I,SAAS,EAAEH,IAAI,CAAC;IACrE;EACJ;AACJ;AAEA,MAAMK,kBAAkB,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,CAAC;EACtBtxB,WAAW;EACX;AACJ;AACA;EACIyK,OAAO;EACP;AACJ;AACA;EACI8mB,cAAc,EAAEC,oBAAoB,EAAE;IAClC,IAAI,CAAC/mB,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;AACA;IACQ,IAAI,CAACgnB,SAAS,GAAG,KAAK;IACtBhpB,SAAS,IAAI2F,aAAa,CAAC3D,OAAO,EAAE,uBAAuB,CAAC;IAC5DhC,SAAS,IAAImF,WAAW,CAAC,OAAOnD,OAAO,EAAE,UAAU,EAAE,4BAA4B,CAAC;IAClF,IAAI,CAACinB,mBAAmB,GAAGH,cAAc;IACzC,IAAI,CAACI,UAAU,GAAGH,oBAAoB;EAC1C;AACJ;AACA,SAASI,SAAS,CAAC3V,GAAG,EAAE;EACpB,OAAOA,GAAG,YAAYqV,mBAAmB;AAC7C;AACA;AA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AOq9B,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,QAAQ,GAAGvnC,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwnC,WAAW,CAACC,QAAQ,EAAE;EAC3BF,QAAQ,GAAGE,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAW,GAAG;EACnB,IAAIH,QAAQ,KAAKvnC,SAAS,EAAE;IACxB,OAAOunC,QAAQ;EACnB,CAAC,MACI,IAAI,OAAOE,QAAQ,KAAK,WAAW,EAAE;IACtC,OAAOA,QAAQ;EACnB;EACA;EACA;EACA;EACA;EACA;EACA,OAAOznC,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI2nC,MAAM;AACV;AACA;AACA;AACA;AACA,SAASC,SAAS,GAAG;EACjB,IAAID,MAAM,KAAK3nC,SAAS,EAAE;IACtB2nC,MAAM,GAAG,IAAI;IACb,IAAI1iC,SAAS,CAACkhC,YAAY,EAAE;MACxB,IAAI;QACAwB,MAAM,GAAG1iC,SAAS,CAACkhC,YAAY,CAC1BC,YAAY,CAAC,uBAAuB,EAAE;UACvCC,UAAU,EAAGC,CAAC,IAAKA,CAAC;UACpBC,YAAY,EAAGD,CAAC,IAAKA,CAAC;UACtBE,eAAe,EAAGF,CAAC,IAAKA;QAC5B,CAAC,CAAC;MACN,CAAC,CACD,MAAM;QACF;QACA;QACA;QACA;MAAA;IAER;EACJ;EACA,OAAOqB,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,2BAA2B,CAACnB,IAAI,EAAE;EACvC,OAAOkB,SAAS,EAAE,EAAEvB,UAAU,CAACK,IAAI,CAAC,IAAIA,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoB,6BAA6B,CAAClB,MAAM,EAAE;EAC3C,OAAOgB,SAAS,EAAE,EAAErB,YAAY,CA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AAGlyC,SAAS;EAClC,OAAOxD,KAAK;AAChB;AACA,MAAM01C,eAAe,GAAG,aAAa;AACrC,SAASC,cAAc,CAAC31C,KAAK,EAAE;EAC3B,OAAOA,KAAK,CAAC01C,eAAe,CAAC;AACjC;AACA,MAAME,6BAA6B,CAAC;EAChCC,uBAAuB,CAACryC,SAAS,EAAE;IAC/B,MAAMiyC,uBAAuB,CAACjyC,SAAS,CAAC;EAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsyC,0BAA0B,CAAC;AAEjCA,0BAA0B,CAACC,IAAI,GAAK,eAAe,IAAIH,6BAA6B,EAAG;;AAEvF;AACA;AACA;AACA;AACA;AACA,SAASI,gBAAgB,GAAG;EACxB,OAAOC,gBAAgB,CAAC5sB,eAAe,EAAE,EAAEN,QAAQ,EAAE,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASktB,gBAAgB,CAACjhC,KAAK,EAAEiO,KAAK,EAAE;EACpC,OAAO,IAAIizB,UAAU,CAAClvB,gBAAgB,CAAChS,KAAK,EAAEiO,KAAK,CAAC,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMizB,UAAU,CAAC;EACb/3C,WAAW,CAACgB,aAAa,EAAE;IACvB,IAAI,CAACA,aAAa,GAAGA,aAAa;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA+2C,UAAU,CAACr6B,iBAAiB,GAAGm6B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,gBAAgB,CAACttC,KAAK,EAAE;EAC7B,OAAOA,KAAK,YAAYqtC,UAAU,GAAGrtC,KAAK,CAAC1J,aAAa,GAAG0J,KAAK;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM9O,gBAAgB,CAAC;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMq8C,SAAS,CAAC;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C;AACJ;AACA,SAAS2C,iBAAiB,CAACz5C,KAAK,EAAE2R,QAAQ,EAAEmmC,UAAU,EAAE;EACpD,OAAO,IAAID,oBAAoB,CAACP,aAAa,CAACh+C,GAAG,CAAC0G,KAAK,CAAC,EAAE2R,QAAQ,EAAEmmC,UAAU,CAAC;AACnF;;AAEA;AACA,MAAM6B,SAAS,GAAG,CAAC,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,CAAC;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO5gD,OAAO,CAACwI,SAAS,EAAE;IACtB,OAAOq3C,0BAA0B,CAACr3C,SAAS,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOq4C,gBAAgB,CAACr4C,SAAS,EAAE4a,MAAM,EAAE;IACvC,MAAM09B,2BAA2B,GAAGF,kBAAkB,CAAC5gD,OAAO,CAACwI,SAAS,CAAC;IACzE,OAAOo4C,kBAAkB,CAACG,qBAAqB,CAACD,2BAA2B,EAAE19B,MAAM,CAAC;EACxF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO29B,qBAAqB,CAACv4C,SAAS,EAAE4a,MAAM,EAAE;IAC5C,OAAO,IAAI49B,mBAAmB,CAACx4C,SAAS,EAAE4a,MAAM,CAAC;EACrD;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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8a,YAAY,GAAG;IACX7B,aAAa,CAAC,IAAI,CAACyB,mBAAmB,IAAI,IAAI,CAACj4B,MAAM,CAAC;EAC1D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIs4B,MAAM,GAAG;IACL,IAAI,CAACt4B,MAAM,CAAChW,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuuC,QAAQ,GAAG;IACP,IAAI,CAACv4B,MAAM,CAAChW,KAAK,CAAC,IAAI,EAAE,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIhhB,aAAa,GAAG;IACZytD,qBAAqB,CAAC,IAAI,CAACz2B,MAAM,CAACjW,KAAK,CAAC,EAAE,IAAI,CAACiW,MAAM,EAAE,IAAI,CAACpc,OAAO,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;EACIra,cAAc,GAAG;IACb,IAAI0G,SAAS,EAAE;MACX2mD,sBAAsB,CAAC,IAAI,CAAC52B,MAAM,CAACjW,KA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D,uBAAuB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,uBAAuB,CAACnzD,IAAI,EAAEwkC,MAAM,EAAEue,EAAE,EAAEG,EAAE,EAAEC,EAAE,EAAEH,MAAM,EAAEkQ,WAAW,EAAE;EAC5E,MAAMjkD,KAAK,GAAG8F,QAAQ,EAAE;EACxB,MAAMwvC,iBAAiB,GAAGtB,cAAc,CAACh0C,KAAK,EAAEu1B,MAAM,EAAEue,EAAE,EAAEG,EAAE,EAAEC,EAAE,EAAEH,MAAM,CAAC;EAC3EgL,oBAAoB,CAAChuD,IAAI,EAAEukD,iBAAiB,EAAE2O,WAAW,EAAE,KAAK,CAAC;EACjE,OAAOC,uBAAuB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuB,CAACpzD,IAAI,EAAEwkC,MAAM,EAAEue,EAAE,EAAEG,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEC,EAAE,EAAEN,MAAM,EAAEkQ,WAAW,EAAE;EACpF,MAAMjkD,KAAK,GAAG8F,QAAQ,EAAE;EACxB,MAAMwvC,iBAAiB,GAAGnB,cAAc,CAACn0C,KAAK,EAAEu1B,MAAM,EAAEue,EAAE,EAAEG,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEC,EAAE,EAAEN,MAAM,CAAC;EACnFgL,oBAAoB,CAAChuD,IAAI,EAAEukD,iBAAiB,EAAE2O,WAAW,EAAE,KAAK,CAAC;EACjE,OAAOE,uBAAuB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}