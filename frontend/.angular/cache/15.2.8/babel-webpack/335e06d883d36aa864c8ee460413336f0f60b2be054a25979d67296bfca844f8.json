{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    const isLoggedIn = this.authService.isLoggedIn();\n    if (isLoggedIn) {\n      // User is logged in, check the requested route\n      const isAdminRoute = state.url.includes('/admin');\n      const isDonorRoute = state.url.includes('/donor');\n      if (isAdminRoute) {\n        // User is logged in and trying to access an admin route\n        // Check if the user is an admin (you can use any criteria specific to your application)\n        const isAdmin = this.authService.isLoggedIn();\n        if (isAdmin) {\n          // User is an admin, allow access to the route\n          return true;\n        } else {\n          // User is not an admin, redirect to a suitable page (e.g., access denied page)\n          this.router.navigate(['/access-denied']);\n          return false;\n        }\n      } else if (isDonorRoute) {\n        // User is logged in and trying to access a donor route\n        // Allow access to the route\n        return true;\n      }\n    }\n    // User is not logged in, redirect to the login page\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\nRoleGuard.ɵfac = function RoleGuard_Factory(t) {\n  return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nRoleGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoleGuard,\n  factory: RoleGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAExEC,WAAW,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,MAAMC,UAAU,GAAG,IAAI,CAACL,WAAW,CAACK,UAAU,EAAE;IAEhD,IAAIA,UAAU,EAAE;MACd;MACA,MAAMC,YAAY,GAAGF,KAAK,CAACG,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC;MACjD,MAAMC,YAAY,GAAGL,KAAK,CAACG,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC;MAEjD,IAAIF,YAAY,EAAE;QAChB;QACA;QACA,MAAMI,OAAO,GAAG,IAAI,CAACV,WAAW,CAACK,UAAU,EAAE;QAE7C,IAAIK,OAAO,EAAE;UACX;UACA,OAAO,IAAI;SACZ,MAAM;UACL;UACA,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;UACxC,OAAO,KAAK;;OAEf,MAAM,IAAIF,YAAY,EAAE;QACvB;QACA;QACA,OAAO,IAAI;;;IAIf;IACA,IAAI,CAACR,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;AAtCWb,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAc,SAATd,SAAS;EAAAe,YAFR;AAAM","names":["RoleGuard","constructor","authService","router","canActivate","next","state","isLoggedIn","isAdminRoute","url","includes","isDonorRoute","isAdmin","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n    const isLoggedIn = this.authService.isLoggedIn();\r\n\r\n    if (isLoggedIn) {\r\n      // User is logged in, check the requested route\r\n      const isAdminRoute = state.url.includes('/admin');\r\n      const isDonorRoute = state.url.includes('/donor');\r\n\r\n      if (isAdminRoute) {\r\n        // User is logged in and trying to access an admin route\r\n        // Check if the user is an admin (you can use any criteria specific to your application)\r\n        const isAdmin = this.authService.isLoggedIn();\r\n\r\n        if (isAdmin) {\r\n          // User is an admin, allow access to the route\r\n          return true;\r\n        } else {\r\n          // User is not an admin, redirect to a suitable page (e.g., access denied page)\r\n          this.router.navigate(['/access-denied']);\r\n          return false;\r\n        }\r\n      } else if (isDonorRoute) {\r\n        // User is logged in and trying to access a donor route\r\n        // Allow access to the route\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // User is not logged in, redirect to the login page\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}