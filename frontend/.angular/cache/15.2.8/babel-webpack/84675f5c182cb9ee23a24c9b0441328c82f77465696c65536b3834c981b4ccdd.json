{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hp/Documents/Arcs Infotech/blood-bank-system/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { Component } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { HotToastService } from '@ngneat/hot-toast';\n// import { BloodBankService } from '../blood-bank.service';\n// import { Observable, map } from 'rxjs';\n// import Swal from 'sweetalert2';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-donor-home',\n//   templateUrl: './donor-home.component.html',\n//   styleUrls: ['./donor-home.component.css']\n// })\n// export class DonorHomeComponent {\n//   registeredCamps: any = {};\n//   camps: any;\n//   constructor(\n//     private toast: HotToastService,\n//     private router: Router,\n//     private route: ActivatedRoute,\n//     private bloodBankService: BloodBankService\n//   ) {}\n//   ngOnInit(): void {\n//     this.postCamps();\n//     // this.getRegistrationStatus();\n//   }\n//   postCamps(): void {\n//     this.bloodBankService.getCamps().subscribe(\n//       (data: any) => {\n//         this.camps = data;\n//         // console.log(data);\n//       }\n//     );\n//   }\n//   convertTo12HourFormat(timeString: any): string {\n//     const [hours, minutes] = timeString.split(\":\");\n//     let formattedTime: number;\n//     let period: string;\n//     if (hours < 12) {\n//       formattedTime = hours;\n//       period = \"AM\";\n//     } else {\n//       formattedTime = hours % 12;\n//       period = \"PM\";\n//     }\n//     return `${formattedTime}:${minutes} ${period}`;\n//   }\n//   isRegistered(camp: any): Observable<boolean> {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     console.log(donorId)\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     return this.bloodBankService.isRegister(item).pipe(\n//       map((data: any) => data.isRegistered)\n//     );\n//   }\n//   getRegistrationStatus(): void {\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     this.bloodBankService.campsRegistered(donorId).subscribe(\n//       (data: any) => {\n//         // console.log(data);\n//         this.registeredCamps = data.reduce((result: any, camp: any) => {\n//           result[camp.id] = true;\n//           return result;\n//         }, {});\n//       }\n//     );\n//   }\n//   onButtonClick(camp: any) {\n//     const isRegistered = this.registeredCamps[camp.id] || false;\n//     if (isRegistered) {\n//       this.unregisterCamp(camp);\n//     } else {\n//       this.registerCamp(camp);\n//     }\n//   }\n//   registerCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     this.bloodBankService.registerDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Registered successfully');\n//         this.registeredCamps[camp.id] = true;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n//   async unregisterCamp(camp: any) {\n//     const shouldDelete = await Swal.fire({\n//       title: 'Are you sure?',\n//       text: 'You want to unregister from camp',\n//       icon: 'question',\n//       showCancelButton: true,\n//       confirmButtonColor: '#3085d6',\n//       cancelButtonColor: '#d33',\n//       confirmButtonText: 'Yes'\n//     });\n//     if(!shouldDelete.isConfirmed) return;\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     this.bloodBankService.unregisterDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Unregistered successfully');\n//         this.registeredCamps[camp.id] = false;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n// }\nimport { Component } from '@angular/core';\nimport { map } from 'rxjs';\nimport Swal from 'sweetalert2';\n// import { SessionStorageService } from 'ngx-webstorage-service';/\nlet DonorHomeComponent = class DonorHomeComponent {\n  constructor(toast, router, route, bloodBankService, sessionStorage) {\n    this.toast = toast;\n    this.router = router;\n    this.route = route;\n    this.bloodBankService = bloodBankService;\n    this.sessionStorage = sessionStorage;\n    this.registeredCamps = {};\n  }\n  ngOnInit() {\n    const donorIDFromStorage = this.sessionStorage.get('donorID');\n    if (donorIDFromStorage) {\n      this.donorID = donorIDFromStorage;\n    } else {\n      this.donorID = Number(this.route.snapshot.paramMap.get('id'));\n      this.sessionStorage.set('donorID', this.donorID);\n    }\n    this.donorID = Number(this.route.snapshot.paramMap.get('id'));\n    console.log(this.donorID);\n    console.log(this.registeredCamps);\n    window.history.pushState({}, document.title, \"/\" + \"donor-home\");\n    this.postCamps();\n    this.getRegistrationStatus(this.donorID);\n  }\n  postCamps() {\n    this.bloodBankService.getCamps().subscribe(data => {\n      this.camps = data;\n      // console.log(data);\n    });\n  }\n\n  convertTo12HourFormat(timeString) {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime;\n    let period;\n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n    return `${formattedTime}:${minutes} ${period}`;\n  }\n  isRegistered(camp, donorId) {\n    const campId = camp.id;\n    const item = {\n      campId,\n      donorId\n    };\n    return this.bloodBankService.isRegister(item).pipe(map(data => data.isRegistered));\n  }\n  getRegistrationStatus(donorId) {\n    this.bloodBankService.campsRegistered(donorId).subscribe(data => {\n      // console.log(data);\n      this.registeredCamps = data.reduce((result, camp) => {\n        result[camp.id] = true;\n        return result;\n      }, {});\n    });\n  }\n  onButtonClick(camp) {\n    // const donorId = Number(this.route.snapshot.queryParams['id']);\n    const isRegistered = this.registeredCamps[camp.id] || false;\n    if (isRegistered) {\n      this.unregisterCamp(camp);\n    } else {\n      this.registerCamp(camp);\n    }\n  }\n  registerCamp(camp) {\n    const campId = camp.id;\n    const donorId = this.donorID;\n    const item = {\n      campId,\n      donorId\n    };\n    console.log(item);\n    this.bloodBankService.registerDonor(item).subscribe(data => {\n      this.toast.success('Registered successfully');\n      this.registeredCamps[camp.id] = true;\n    }, error => {\n      this.toast.error(error.error.error.message);\n    });\n  }\n  unregisterCamp(camp) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const shouldDelete = yield Swal.fire({\n        title: 'Are you sure?',\n        text: 'You want to unregister from camp',\n        icon: 'question',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes'\n      });\n      if (!shouldDelete.isConfirmed) return;\n      const campId = camp.id;\n      const donorId = _this.donorID;\n      const item = {\n        campId,\n        donorId\n      };\n      _this.bloodBankService.unregisterDonor(item).subscribe(data => {\n        _this.toast.success('Unregistered successfully');\n        _this.registeredCamps[camp.id] = false;\n      }, error => {\n        _this.toast.error(error.error.error.message);\n      });\n    })();\n  }\n};\nDonorHomeComponent = __decorate([Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})], DonorHomeComponent);\nexport { DonorHomeComponent };","map":{"version":3,"mappingseAAe;AAIzC,SAAqBC,GAAG,QAAQ,MAAM;AACtC,OAAOC,IAAI,MAAM,aAAa;AAC9B;AAOO,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAK7BC,YACUC,KAAsB,EACtBC,MAAc,EACdC,KAAqB,EACrBC,gBAAkC,EAClCC,cAAqC;IAJrC,UAAK,GAALJ,KAAK;IACL,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IACL,qBAAgB,GAAhBC,gBAAgB;IAChB,mBAAc,GAAdC,cAAc;IATxB,oBAAe,GAAQ,EAAE;EAUtB;EAEHC,QAAQ;IACN,MAAMC,kBAAkB,GAAG,IAAI,CAACF,cAAc,CAACG,GAAG,CAAC,SAAS,CAAC;IAC7D,IAAID,kBAAkB,EAAE;MACtB,IAAI,CAACE,OAAO,GAAGF,kBAAkB;KAClC,MAAM;MACL,IAAI,CAACE,OAAO,GAAGC,MAAM,CAAC,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACC,QAAQ,CAACJ,GAAG,CAAC,IAAI,CAAC,CAAC;MAC7D,IAAI,CAACH,cAAc,CAACQ,GAAG,CAAC,SAAS,EAAE,IAAI,CAACJ,OAAO,CAAC;;IAElD,IAAI,CAACA,OAAO,GAAGC,MAAM,CAAC,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACC,QAAQ,CAACJ,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7DM,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,OAAO,CAAC;IACzBK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,eAAe,CAAC;IACjCC,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC,EAAE,EAAEC,QAAQ,CAACC,KAAK,EAAE,GAAG,GAAG,YAAY,CAAC;IAChE,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACd,OAAO,CAAC;EAC1C;EAEAa,SAAS;IACP,IAAI,CAAClB,gBAAgB,CAACoB,QAAQ,EAAE,CAACC,SAAS,CACvCC,IAAS,IAAI;MACZ,IAAI,CAACC,KAAK,GAAGD,IAAI;MACjB;IACF,CAAC,CACF;EACH;;EAEAE,qBAAqB,CAACC,UAAe;IACnC,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;IAC9C,IAAIC,aAAqB;IACzB,IAAIC,MAAc;IAElB,IAAIJ,KAAK,GAAG,EAAE,EAAE;MACdG,aAAa,GAAGH,KAAK;MACrBI,MAAM,GAAG,IAAI;KACd,MAAM;MACLD,aAAa,GAAGH,KAAK,GAAG,EAAE;MAC1BI,MAAM,GAAG,IAAI;;IAGf,OAAO,GAAGD,aAAa,IAAIF,OAAO,IAAIG,MAAM,EAAE;EAChD;EAEAC,YAAY,CAACC,IAAS,EAAEC,OAAe;IACrC,MAAMC,MAAM,GAAGF,IAAI,CAACG,EAAE;IACtB,MAAMC,IAAI,GAAG;MACXF,MAAM;MACND;KACD;IAED,OAAO,IAAI,CAACjC,gBAAgB,CAACqC,UAAU,CAACD,IAAI,CAAC,CAACE,IAAI,CAChD7C,GAAG,CAAE6B,IAAS,IAAKA,IAAI,CAACS,YAAY,CAAC,CACtC;EACH;EAEAZ,qBAAqB,CAACc,OAAe;IACnC,IAAI,CAACjC,gBAAgB,CAACuC,eAAe,CAACN,OAAO,CAAC,CAACZ,SAAS,CACrDC,IAAS,IAAI;MACZ;MACA,IAAI,CAACV,eAAe,GAAGU,IAAI,CAACkB,MAAM,CAAC,CAACC,MAAW,EAAET,IAAS,KAAI;QAC5DS,MAAM,CAACT,IAAI,CAACG,EAAE,CAAC,GAAG,IAAI;QACtB,OAAOM,MAAM;MACf,CAAC,EAAE,EAAE,CAAC;IACR,CAAC,CACF;EACH;EAEAC,aAAa,CAACV,IAAS;IACrB;IACA,MAAMD,YAAY,GAAG,IAAI,CAACnB,eAAe,CAACoB,IAAI,CAACG,EAAE,CAAC,IAAI,KAAK;IAE3D,IAAIJ,YAAY,EAAE;MAChB,IAAI,CAACY,cAAc,CAACX,IAAI,CAAC;KAC1B,MAAM;MACL,IAAI,CAACY,YAAY,CAACZ,IAAI,CAAC;;EAE3B;EAEAY,YAAY,CAACZ,IAAS;IACpB,MAAME,MAAM,GAAGF,IAAI,CAACG,EAAE;IACtB,MAAMF,OAAO,GAAG,IAAI,CAAC5B,OAAO;IAC5B,MAAM+B,IAAI,GAAG;MACXF,MAAM;MACND;KACD;IAEDvB,OAAO,CAACC,GAAG,CAACyB,IAAI,CAAC;IAEjB,IAAI,CAACpC,gBAAgB,CAAC6C,aAAa,CAACT,IAAI,CAAC,CAACf,SAAS,CAChDC,IAAS,IAAI;MACZ,IAAI,CAACzB,KAAK,CAACiD,OAAO,CAAC,yBAAyB,CAAC;MAC7C,IAAI,CAAClC,eAAe,CAACoB,IAAI,CAACG,EAAE,CAAC,GAAG,IAAI;IACtC,CAAC,EACAY,KAAU,IAAI;MACb,IAAI,CAAClD,KAAK,CAACkD,KAAK,CAACA,KAAK,CAACA,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;IAC7C,CAAC,CACF;EACH;EAEML,cAAc,CAACX,IAAS;IAAA;IAAA;MAC5B,MAAMiB,YAAY,SAASvD,IAAI,CAACwD,IAAI,CAAC;QACnCjC,KAAK,EAAE,eAAe;QACtBkC,IAAI,EAAE,kCAAkC;QACxCC,IAAI,EAAE,UAAU;QAChBC,gBAAgB,EAAE,IAAI;QACtBC,kBAAkB,EAAE,SAAS;QAC7BC,iBAAiB,EAAE,MAAM;QACzBC,iBAAiB,EAAE;OACpB,CAAC;MACF,IAAG,CAACP,YAAY,CAACQ,WAAW,EAAE;MAE9B,MAAMvB,MAAM,GAAGF,IAAI,CAACG,EAAE;MACtB,MAAMF,OAAO,GAAG,KAAI,CAAC5B,OAAO;MAC5B,MAAM+B,IAAI,GAAG;QACXF,MAAM;QACND;OACD;MAED,KAAI,CAACjC,gBAAgB,CAAC0D,eAAe,CAACtB,IAAI,CAAC,CAACf,SAAS,CAClDC,IAAS,IAAI;QACZ,KAAI,CAACzB,KAAK,CAACiD,OAAO,CAAC,2BAA2B,CAAC;QAC/C,KAAI,CAAClC,eAAe,CAACoB,IAAI,CAACG,EAAE,CAAC,GAAG,KAAK;MACvC,CAAC,EACAY,KAAU,IAAI;QACb,KAAI,CAAClD,KAAK,CAACkD,KAAK,CAACA,KAAK,CAACA,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;MAC7C,CAAC,CACF;IAAC;EACJ;CACD;AA3IYrD,kBAAkB,eAL9BH,SAAS,CAAC;EACTmE,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACWlE,kBAAkB,CA2I9B;SA3IYA,kBAAkB","names":["Component","map","Swal","DonorHomeComponent","constructor","toast","router","route","bloodBankService","sessionStorage","ngOnInit","donorIDFromStorage","get","donorID","Number","snapshot","paramMap","set","console","log","registeredCamps","window","history","pushState","document","title","postCamps","getRegistrationStatus","getCamps","subscribe","data","camps","convertTo12HourFormat","timeString","hours","minutes","split","formattedTime","period","isRegistered","camp","donorId","campId","id","item","isRegister","pipe","campsRegistered","reduce","result","onButtonClick","unregisterCamp","registerCamp","registerDonor","success","error","message","shouldDelete","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","unregisterDonor","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\donor-home\\donor-home.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { HotToastService } from '@ngneat/hot-toast';\n// import { BloodBankService } from '../blood-bank.service';\n// import { Observable, map } from 'rxjs';\n// import Swal from 'sweetalert2';\n\n// @Component({\n//   selector: 'app-donor-home',\n//   templateUrl: './donor-home.component.html',\n//   styleUrls: ['./donor-home.component.css']\n// })\n// export class DonorHomeComponent {\n//   registeredCamps: any = {};\n//   camps: any;\n\n//   constructor(\n//     private toast: HotToastService,\n//     private router: Router,\n//     private route: ActivatedRoute,\n//     private bloodBankService: BloodBankService\n//   ) {}\n\n//   ngOnInit(): void {\n//     this.postCamps();\n//     // this.getRegistrationStatus();\n//   }\n\n//   postCamps(): void {\n//     this.bloodBankService.getCamps().subscribe(\n//       (data: any) => {\n//         this.camps = data;\n//         // console.log(data);\n//       }\n//     );\n//   }\n\n//   convertTo12HourFormat(timeString: any): string {\n//     const [hours, minutes] = timeString.split(\":\");\n//     let formattedTime: number;\n//     let period: string;\n\n//     if (hours < 12) {\n//       formattedTime = hours;\n//       period = \"AM\";\n//     } else {\n//       formattedTime = hours % 12;\n//       period = \"PM\";\n//     }\n\n//     return `${formattedTime}:${minutes} ${period}`;\n//   }\n\n//   isRegistered(camp: any): Observable<boolean> {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     console.log(donorId)\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     return this.bloodBankService.isRegister(item).pipe(\n//       map((data: any) => data.isRegistered)\n//     );\n//   }\n\n//   getRegistrationStatus(): void {\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     this.bloodBankService.campsRegistered(donorId).subscribe(\n//       (data: any) => {\n//         // console.log(data);\n//         this.registeredCamps = data.reduce((result: any, camp: any) => {\n//           result[camp.id] = true;\n//           return result;\n//         }, {});\n//       }\n//     );\n//   }\n\n//   onButtonClick(camp: any) {\n//     const isRegistered = this.registeredCamps[camp.id] || false;\n\n//     if (isRegistered) {\n//       this.unregisterCamp(camp);\n//     } else {\n//       this.registerCamp(camp);\n//     }\n//   }\n\n//   registerCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     this.bloodBankService.registerDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Registered successfully');\n//         this.registeredCamps[camp.id] = true;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n\n//   async unregisterCamp(camp: any) {\n//     const shouldDelete = await Swal.fire({\n//       title: 'Are you sure?',\n//       text: 'You want to unregister from camp',\n//       icon: 'question',\n//       showCancelButton: true,\n//       confirmButtonColor: '#3085d6',\n//       cancelButtonColor: '#d33',\n//       confirmButtonText: 'Yes'\n//     });\n//     if(!shouldDelete.isConfirmed) return;\n\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     this.bloodBankService.unregisterDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Unregistered successfully');\n//         this.registeredCamps[camp.id] = false;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n// }\n\n\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HotToastService } from '@ngneat/hot-toast';\nimport { BloodBankService } from '../blood-bank.service';\nimport { Observable, map } from 'rxjs';\nimport Swal from 'sweetalert2';\n// import { SessionStorageService } from 'ngx-webstorage-service';/\n\n@Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})\nexport class DonorHomeComponent {\n  registeredCamps: any = {};\n  camps: any;\n  donorID: any\n\n  constructor(\n    private toast: HotToastService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private bloodBankService: BloodBankService,\n    private sessionStorage: SessionStorageService\n  ) {}\n\n  ngOnInit(): void {\n    const donorIDFromStorage = this.sessionStorage.get('donorID');\n    if (donorIDFromStorage) {\n      this.donorID = donorIDFromStorage;\n    } else {\n      this.donorID = Number(this.route.snapshot.paramMap.get('id'));\n      this.sessionStorage.set('donorID', this.donorID);\n    }\n    this.donorID = Number(this.route.snapshot.paramMap.get('id'))\n    console.log(this.donorID)\n    console.log(this.registeredCamps)\n    window.history.pushState({}, document.title, \"/\" + \"donor-home\");\n    this.postCamps();\n    this.getRegistrationStatus(this.donorID);\n  }\n\n  postCamps(): void {\n    this.bloodBankService.getCamps().subscribe(\n      (data: any) => {\n        this.camps = data;\n        // console.log(data);\n      }\n    );\n  }\n\n  convertTo12HourFormat(timeString: any): string {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime: number;\n    let period: string;\n\n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n\n    return `${formattedTime}:${minutes} ${period}`;\n  }\n\n  isRegistered(camp: any, donorId: number): Observable<boolean> {\n    const campId = camp.id;\n    const item = {\n      campId,\n      donorId\n    };\n\n    return this.bloodBankService.isRegister(item).pipe(\n      map((data: any) => data.isRegistered)\n    );\n  }\n\n  getRegistrationStatus(donorId: number): void {\n    this.bloodBankService.campsRegistered(donorId).subscribe(\n      (data: any) => {\n        // console.log(data);\n        this.registeredCamps = data.reduce((result: any, camp: any) => {\n          result[camp.id] = true;\n          return result;\n        }, {});\n      }\n    );\n  }\n\n  onButtonClick(camp: any) {\n    // const donorId = Number(this.route.snapshot.queryParams['id']);\n    const isRegistered = this.registeredCamps[camp.id] || false;\n\n    if (isRegistered) {\n      this.unregisterCamp(camp);\n    } else {\n      this.registerCamp(camp);\n    }\n  }\n\n  registerCamp(camp: any) {\n    const campId = camp.id;\n    const donorId = this.donorID;\n    const item = {\n      campId,\n      donorId\n    };\n\n    console.log(item)\n\n    this.bloodBankService.registerDonor(item).subscribe(\n      (data: any) => {\n        this.toast.success('Registered successfully');\n        this.registeredCamps[camp.id] = true;\n      },\n      (error: any) => {\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n\n  async unregisterCamp(camp: any) {\n    const shouldDelete = await Swal.fire({\n      title: 'Are you sure?',\n      text: 'You want to unregister from camp',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes'\n    });\n    if(!shouldDelete.isConfirmed) return;\n\n    const campId = camp.id;\n    const donorId = this.donorID;\n    const item = {\n      campId,\n      donorId\n    };\n\n    this.bloodBankService.unregisterDonor(item).subscribe(\n      (data: any) => {\n        this.toast.success('Unregistered successfully');\n        this.registeredCamps[camp.id] = false;\n      },\n      (error: any) => {\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}