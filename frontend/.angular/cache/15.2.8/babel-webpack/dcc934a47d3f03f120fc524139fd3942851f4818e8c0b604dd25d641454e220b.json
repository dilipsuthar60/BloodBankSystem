{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./blood-bank.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ngneat/hot-toast\";\nexport class AuthService {\n  constructor(bloodBankService, router, toast) {\n    this.bloodBankService = bloodBankService;\n    this.router = router;\n    this.toast = toast;\n  }\n  adminLogin(item) {\n    this.bloodBankService.adminLogin(item).pipe(this.toast.observe({\n      loading: 'Log In...',\n      success: s => 'Admin LoggedIn Successfully',\n      error: e => e.error.error.message\n    })).subscribe(data => {\n      // console.log(data)\n      sessionStorage.setItem('isAdminLoggedIn', 'true');\n      this.router.navigate(['admin-home']);\n    });\n  }\n  isAdminLoggedIn() {\n    let isAdminLoggedIn = sessionStorage.getItem('isAdminLoggedIn');\n    return isAdminLoggedIn ? JSON.parse(isAdminLoggedIn) : false;\n  }\n  donorLogin(item) {\n    this.bloodBankService.donorLogin(item).pipe(this.toast.observe({\n      loading: 'Log In...',\n      success: s => 'Donor LoggedIn Successfully',\n      error: e => e.error.error.message\n    })).subscribe(data => {\n      console.log(data);\n      this.router.navigate([]);\n      sessionStorage.setItem('isDonorLoggedIn', 'true');\n    });\n  }\n  isDonorLoggedIn() {\n    let isDonorLoggedIn = sessionStorage.getItem('isDonorLoggedIn');\n    return isDonorLoggedIn ? JSON.parse(isDonorLoggedIn) : false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.BloodBankService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HotToastService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAQA,OAAM,MAAOA,WAAW;EAGtBC,YACUC,gBAAkC,EAClCC,MAAc,EACdC,KAAsB;IAFtB,qBAAgB,GAAhBF,gBAAgB;IAChB,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;EAGf;EAEAC,UAAU,CAACC,IAAS;IAClB,IAAI,CAACJ,gBAAgB,CAACG,UAAU,CAACC,IAAI,CAAC,CAACC,IAAI,CACzC,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC;MACjBC,OAAO,EAAE,WAAW;MACpBC,OAAO,EAAGC,CAAC,IAAK,6BAA6B;MAC7CC,KAAK,EAAGC,CAAC,IAAKA,CAAC,CAACD,KAAK,CAACA,KAAK,CAACE;KAC7B,CAAC,CACH,CAACC,SAAS,CACRC,IAAS,IAAI;MACZ;MACAC,cAAc,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;MACjD,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC,CACF;EACH;EAEAC,eAAe;IACb,IAAIA,eAAe,GAAGH,cAAc,CAACI,OAAO,CAAC,iBAAiB,CAAC;IAE/D,OAAOD,eAAe,GAAGE,IAAI,CAACC,KAAK,CAACH,eAAe,CAAC,GAAG,KAAK;EAC9D;EAEAI,UAAU,CAAClB,IAAS;IAClB,IAAI,CAACJ,gBAAgB,CAACsB,UAAU,CAAClB,IAAI,CAAC,CAACC,IAAI,CACzC,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC;MACjBC,OAAO,EAAE,WAAW;MACpBC,OAAO,EAAGC,CAAC,IAAK,6BAA6B;MAC7CC,KAAK,EAAGC,CAAC,IAAKA,CAAC,CAACD,KAAK,CAACA,KAAK,CAACE;KAC7B,CAAC,CACH,CAACC,SAAS,CACRC,IAAS,IAAI;MACZS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;MACjB,IAAI,CAACb,MAAM,CAACgB,QAAQ,CAAC,EAAE,CAAC;MACxBF,cAAc,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;IACnD,CAAC,CACF;EACH;EAEAS,eAAe;IACb,IAAIA,eAAe,GAAGV,cAAc,CAACI,OAAO,CAAC,iBAAiB,CAAC;IAE/D,OAAOM,eAAe,GAAGL,IAAI,CAACC,KAAK,CAACI,eAAe,CAAC,GAAG,KAAK;EAC9D;;AArDW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["AuthService","constructor","bloodBankService","router","toast","adminLogin","item","pipe","observe","loading","success","s","error","e","message","subscribe","data","sessionStorage","setItem","navigate","isAdminLoggedIn","getItem","JSON","parse","donorLogin","console","log","isDonorLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BloodBankService } from './blood-bank.service';\r\nimport { HotToastService } from '@ngneat/hot-toast';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  \r\n\r\n  constructor(\r\n    private bloodBankService: BloodBankService,\r\n    private router: Router,\r\n    private toast: HotToastService,\r\n  ) {\r\n    \r\n  }\r\n\r\n  adminLogin(item: any): void {\r\n    this.bloodBankService.adminLogin(item).pipe(\r\n      this.toast.observe({\r\n        loading: 'Log In...',\r\n        success: (s) => 'Admin LoggedIn Successfully',\r\n        error: (e) => e.error.error.message\r\n      })\r\n    ).subscribe(\r\n      (data: any) => {\r\n        // console.log(data)\r\n        sessionStorage.setItem('isAdminLoggedIn', 'true');\r\n        this.router.navigate(['admin-home'])\r\n      }\r\n    );\r\n  }\r\n\r\n  isAdminLoggedIn(): boolean {\r\n    let isAdminLoggedIn = sessionStorage.getItem('isAdminLoggedIn');\r\n\r\n    return isAdminLoggedIn ? JSON.parse(isAdminLoggedIn) : false;\r\n  }\r\n\r\n  donorLogin(item: any): void {\r\n    this.bloodBankService.donorLogin(item).pipe(\r\n      this.toast.observe({\r\n        loading: 'Log In...',\r\n        success: (s) => 'Donor LoggedIn Successfully',\r\n        error: (e) => e.error.error.message\r\n      })\r\n    ).subscribe(\r\n      (data: any) => {\r\n        console.log(data)\r\n        this.router.navigate([])\r\n        sessionStorage.setItem('isDonorLoggedIn', 'true');\r\n      }\r\n    );\r\n  }\r\n\r\n  isDonorLoggedIn(): boolean {\r\n    let isDonorLoggedIn = sessionStorage.getItem('isDonorLoggedIn');\r\n\r\n    return isDonorLoggedIn ? JSON.parse(isDonorLoggedIn) : false;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}