{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DonorHomeComponent = class DonorHomeComponent {\n  constructor(toast, router, route, bloodBankService) {\n    this.toast = toast;\n    this.router = router;\n    this.route = route;\n    this.bloodBankService = bloodBankService;\n  }\n  ngOnInit() {\n    this.postCamps();\n  }\n  postCamps() {\n    this.bloodBankService.getCamps().subscribe(data => {\n      this.camps = data;\n      console.log(data);\n    });\n  }\n  convertTo12HourFormat(timeString) {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime;\n    let period;\n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n    return `${formattedTime}:${minutes} ${period}`;\n  }\n  // isRegistered(camp: any): Observable<boolean> {\n  //   const campId = camp.id;\n  //   const donorId = Number(this.route.snapshot.paramMap.get('id'));\n  //   const item = {\n  //     campId,\n  //     donorId\n  //   };\n  //   return this.bloodBankService.isRegister(item).pipe(\n  //     map((data: any) => data.isRegistered)\n  //   );\n  // }\n  isRegistered(camp) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    let isRegistered = false;\n    this.bloodBankService.isRegister(item).subscribe(data => {\n      isRegistered = data.isRegistered;\n    }, error => {\n      console.error(error);\n    });\n    return isRegistered;\n  }\n  onButtonClick(camp) {\n    // this.isRegistered(camp).subscribe(\n    //   (isRegistered: boolean) => {\n    //     // console.log(isRegistered)\n    //     if (isRegistered) {\n    //       this.unregisterCamp(camp);\n    //     } else {\n    //       this.registerCamp(camp);\n    //     }\n    //   },\n    //   (error: any) => {\n    //     console.error(error);\n    //   }\n    // );\n    if (this.isRegistered(camp)) {\n      this.unregisterCamp(camp);\n    } else {\n      this.registerCamp(camp);\n    }\n  }\n  registerCamp(camp) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    this.bloodBankService.registerDonor(item).subscribe(data => {\n      // console.log(data)\n      this.toast.success('Registered successfully');\n    }, error => {\n      // console.log(error)\n      this.toast.error(error.error.error.message);\n    });\n  }\n  unregisterCamp(camp) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    this.bloodBankService.unregisterDonor(item).subscribe(data => {\n      // console.log(data)\n      this.toast.success('Unregistered successfully');\n    }, error => {\n      this.toast.error(error.error.error.message);\n    });\n  }\n};\nDonorHomeComponent = __decorate([Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})], DonorHomeComponent);\nexport { DonorHomeComponent };","map":{"version":3,"mappings":"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","names":["Component","DonorHomeComponent","constructor","toast","router","route","bloodBankService","ngOnInit","postCamps","getCamps","subscribe","data","camps","console","log","convertTo12HourFormat","timeString","hours","minutes","split","formattedTime","period","isRegistered","camp","campId","id","donorId","Number","snapshot","paramMap","get","item","isRegister","error","onButtonClick","unregisterCamp","registerCamp","registerDonor","success","message","unregisterDonor","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\donor-home\\donor-home.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HotToastService } from '@ngneat/hot-toast';\nimport { BloodBankService } from '../blood-bank.service';\nimport { Observable, map } from 'rxjs';\n\n@Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})\nexport class DonorHomeComponent {\n  camps: any;\n\n  constructor(\n    private toast: HotToastService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private bloodBankService: BloodBankService\n  ) {}\n\n  ngOnInit(): void {\n    this.postCamps();\n  }\n\n  postCamps(): void {\n    this.bloodBankService.getCamps().subscribe(\n      (data: any) => {\n        this.camps = data\n        console.log(data)\n      }\n    )\n  }\n\n  convertTo12HourFormat(timeString: any): string {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime: number;\n    let period: string;\n  \n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n  \n    return `${formattedTime}:${minutes} ${period}`;\n  }\n\n\n  // isRegistered(camp: any): Observable<boolean> {\n  //   const campId = camp.id;\n  //   const donorId = Number(this.route.snapshot.paramMap.get('id'));\n  //   const item = {\n  //     campId,\n  //     donorId\n  //   };\n  \n  //   return this.bloodBankService.isRegister(item).pipe(\n  //     map((data: any) => data.isRegistered)\n  //   );\n  // }\n\n  isRegistered(camp: any): boolean {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n  \n    let isRegistered = false;\n  \n    this.bloodBankService.isRegister(item).subscribe(\n      (data: any) => {\n        isRegistered = data.isRegistered;\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n  \n    return isRegistered;\n  }\n  \n  onButtonClick(camp: any) {\n    // this.isRegistered(camp).subscribe(\n    //   (isRegistered: boolean) => {\n    //     // console.log(isRegistered)\n    //     if (isRegistered) {\n    //       this.unregisterCamp(camp);\n    //     } else {\n    //       this.registerCamp(camp);\n    //     }\n    //   },\n    //   (error: any) => {\n    //     console.error(error);\n    //   }\n    // );\n\n    if(this.isRegistered(camp)){\n      this.unregisterCamp(camp)\n    } else {\n      this.registerCamp(camp)\n    }\n  }\n  \n  registerCamp(camp: any) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    this.bloodBankService.registerDonor(item).subscribe(\n      (data: any) => {\n        // console.log(data)\n        this.toast.success('Registered successfully');\n      },\n      (error: any) => {\n        // console.log(error)\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n  \n  unregisterCamp(camp: any) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    this.bloodBankService.unregisterDonor(item).subscribe(\n      (data: any) => {\n        // console.log(data)\n        this.toast.success('Unregistered successfully');\n      },\n      (error: any) => {\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}