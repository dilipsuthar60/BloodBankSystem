{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hp/Documents/Arcs Infotech/blood-bank-system/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { map } from 'rxjs';\nimport Swal from 'sweetalert2';\nlet DonorHomeComponent = class DonorHomeComponent {\n  constructor(toast, router, route, root, bloodBankService) {\n    this.toast = toast;\n    this.router = router;\n    this.route = route;\n    this.root = root;\n    this.bloodBankService = bloodBankService;\n    this.registeredCamps = {};\n  }\n  ngOnInit() {\n    this.postCamps();\n    this.getRegistrationStatus();\n  }\n  postCamps() {\n    this.bloodBankService.getCamps().subscribe(data => {\n      this.camps = data;\n      // console.log(data);\n    });\n  }\n\n  convertTo12HourFormat(timeString) {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime;\n    let period;\n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n    return `${formattedTime}:${minutes} ${period}`;\n  }\n  isRegistered(camp) {\n    const campId = camp.id;\n    console.log(this.route.snapshot.root.firstChild?.snapshot.state.donorId);\n    // console.log(this.route.snapshot.routerState.root.firstChild?.snapshot.data.donorId;)\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    return this.bloodBankService.isRegister(item).pipe(map(data => data.isRegistered));\n  }\n  getRegistrationStatus() {\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    this.bloodBankService.campsRegistered(donorId).subscribe(data => {\n      // console.log(data);\n      this.registeredCamps = data.reduce((result, camp) => {\n        result[camp.id] = true;\n        return result;\n      }, {});\n    });\n  }\n  onButtonClick(camp) {\n    const isRegistered = this.registeredCamps[camp.id] || false;\n    if (isRegistered) {\n      this.unregisterCamp(camp);\n    } else {\n      this.registerCamp(camp);\n    }\n  }\n  registerCamp(camp) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    this.bloodBankService.registerDonor(item).subscribe(data => {\n      this.toast.success('Registered successfully');\n      this.registeredCamps[camp.id] = true;\n    }, error => {\n      this.toast.error(error.error.error.message);\n    });\n  }\n  unregisterCamp(camp) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const shouldDelete = yield Swal.fire({\n        title: 'Are you sure?',\n        text: 'You want to unregister from camp',\n        icon: 'question',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes'\n      });\n      if (!shouldDelete.isConfirmed) return;\n      const campId = camp.id;\n      const donorId = Number(_this.route.snapshot.paramMap.get('id'));\n      const item = {\n        campId,\n        donorId\n      };\n      _this.bloodBankService.unregisterDonor(item).subscribe(data => {\n        _this.toast.success('Unregistered successfully');\n        _this.registeredCamps[camp.id] = false;\n      }, error => {\n        _this.toast.error(error.error.error.message);\n      });\n    })();\n  }\n};\nDonorHomeComponent = __decorate([Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})], DonorHomeComponent);\nexport { DonorHomeComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAIzC,SAAqBC,GAAG,QAAQ,MAAM;AACtC,OAAOC,IAAI,MAAM,aAAa;AAOvB,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAI7BC,YACUC,KAAsB,EACtBC,MAAc,EACdC,KAAqB,EACrBC,IAAQ,EACRC,gBAAkC;IAJlC,UAAK,GAALJ,KAAK;IACL,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IACL,SAAI,GAAJC,IAAI;IACJ,qBAAgB,GAAhBC,gBAAgB;IAR1B,oBAAe,GAAQ,EAAE;EAStB;EAEHC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,qBAAqB,EAAE;EAC9B;EAEAD,SAAS;IACP,IAAI,CAACF,gBAAgB,CAACI,QAAQ,EAAE,CAACC,SAAS,CACvCC,IAAS,IAAI;MACZ,IAAI,CAACC,KAAK,GAAGD,IAAI;MACjB;IACF,CAAC,CACF;EACH;;EAEAE,qBAAqB,CAACC,UAAe;IACnC,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;IAC9C,IAAIC,aAAqB;IACzB,IAAIC,MAAc;IAElB,IAAIJ,KAAK,GAAG,EAAE,EAAE;MACdG,aAAa,GAAGH,KAAK;MACrBI,MAAM,GAAG,IAAI;KACd,MAAM;MACLD,aAAa,GAAGH,KAAK,GAAG,EAAE;MAC1BI,MAAM,GAAG,IAAI;;IAGf,OAAO,GAAGD,aAAa,IAAIF,OAAO,IAAIG,MAAM,EAAE;EAChD;EAEAC,YAAY,CAACC,IAAS;IACpB,MAAMC,MAAM,GAAGD,IAAI,CAACE,EAAE;IACtBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,KAAK,CAACuB,QAAQ,CAACtB,IAAI,CAACuB,UAAU,EAAED,QAAQ,CAACE,KAAK,CAACC,OAAO;IACvE;IACA,MAAMA,OAAO,GAAGC,MAAM,CAAC,IAAI,CAAC3B,KAAK,CAACuB,QAAQ,CAACK,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9D,MAAMC,IAAI,GAAG;MACXX,MAAM;MACNO;KACD;IAED,OAAO,IAAI,CAACxB,gBAAgB,CAAC6B,UAAU,CAACD,IAAI,CAAC,CAACE,IAAI,CAChDtC,GAAG,CAAEc,IAAS,IAAKA,IAAI,CAACS,YAAY,CAAC,CACtC;EACH;EAEAZ,qBAAqB;IACnB,MAAMqB,OAAO,GAAGC,MAAM,CAAC,IAAI,CAAC3B,KAAK,CAACuB,QAAQ,CAACK,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9D,IAAI,CAAC3B,gBAAgB,CAAC+B,eAAe,CAACP,OAAO,CAAC,CAACnB,SAAS,CACrDC,IAAS,IAAI;MACZ;MACA,IAAI,CAAC0B,eAAe,GAAG1B,IAAI,CAAC2B,MAAM,CAAC,CAACC,MAAW,EAAElB,IAAS,KAAI;QAC5DkB,MAAM,CAAClB,IAAI,CAACE,EAAE,CAAC,GAAG,IAAI;QACtB,OAAOgB,MAAM;MACf,CAAC,EAAE,EAAE,CAAC;IACR,CAAC,CACF;EACH;EAEAC,aAAa,CAACnB,IAAS;IACrB,MAAMD,YAAY,GAAG,IAAI,CAACiB,eAAe,CAAChB,IAAI,CAACE,EAAE,CAAC,IAAI,KAAK;IAE3D,IAAIH,YAAY,EAAE;MAChB,IAAI,CAACqB,cAAc,CAACpB,IAAI,CAAC;KAC1B,MAAM;MACL,IAAI,CAACqB,YAAY,CAACrB,IAAI,CAAC;;EAE3B;EAEAqB,YAAY,CAACrB,IAAS;IACpB,MAAMC,MAAM,GAAGD,IAAI,CAACE,EAAE;IACtB,MAAMM,OAAO,GAAGC,MAAM,CAAC,IAAI,CAAC3B,KAAK,CAACuB,QAAQ,CAACK,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9D,MAAMC,IAAI,GAAG;MACXX,MAAM;MACNO;KACD;IAED,IAAI,CAACxB,gBAAgB,CAACsC,aAAa,CAACV,IAAI,CAAC,CAACvB,SAAS,CAChDC,IAAS,IAAI;MACZ,IAAI,CAACV,KAAK,CAAC2C,OAAO,CAAC,yBAAyB,CAAC;MAC7C,IAAI,CAACP,eAAe,CAAChB,IAAI,CAACE,EAAE,CAAC,GAAG,IAAI;IACtC,CAAC,EACAsB,KAAU,IAAI;MACb,IAAI,CAAC5C,KAAK,CAAC4C,KAAK,CAACA,KAAK,CAACA,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;IAC7C,CAAC,CACF;EACH;EAEML,cAAc,CAACpB,IAAS;IAAA;IAAA;MAC5B,MAAM0B,YAAY,SAASjD,IAAI,CAACkD,IAAI,CAAC;QACnCC,KAAK,EAAE,eAAe;QACtBC,IAAI,EAAE,kCAAkC;QACxCC,IAAI,EAAE,UAAU;QAChBC,gBAAgB,EAAE,IAAI;QACtBC,kBAAkB,EAAE,SAAS;QAC7BC,iBAAiB,EAAE,MAAM;QACzBC,iBAAiB,EAAE;OACpB,CAAC;MACF,IAAG,CAACR,YAAY,CAACS,WAAW,EAAE;MAE9B,MAAMlC,MAAM,GAAGD,IAAI,CAACE,EAAE;MACtB,MAAMM,OAAO,GAAGC,MAAM,CAAC,KAAI,CAAC3B,KAAK,CAACuB,QAAQ,CAACK,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;MAC9D,MAAMC,IAAI,GAAG;QACXX,MAAM;QACNO;OACD;MAED,KAAI,CAACxB,gBAAgB,CAACoD,eAAe,CAACxB,IAAI,CAAC,CAACvB,SAAS,CAClDC,IAAS,IAAI;QACZ,KAAI,CAACV,KAAK,CAAC2C,OAAO,CAAC,2BAA2B,CAAC;QAC/C,KAAI,CAACP,eAAe,CAAChB,IAAI,CAACE,EAAE,CAAC,GAAG,KAAK;MACvC,CAAC,EACAsB,KAAU,IAAI;QACb,KAAI,CAAC5C,KAAK,CAAC4C,KAAK,CAACA,KAAK,CAACA,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;MAC7C,CAAC,CACF;IAAC;EACJ;CACD;AAhIY/C,kBAAkB,eAL9BH,SAAS,CAAC;EACT8D,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW7D,kBAAkB,CAgI9B;SAhIYA,kBAAkB","names":["Component","map","Swal","DonorHomeComponent","constructor","toast","router","route","root","bloodBankService","ngOnInit","postCamps","getRegistrationStatus","getCamps","subscribe","data","camps","convertTo12HourFormat","timeString","hours","minutes","split","formattedTime","period","isRegistered","camp","campId","id","console","log","snapshot","firstChild","state","donorId","Number","paramMap","get","item","isRegister","pipe","campsRegistered","registeredCamps","reduce","result","onButtonClick","unregisterCamp","registerCamp","registerDonor","success","error","message","shouldDelete","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","unregisterDonor","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\donor-home\\donor-home.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HotToastService } from '@ngneat/hot-toast';\nimport { BloodBankService } from '../blood-bank.service';\nimport { Observable, map } from 'rxjs';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})\nexport class DonorHomeComponent {\n  registeredCamps: any = {};\n  camps: any;\n\n  constructor(\n    private toast: HotToastService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private root: Ac\n    private bloodBankService: BloodBankService\n  ) {}\n\n  ngOnInit(): void {\n    this.postCamps();\n    this.getRegistrationStatus();\n  }\n\n  postCamps(): void {\n    this.bloodBankService.getCamps().subscribe(\n      (data: any) => {\n        this.camps = data;\n        // console.log(data);\n      }\n    );\n  }\n\n  convertTo12HourFormat(timeString: any): string {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime: number;\n    let period: string;\n\n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n\n    return `${formattedTime}:${minutes} ${period}`;\n  }\n\n  isRegistered(camp: any): Observable<boolean> {\n    const campId = camp.id;\n    console.log(this.route.snapshot.root.firstChild?.snapshot.state.donorId;)\n    // console.log(this.route.snapshot.routerState.root.firstChild?.snapshot.data.donorId;)\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    return this.bloodBankService.isRegister(item).pipe(\n      map((data: any) => data.isRegistered)\n    );\n  }\n\n  getRegistrationStatus(): void {\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    this.bloodBankService.campsRegistered(donorId).subscribe(\n      (data: any) => {\n        // console.log(data);\n        this.registeredCamps = data.reduce((result: any, camp: any) => {\n          result[camp.id] = true;\n          return result;\n        }, {});\n      }\n    );\n  }\n\n  onButtonClick(camp: any) {\n    const isRegistered = this.registeredCamps[camp.id] || false;\n\n    if (isRegistered) {\n      this.unregisterCamp(camp);\n    } else {\n      this.registerCamp(camp);\n    }\n  }\n\n  registerCamp(camp: any) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    this.bloodBankService.registerDonor(item).subscribe(\n      (data: any) => {\n        this.toast.success('Registered successfully');\n        this.registeredCamps[camp.id] = true;\n      },\n      (error: any) => {\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n\n  async unregisterCamp(camp: any) {\n    const shouldDelete = await Swal.fire({\n      title: 'Are you sure?',\n      text: 'You want to unregister from camp',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes'\n    });\n    if(!shouldDelete.isConfirmed) return;\n\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    this.bloodBankService.unregisterDonor(item).subscribe(\n      (data: any) => {\n        this.toast.success('Unregistered successfully');\n        this.registeredCamps[camp.id] = false;\n      },\n      (error: any) => {\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}