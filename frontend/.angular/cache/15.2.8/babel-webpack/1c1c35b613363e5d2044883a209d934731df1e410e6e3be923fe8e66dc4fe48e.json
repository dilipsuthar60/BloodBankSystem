{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    // Initialize the currentUser object from local storage or API response\n    // this.currentUser = JSON.parse(localStorage.getItem('currentUser'));\n  }\n  login(username, password) {\n    // Perform authentication logic here and set the currentUser object\n    // Example:\n    if (username === 'admin' && password === 'admin123') {\n      this.currentUser = {\n        role: 'admin'\n      };\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n      return true;\n    } else if (username === 'donor' && password === 'donor123') {\n      this.currentUser = {\n        role: 'donor'\n      };\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n      return true;\n    }\n    return false;\n  }\n  logout() {\n    // Clear the currentUser object and remove it from local storage\n    this.currentUser = null;\n    localStorage.removeItem('currentUser');\n  }\n  getUserRole() {\n    // Return the role of the current user\n    return this.currentUser ? this.currentUser.role : null;\n  }\n  isLoggedIn() {\n    // Check if the current user is logged in\n    return this.currentUser !== null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EAGtBC;IACE;IACA;EAAA;EAGFC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA;IACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnD,IAAI,CAACC,WAAW,GAAG;QAAEC,IAAI,EAAE;MAAO,CAAE;MACpCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACL,WAAW,CAAC,CAAC;MACrE,OAAO,IAAI;KACZ,MAAM,IAAIF,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MAC1D,IAAI,CAACC,WAAW,GAAG;QAAEC,IAAI,EAAE;MAAO,CAAE;MACpCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACL,WAAW,CAAC,CAAC;MACrE,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;EAEAM,MAAM;IACJ;IACA,IAAI,CAACN,WAAW,GAAG,IAAI;IACvBE,YAAY,CAACK,UAAU,CAAC,aAAa,CAAC;EACxC;EAEAC,WAAW;IACT;IACA,OAAO,IAAI,CAACR,WAAW,GAAG,IAAI,CAACA,WAAW,CAACC,IAAI,GAAG,IAAI;EACxD;EAEAQ,UAAU;IACR;IACA,OAAO,IAAI,CAACT,WAAW,KAAK,IAAI;EAClC;;AAtCWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAe,SAAXf,WAAW;EAAAgB,YAFV;AAAM","names":["AuthService","constructor","login","username","password","currentUser","role","localStorage","setItem","JSON","stringify","logout","removeItem","getUserRole","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUser: any; // Assuming the user object has a 'role' property\r\n\r\n  constructor() {\r\n    // Initialize the currentUser object from local storage or API response\r\n    // this.currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n  }\r\n\r\n  login(username: string, password: string): boolean {\r\n    // Perform authentication logic here and set the currentUser object\r\n    // Example:\r\n    if (username === 'admin' && password === 'admin123') {\r\n      this.currentUser = { role: 'admin' };\r\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\r\n      return true;\r\n    } else if (username === 'donor' && password === 'donor123') {\r\n      this.currentUser = { role: 'donor' };\r\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  logout(): void {\r\n    // Clear the currentUser object and remove it from local storage\r\n    this.currentUser = null;\r\n    localStorage.removeItem('currentUser');\r\n  }\r\n\r\n  getUserRole(): string {\r\n    // Return the role of the current user\r\n    return this.currentUser ? this.currentUser.role : null;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    // Check if the current user is logged in\r\n    return this.currentUser !== null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}