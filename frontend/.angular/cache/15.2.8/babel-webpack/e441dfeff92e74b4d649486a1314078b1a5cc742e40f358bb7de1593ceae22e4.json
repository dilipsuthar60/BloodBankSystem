{"ast":null,"code":"\"use strict\";\n\n// import { Component } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { HotToastService } from '@ngneat/hot-toast';\n// import { BloodBankService } from '../blood-bank.service';\n// import { Observable, map } from 'rxjs';\n// import Swal from 'sweetalert2';\n// @Component({\n//   selector: 'app-donor-home',\n//   templateUrl: './donor-home.component.html',\n//   styleUrls: ['./donor-home.component.css']\n// })\n// export class DonorHomeComponent {\n//   registeredCamps: any = {};\n//   camps: any;\n//   constructor(\n//     private toast: HotToastService,\n//     private router: Router,\n//     private route: ActivatedRoute,\n//     private bloodBankService: BloodBankService\n//   ) {}\n//   ngOnInit(): void {\n//     this.postCamps();\n//     // this.getRegistrationStatus();\n//   }\n//   postCamps(): void {\n//     this.bloodBankService.getCamps().subscribe(\n//       (data: any) => {\n//         this.camps = data;\n//         // console.log(data);\n//       }\n//     );\n//   }\n//   convertTo12HourFormat(timeString: any): string {\n//     const [hours, minutes] = timeString.split(\":\");\n//     let formattedTime: number;\n//     let period: string;\n//     if (hours < 12) {\n//       formattedTime = hours;\n//       period = \"AM\";\n//     } else {\n//       formattedTime = hours % 12;\n//       period = \"PM\";\n//     }\n//     return `${formattedTime}:${minutes} ${period}`;\n//   }\n//   isRegistered(camp: any): Observable<boolean> {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     console.log(donorId)\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     return this.bloodBankService.isRegister(item).pipe(\n//       map((data: any) => data.isRegistered)\n//     );\n//   }\n//   getRegistrationStatus(): void {\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     this.bloodBankService.campsRegistered(donorId).subscribe(\n//       (data: any) => {\n//         // console.log(data);\n//         this.registeredCamps = data.reduce((result: any, camp: any) => {\n//           result[camp.id] = true;\n//           return result;\n//         }, {});\n//       }\n//     );\n//   }\n//   onButtonClick(camp: any) {\n//     const isRegistered = this.registeredCamps[camp.id] || false;\n//     if (isRegistered) {\n//       this.unregisterCamp(camp);\n//     } else {\n//       this.registerCamp(camp);\n//     }\n//   }\n//   registerCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     this.bloodBankService.registerDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Registered successfully');\n//         this.registeredCamps[camp.id] = true;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n//   async unregisterCamp(camp: any) {\n//     const shouldDelete = await Swal.fire({\n//       title: 'Are you sure?',\n//       text: 'You want to unregister from camp',\n//       icon: 'question',\n//       showCancelButton: true,\n//       confirmButtonColor: '#3085d6',\n//       cancelButtonColor: '#d33',\n//       confirmButtonText: 'Yes'\n//     });\n//     if(!shouldDelete.isConfirmed) return;\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     this.bloodBankService.unregisterDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Unregistered successfully');\n//         this.registeredCamps[camp.id] = false;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n// }","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\donor-home\\donor-home.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { HotToastService } from '@ngneat/hot-toast';\n// import { BloodBankService } from '../blood-bank.service';\n// import { Observable, map } from 'rxjs';\n// import Swal from 'sweetalert2';\n\n// @Component({\n//   selector: 'app-donor-home',\n//   templateUrl: './donor-home.component.html',\n//   styleUrls: ['./donor-home.component.css']\n// })\n// export class DonorHomeComponent {\n//   registeredCamps: any = {};\n//   camps: any;\n\n//   constructor(\n//     private toast: HotToastService,\n//     private router: Router,\n//     private route: ActivatedRoute,\n//     private bloodBankService: BloodBankService\n//   ) {}\n\n//   ngOnInit(): void {\n//     this.postCamps();\n//     // this.getRegistrationStatus();\n//   }\n\n//   postCamps(): void {\n//     this.bloodBankService.getCamps().subscribe(\n//       (data: any) => {\n//         this.camps = data;\n//         // console.log(data);\n//       }\n//     );\n//   }\n\n//   convertTo12HourFormat(timeString: any): string {\n//     const [hours, minutes] = timeString.split(\":\");\n//     let formattedTime: number;\n//     let period: string;\n\n//     if (hours < 12) {\n//       formattedTime = hours;\n//       period = \"AM\";\n//     } else {\n//       formattedTime = hours % 12;\n//       period = \"PM\";\n//     }\n\n//     return `${formattedTime}:${minutes} ${period}`;\n//   }\n\n//   isRegistered(camp: any): Observable<boolean> {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     console.log(donorId)\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     return this.bloodBankService.isRegister(item).pipe(\n//       map((data: any) => data.isRegistered)\n//     );\n//   }\n\n//   getRegistrationStatus(): void {\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     this.bloodBankService.campsRegistered(donorId).subscribe(\n//       (data: any) => {\n//         // console.log(data);\n//         this.registeredCamps = data.reduce((result: any, camp: any) => {\n//           result[camp.id] = true;\n//           return result;\n//         }, {});\n//       }\n//     );\n//   }\n\n//   onButtonClick(camp: any) {\n//     const isRegistered = this.registeredCamps[camp.id] || false;\n\n//     if (isRegistered) {\n//       this.unregisterCamp(camp);\n//     } else {\n//       this.registerCamp(camp);\n//     }\n//   }\n\n//   registerCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     this.bloodBankService.registerDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Registered successfully');\n//         this.registeredCamps[camp.id] = true;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n\n//   async unregisterCamp(camp: any) {\n//     const shouldDelete = await Swal.fire({\n//       title: 'Are you sure?',\n//       text: 'You want to unregister from camp',\n//       icon: 'question',\n//       showCancelButton: true,\n//       confirmButtonColor: '#3085d6',\n//       cancelButtonColor: '#d33',\n//       confirmButtonText: 'Yes'\n//     });\n//     if(!shouldDelete.isConfirmed) return;\n\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     this.bloodBankService.unregisterDonor(item).subscribe(\n//       (data: any) => {\n//         this.toast.success('Unregistered successfully');\n//         this.registeredCamps[camp.id] = false;\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}