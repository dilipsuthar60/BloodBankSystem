{"ast":null,"code":"// import { Component } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { HotToastService } from '@ngneat/hot-toast';\n// import { BloodBankService } from '../blood-bank.service';\n// import { Observable, map } from 'rxjs';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-donor-home',\n//   templateUrl: './donor-home.component.html',\n//   styleUrls: ['./donor-home.component.css']\n// })\n// export class DonorHomeComponent {\n//   registeredCamps: any\n//   camps: any;\n//   constructor(\n//     private toast: HotToastService,\n//     private router: Router,\n//     private route: ActivatedRoute,\n//     private bloodBankService: BloodBankService\n//   ) {}\n//   ngOnInit(): void {\n//     this.postCamps();\n//   }\n//   postCamps(): void {\n//     this.bloodBankService.getCamps().subscribe(\n//       (data: any) => {\n//         this.camps = data\n//         console.log(data)\n//       }\n//     )\n//   }\n//   convertTo12HourFormat(timeString: any): string {\n//     const [hours, minutes] = timeString.split(\":\");\n//     let formattedTime: number;\n//     let period: string;\n//     if (hours < 12) {\n//       formattedTime = hours;\n//       period = \"AM\";\n//     } else {\n//       formattedTime = hours % 12;\n//       period = \"PM\";\n//     }\n//     return `${formattedTime}:${minutes} ${period}`;\n//   }\n//   isRegistered(camp: any): Observable<boolean> {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     return this.bloodBankService.isRegister(item).pipe(\n//       map((data: any) => data.isRegistered)\n//     );\n//   }\n//   onButtonClick(camp: any) {\n//     this.isRegistered(camp).subscribe(\n//       (isRegistered: boolean) => {\n//         // console.log(isRegistered)\n//         if (isRegistered) {\n//           this.unregisterCamp(camp);\n//         } else {\n//           this.registerCamp(camp);\n//         }\n//       },\n//       (error: any) => {\n//         console.error(error);\n//       }\n//     );\n//   }\n//   getRegisterationStatus(camp: any) {\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     this.bloodBankService.campsRegistered(donorId).subscribe(\n//       (data: any) => {\n//         console.log(data)\n//         this.registeredCamps = data;\n//       }\n//     )\n//     const camps = this.registeredCamps || [];\n//     return camps.some((registeredCamp: any) => registeredCamp.id === camp.id);\n//   }\n//   registerCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     // console.log(this.registeredCamps)\n//     this.bloodBankService.registerDonor(item).subscribe(\n//       (data: any) => {\n//         // console.log(data)\n//         this.toast.success('Registered successfully');\n//       },\n//       (error: any) => {\n//         // console.log(error)\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n//   unregisterCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n//     // console.log(this.registeredCamps)\n//     this.bloodBankService.unregisterDonor(item).subscribe(\n//       (data: any) => {\n//         // console.log(data)\n//         this.toast.success('Unregistered successfully');\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n// }\nimport { Component } from '@angular/core';\nimport { map } from 'rxjs';\nlet DonorHomeComponent = class DonorHomeComponent {\n  constructor(toast, router, route, bloodBankService) {\n    this.toast = toast;\n    this.router = router;\n    this.route = route;\n    this.bloodBankService = bloodBankService;\n    this.registeredCamps = {};\n  }\n  ngOnInit() {\n    this.postCamps();\n    this.getRegistrationStatus();\n  }\n  postCamps() {\n    this.bloodBankService.getCamps().subscribe(data => {\n      this.camps = data;\n      console.log(data);\n    });\n  }\n  convertTo12HourFormat(timeString) {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime;\n    let period;\n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n    return `${formattedTime}:${minutes} ${period}`;\n  }\n  isRegistered(camp) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    return this.bloodBankService.isRegister(item).pipe(map(data => data.isRegistered));\n  }\n  getRegistrationStatus() {\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    this.bloodBankService.campsRegistered(donorId).subscribe(data => {\n      console.log(data);\n      this.registeredCamps = data.reduce((result, camp) => {\n        result[camp.id] = true;\n        return result;\n      }, {});\n    });\n  }\n  onButtonClick(camp) {\n    const isRegistered = this.registeredCamps[camp.id] || false;\n    if (isRegistered) {\n      this.unregisterCamp(camp);\n    } else {\n      this.registerCamp(camp);\n    }\n  }\n  registerCamp(camp) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    this.bloodBankService.registerDonor(item).subscribe(data => {\n      this.toast.success('Registered successfully');\n      this.registeredCamps[camp.id] = true;\n    }, error => {\n      this.toast.error(error.error.error.message);\n    });\n  }\n  unregisterCamp(camp) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n    this.bloodBankService.unregisterDonor(item).subscribe(data => {\n      this.toast.success('Unregistered successfully');\n      this.registeredCamps[camp.id] = false;\n    }, error => {\n      this.toast.error(error.error.error.message);\n    });\n  }\n};\nDonorHomeComponent = __decorate([Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})], DonorHomeComponent);\nexport { DonorHomeComponent };","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,SAAS,QAAQ,eAAe;AAIzC,SAAqBC,GAAG,QAAQ,MAAM;AAO/B,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAI7BC,YACUC,KAAsB,EACtBC,MAAc,EACdC,KAAqB,EACrBC,gBAAkC;IAHlC,UAAK,GAALH,KAAK;IACL,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IACL,qBAAgB,GAAhBC,gBAAgB;IAP1B,oBAAe,GAAQ,EAAE;EAQtB;EAEHC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,qBAAqB,EAAE;EAC9B;EAEAD,SAAS;IACP,IAAI,CAACF,gBAAgB,CAACI,QAAQ,EAAE,CAACC,SAAS,CACvCC,IAAS,IAAI;MACZ,IAAI,CAACC,KAAK,GAAGD,IAAI;MACjBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACnB,CAAC,CACF;EACH;EAEAI,qBAAqB,CAACC,UAAe;IACnC,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;I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","names":["Component","map","DonorHomeComponent","constructor","toast","router","route","bloodBankService","ngOnInit","postCamps","getRegistrationStatus","getCamps","subscribe","data","camps","console","log","convertTo12HourFormat","timeString","hours","minutes","split","formattedTime","period","isRegistered","camp","campId","id","donorId","Number","snapshot","paramMap","get","item","isRegister","pipe","campsRegistered","registeredCamps","reduce","result","onButtonClick","unregisterCamp","registerCamp","registerDonor","success","error","message","unregisterDonor","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\Arcs Infotech\\blood-bank-system\\src\\app\\donor-home\\donor-home.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { HotToastService } from '@ngneat/hot-toast';\n// import { BloodBankService } from '../blood-bank.service';\n// import { Observable, map } from 'rxjs';\n\n// @Component({\n//   selector: 'app-donor-home',\n//   templateUrl: './donor-home.component.html',\n//   styleUrls: ['./donor-home.component.css']\n// })\n// export class DonorHomeComponent {\n//   registeredCamps: any\n//   camps: any;\n\n//   constructor(\n//     private toast: HotToastService,\n//     private router: Router,\n//     private route: ActivatedRoute,\n//     private bloodBankService: BloodBankService\n//   ) {}\n\n//   ngOnInit(): void {\n//     this.postCamps();\n//   }\n\n//   postCamps(): void {\n//     this.bloodBankService.getCamps().subscribe(\n//       (data: any) => {\n//         this.camps = data\n//         console.log(data)\n//       }\n//     )\n//   }\n\n//   convertTo12HourFormat(timeString: any): string {\n//     const [hours, minutes] = timeString.split(\":\");\n//     let formattedTime: number;\n//     let period: string;\n  \n//     if (hours < 12) {\n//       formattedTime = hours;\n//       period = \"AM\";\n//     } else {\n//       formattedTime = hours % 12;\n//       period = \"PM\";\n//     }\n  \n//     return `${formattedTime}:${minutes} ${period}`;\n//   }\n\n\n//   isRegistered(camp: any): Observable<boolean> {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n  \n//     return this.bloodBankService.isRegister(item).pipe(\n//       map((data: any) => data.isRegistered)\n//     );\n//   }\n  \n//   onButtonClick(camp: any) {\n//     this.isRegistered(camp).subscribe(\n//       (isRegistered: boolean) => {\n//         // console.log(isRegistered)\n//         if (isRegistered) {\n//           this.unregisterCamp(camp);\n//         } else {\n//           this.registerCamp(camp);\n//         }\n//       },\n//       (error: any) => {\n//         console.error(error);\n//       }\n//     );\n//   }\n\n//   getRegisterationStatus(camp: any) {\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     this.bloodBankService.campsRegistered(donorId).subscribe(\n//       (data: any) => {\n//         console.log(data)\n//         this.registeredCamps = data;\n//       }\n//     )\n\n//     const camps = this.registeredCamps || [];\n\n//     return camps.some((registeredCamp: any) => registeredCamp.id === camp.id);\n//   }\n  \n//   registerCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     // console.log(this.registeredCamps)\n\n//     this.bloodBankService.registerDonor(item).subscribe(\n//       (data: any) => {\n//         // console.log(data)\n//         this.toast.success('Registered successfully');\n//       },\n//       (error: any) => {\n//         // console.log(error)\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n  \n//   unregisterCamp(camp: any) {\n//     const campId = camp.id;\n//     const donorId = Number(this.route.snapshot.paramMap.get('id'));\n//     const item = {\n//       campId,\n//       donorId\n//     };\n\n//     // console.log(this.registeredCamps)\n\n//     this.bloodBankService.unregisterDonor(item).subscribe(\n//       (data: any) => {\n//         // console.log(data)\n//         this.toast.success('Unregistered successfully');\n//       },\n//       (error: any) => {\n//         this.toast.error(error.error.error.message);\n//       }\n//     );\n//   }\n// }\n\n\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HotToastService } from '@ngneat/hot-toast';\nimport { BloodBankService } from '../blood-bank.service';\nimport { Observable, map } from 'rxjs';\n\n@Component({\n  selector: 'app-donor-home',\n  templateUrl: './donor-home.component.html',\n  styleUrls: ['./donor-home.component.css']\n})\nexport class DonorHomeComponent {\n  registeredCamps: any = {};\n  camps: any;\n\n  constructor(\n    private toast: HotToastService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private bloodBankService: BloodBankService\n  ) {}\n\n  ngOnInit(): void {\n    this.postCamps();\n    this.getRegistrationStatus();\n  }\n\n  postCamps(): void {\n    this.bloodBankService.getCamps().subscribe(\n      (data: any) => {\n        this.camps = data;\n        console.log(data);\n      }\n    );\n  }\n\n  convertTo12HourFormat(timeString: any): string {\n    const [hours, minutes] = timeString.split(\":\");\n    let formattedTime: number;\n    let period: string;\n\n    if (hours < 12) {\n      formattedTime = hours;\n      period = \"AM\";\n    } else {\n      formattedTime = hours % 12;\n      period = \"PM\";\n    }\n\n    return `${formattedTime}:${minutes} ${period}`;\n  }\n\n  isRegistered(camp: any): Observable<boolean> {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    return this.bloodBankService.isRegister(item).pipe(\n      map((data: any) => data.isRegistered)\n    );\n  }\n\n  getRegistrationStatus(): void {\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    this.bloodBankService.campsRegistered(donorId).subscribe(\n      (data: any) => {\n        console.log(data);\n        this.registeredCamps = data.reduce((result: any, camp: any) => {\n          result[camp.id] = true;\n          return result;\n        }, {});\n      }\n    );\n  }\n\n  onButtonClick(camp: any) {\n    const isRegistered = this.registeredCamps[camp.id] || false;\n\n    if (isRegistered) {\n      this.unregisterCamp(camp);\n    } else {\n      this.registerCamp(camp);\n    }\n  }\n\n  registerCamp(camp: any) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    this.bloodBankService.registerDonor(item).subscribe(\n      (data: any) => {\n        this.toast.success('Registered successfully');\n        this.registeredCamps[camp.id] = true;\n      },\n      (error: any) => {\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n\n  unregisterCamp(camp: any) {\n    const campId = camp.id;\n    const donorId = Number(this.route.snapshot.paramMap.get('id'));\n    const item = {\n      campId,\n      donorId\n    };\n\n    this.bloodBankService.unregisterDonor(item).subscribe(\n      (data: any) => {\n        this.toast.success('Unregistered successfully');\n        this.registeredCamps[camp.id] = false;\n      },\n      (error: any) => {\n        this.toast.error(error.error.error.message);\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}